{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"react\"","webpack:///external \"lodash\"","webpack:///external \"@grafana/ui\"","webpack:///external \"@grafana/data\"","webpack:///./components/plugin.css?ac86","webpack:///../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack:///../node_modules/css-loader/dist/runtime/api.js","webpack:///external \"@grafana/runtime\"","webpack:///./components/plugin.css","webpack:///./instana-grafana.css?3c02","webpack:///./instana-grafana.css","webpack:///./components/ApplicationServiceEndpointMetrics/ApplicationBoundaryScope.css?0b42","webpack:///./components/ApplicationServiceEndpointMetrics/ApplicationBoundaryScope.css","webpack:///../node_modules/tslib/tslib.es6.js","webpack:///./GlobalVariables.ts","webpack:///./util/delta_util.ts","webpack:///./lists/granularities.ts","webpack:///./util/time_util.ts","webpack:///./lists/rollups.ts","webpack:///./util/rollup_granularity_util.ts","webpack:///./util/request_handler.ts","webpack:///./cache.ts","webpack:///./util/analyze_util.ts","webpack:///./util/target_util.ts","webpack:///./lists/default_metric_catalog.ts","webpack:///./util/queryInterval_check.ts","webpack:///./util/instana_version.ts","webpack:///./datasources/DataSource_Application.ts","webpack:///./datasources/DataSource_Endpoint.ts","webpack:///./lists/max_metrics.ts","webpack:///./datasources/Datasource_Infrastructure.ts","webpack:///./datasources/DataSource_MobileApp.ts","webpack:///./datasources/DataSource_Service.ts","webpack:///./datasources/DataSource_Slo.ts","webpack:///./datasources/DataSource_Website.ts","webpack:///./lists/metric_categories.ts","webpack:///./util/aggregation_util.ts","webpack:///./migration.ts","webpack:///./datasources/DataSource.ts","webpack:///./util/proxy_check.ts","webpack:///./components/ConfigEditor.tsx","webpack:///./components/FormField/FormWrapper.tsx","webpack:///./components/FormField/FormSwitch.tsx","webpack:///./components/Infrastructure/Custom/FreeTextMetrics.tsx","webpack:///./lists/aggregation_function.ts","webpack:///./components/AdvancedSettings/AggregateQuery.tsx","webpack:///./components/FormField/FormInput.tsx","webpack:///./components/AdvancedSettings/AdvancedSettings.tsx","webpack:///./lists/apply_call_to_entities.ts","webpack:///./components/Entity/Entity.tsx","webpack:///./components/Analyze/ApplicationCallsMetrics.tsx","webpack:///./components/ApplicationServiceEndpointMetrics/ApplicationBoundaryScope.tsx","webpack:///./components/ApplicationServiceEndpointMetrics/ApplicationServiceEndpointMetrics.tsx","webpack:///./components/Infrastructure/Explore.tsx","webpack:///./lists/operators.ts","webpack:///./components/FormField/FormTextArea.tsx","webpack:///./components/Analyze/Filter.tsx","webpack:///./components/FormField/FormSelect.tsx","webpack:///./components/Infrastructure/QueryType.tsx","webpack:///./components/Infrastructure/Infrastructure.tsx","webpack:///./components/Metric/Metric.tsx","webpack:///./components/Infrastructure/Custom/MetricFilter.tsx","webpack:///./lists/beacon_types_mobile_app.ts","webpack:///./components/Analyze/MobileAppMetrics.tsx","webpack:///./lists/slo_specifics.ts","webpack:///./components/SLOInformation/SloInformation.tsx","webpack:///./lists/beacon_types_website.ts","webpack:///./components/Analyze/WebsiteMetrics.tsx","webpack:///./components/QueryEditor.tsx","webpack:///./module.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__3__","api","content","default","options","exported","locals","memo","isOldIE","Boolean","window","document","all","atob","getTarget","target","styleTarget","querySelector","HTMLIFrameElement","contentDocument","head","e","stylesInDom","getIndexByIdentifier","identifier","result","length","modulesToDom","list","idCountMap","identifiers","item","id","base","count","concat","index","obj","css","media","sourceMap","references","updater","push","addStyle","insertStyleElement","style","createElement","attributes","nonce","keys","forEach","setAttribute","insert","Error","appendChild","textStore","replaceText","replacement","filter","join","applyToSingletonTag","remove","styleSheet","cssText","cssNode","createTextNode","childNodes","removeChild","insertBefore","applyToTag","removeAttribute","btoa","unescape","encodeURIComponent","JSON","stringify","firstChild","singleton","singletonCounter","update","styleIndex","parentNode","removeStyleElement","newObj","lastIdentifiers","newList","toString","newLastIdentifiers","_i","_index","splice","useSourceMap","this","map","cssMapping","sourceMapping","base64","data","sourceURLs","sources","source","sourceRoot","cssWithMappingToString","mediaQuery","dedupe","alreadyImportedModules","__WEBPACK_EXTERNAL_MODULE__7__","___CSS_LOADER_API_IMPORT___","extendStatics","b","setPrototypeOf","__proto__","Array","__extends","TypeError","String","__","constructor","__assign","assign","arguments","apply","__rest","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","iterator","v","op","pop","__read","ar","error","ALL_APPLICATIONS","ALL_ENDPOINTS","omitLabels","readTime","time","from","Math","floor","Date","valueOf","getTime","to","windowSize","getWindowSize","timeFilter","getTimeKey","msToMin","hoursToMs","hours","atLeastGranularity","granularity","granularityInMs","max","availableFor","rollup","getDefaultChartGranularity","getPossibleGranularities","maxValues","possibleGranularities","granularities","getDefaultMetricRollupDuration","getPossibleRollups","now","possibleRollups","rollups","rollupDefinition","rollUp","getRequest","endpoint","swallowError","maxRetries","doRequest","method","url","postRequest","request","datasourceRequest","status","errors","includes","setTimeout","statusText","store","put","ttl","undefined","del","expiry","timeout","clearTimeout","createTagFilter","tagFilter","tag","operator","stringValue","type","numberValue","booleanValue","readItemMetrics","response","getLabel","flatten","items","metrics","datapoints","metric","refId","stableHash","emptyResultData","buildTimeSeries","description","aggregations","isInvalidQueryInterval","queryIntervalLimit","versionCache","getVersion","cachedVersion","imageTag","majorVersion","parseInt","split","instanaOptions","applicationsCache","miscCache","runQuery","queryinterval_limit_app_calls","group","fetchAnalyzeMetricsForApplication","showWarningCantShowAllResults","canLoadMore","buildAnalyzeApplicationLabel","getApplications","applications","paginateApplications","allResults","flattenDeep","pageSet","orderBy","compact","entry","boundaryScope","application","results","page","pageSize","pageLimit","queryParameters","totalHits","getApplicationTags","applicationTags","version","getCatalog","catalog","mapCatalogResponse","tags","getCatalogFromDeprecatedEndpoint","tagsResponse","canApplyToSource","canApplyToDestination","getApplicationMetricsCatalog","tagFilters","entity","applicationCallToEntity","filters","isValid","find","getTagEntity","timeInterval","aggregation","groupbyTag","callToEntity","groupbyTagSecondLevelKey","includeSynthetic","timeFrame","tagFilterExpression","logicalOperator","elements","selectedEntity","fetchApplicationMetrics","applicationBoundaryScope","labelFormat","replace","timeShift","timeShiftIsValid","buildApplicationMetricLabel","endpointsCache","getEndpointsOfService","applicationId","serviceId","service","endpoints","paginateEndpoints","fetchEndpointMetrics","endpointId","buildEndpointMetricLabel","timeToLiveSnapshotInfoCache","snapshotCache","snapshotInfoCache","catalogCache","typeCache","queryinterval_limit_infra","metricCategory","fetchAnalyzeEntities","showAllMetrics","freeTextMetrics","fetchSnapshotsForTarget","snapshots","fetchMultipleMetricsForSnapshots","allMetrics","extractMetricsFromText","fetchMetricsForSnapshots","freeText","metricsString","each","metricString","parse","slice","resultPromises","snapshotIds","snapshot","snapshotId","fetchMetricsForSnapshot","timeseries","readTimeSeries","displayMaxMetricValue","maxValue","getMaxMetricValue","buildMaxMetricTarget","convertRelativeToAbsolute","maxMetrics","max_metrics","resultLabel","series","timestamp","maxLabel","convertMetricNameToMaxLabel","datapoint","getEntityTypes","entityTypes","typesResponse","plugin","sortBy","fetchTypesForTarget","query","fetchSnapshotTypesUrl","entityQuery","showOffline","fetchAvailableMetricsForEntityType","metricResponse","payload","pagination","retrievalSize","groupBy","res","message","getMetricsCatalog","catalogResponse","metricId","entityType","pluginId","buildQuery","buildSnapshotCacheKey","fetchSnapshotContextsUrl","contextsResponse","host","snapshotInfo","fetchSnapshotUrl","snapshotResponse","reduceSnapshot","pick","values","correctMeanToSum","secondMultiplier","getHostSuffix","buildLabel","MobileAppCache","queryinterval_limit_mobileapp_metrics","fetchAnalyzeMetricsForMobileapp","buildAnalyzeMobileAppLabel","getMobileapp","mobileapps","mobileappsResponse","mobile","getMobileappTags","mobileappTags","getMobileappMetricsCatalog","mobileappCatalog","transformAggregations","sort","beaconTypes","transformBeaconTypes","a","servicesCache","getServicesOfApplication","services","paginateServices","fetchServiceMetrics","buildServiceMetricLabel","sliReportsCache","getConfiguredSLIs","sliReports","sliName","sloReport","sloSpecific","sloValue","extractSpecificValueFromSLI","sliResult","buildResultArray","sli","errorBudgetRemaining","buildViolationDistributionTimeSeries","violationDistribution","greens","reds","greys","websitesCache","queryinterval_limit_website_metrics","fetchAnalyzeMetricsForWebsite","buildAnalyzeWebsiteLabel","getWebsites","websites","websitesResponse","website","getWebsiteTags","websiteTags","getWebsiteMetricsCatalog","websiteCatalog","aggregateTarget","targetLabel","customFilters","aggregationFunction","buildAggregationLabel","concatedTargetData","concatTargetData","aggregatedData","dataGroupedByTimestamp","aggregationLabel","timestampData","valuesOfTimestamp","aggregatedValue","toLowerCase","sum","mean","min","aggregateDataOfTimestamp","buildResult","selectedApplication","cf","metric_categories","category","instanceSettings","jsonData","useProxy","trimEnd","instanaUrl","availableGranularities","availableRollups","availableTimeIntervals","dataSourceSlo","dataSourceInfrastructure","dataSourceWebsite","dataSourceMobileapp","dataSourceApplication","dataSourceService","dataSourceEndpoint","resultCache","DataSource","range","targets","pseudoHash","targetTimeFilter","hide","setPossibleTimeIntervals","getDefaultTimeInterval","millis","convertTimeShiftToMillis","applyTimeShiftOnTimeFilter","omit","mapValues","adjustTimeFilterIfCached","buildTargetWithAppendedDataResult","buildTarget","getApplicationServiceEndpointMetrics","targetData","targetAndData","resultData","cacheResultIfNecessary","cloneDeep","applyTimeShiftIfNecessary","aggregateDataIfNecessary","queryinterval_limit_app_metrics","applyTimeShiftOnData","supportsDeltaRequests","hasResult","cachedObj","timeshift","newData","aggregateGraphs","hideOriginalGraphs","dt","appendResult","newDeltaData","cachedData","cachedResult","deltaData","matchingCachedDataIndex","findIndex","sortedUniqBy","takeRight","t1","t2","newFrom","fromDefault","penultimate","getDeltaRequestTimestamp","newTo","getSloReports","fetchApplications","getTimeFilter","fetchApplicationTags","fetchServices","fetchEndpoints","fetchWebsites","fetchMobileapp","fetchMetricsForEntityType","parseTimeShift","endsWith","testDatasource","title","versions","props","onInstanaOptionsChange","eventItem","secureJsonData","onOptionsChange","currentTarget","apiToken","isApiKeyConfigured","apiKeyValue","setState","debouncedDetectFeatures","onResetAPIKey","secureJsonFields","onSwitchChange","settings","debounce","detectFeatures","canUseProxy","canQueryOfflineSnapshots","state","render","className","horizontal","required","width","placeholder","onChange","event","display","readOnly","suffix","href","theme","marginLeft","onClick","disabled","allowInfraExplore","FormWrapper","opacity","pointerEvents","stretch","children","Switch","tooltip","queryKeyword","labelWidth","remainingProps","checked","Component","debouncedRunQuery","onRunQuery","onUseFreeTextMetricsChange","loadEntityTypes","useFreeTextMetrics","onFreeTextMetricsChange","onAggregateGraphs","onHideOriginalGraph","onAggregationFunctionChange","showAdditionalSettings","legendFormat","menuPlacement","isSearchable","inputWidth","legendFormatPlaceholders","legendFormatTooltips","onLegendFormatChange","onTimeShiftChange","match","onShowAdvancedSettingsChange","showAdvancedSettings","legendFormatPlaceholder","setLegendFormatPlaceholder","setLegendFormatTooltip","hidden","invalid","dropdown","position","background","height","marginRight","dropdown__list","transition","maxHeight","overflow","zIndex","dropdown__list__active","iconTextContainer","iconStyle","alignItems","justifyContent","iconTextStyle","padding","destinationIcon","transform","fill","sourceIcon","Entity","dropdown__list__item","colors","bg2","cursor","listStyle","borderRadius","active","setActive","handleClick","onBlur","contentEditable","placement","isUnmounting","onApplicationChange","onGroupChange","showGroupBySecondLevel","onApplicationCallToEntityChange","onCallToEntityChange","onGroupByTagSecondLevelKeyChange","componentDidMount","datasource","unshift","updateGroups","updateMetrics","componentWillUnmount","groups","inboundIcon","allIcon","loadServices","loadEndpoints","onServiceChange","onEndpointChange","onApplicationBoundaryScopeChange","scope","imgUrl","loadApplications","app","onEntityChange","onInfraCallToEntityChange","rows","OPERATOR_STRING","OPERATOR_STRING_SET","OPERATOR_NUMBER","OPERATOR_BOOLEAN","OPERATOR_KEY_VALUE","addTagFilter","filterOperatorsOnType","removeTagFilter","validateChangeAndRun","onOperatorChange","onTagFilterStringValueChange","onTagFilterNumberValueChange","valueAsNumber","onFilterChange","filterValue","textareaValue","trim","operators","canShowStringInput","canShowNumberInput","onTagFilterBooleanValueChange","runDebounced","isNaN","listFilter","singleFilter","variant","searchable","onQueryChange","updateQueryTypes","debouncedEntityTypes","onTypeChange","queryTypes","noOptionsMessage","onMetricChange","canShowMaxMetricValue","onTimeIntervalChange","onAggregationChange","onShowMaxValueChange","onShowAllMetricsChange","availableMetrics","possibleTimeIntervals","possibleAggregations","canShowAggregation","canSelectAggregation","canShowAllMetrics","addCustomFilter","removeCustomFilter","onMobileappChange","mobileapp","onBeaconTypeChange","filterMetricsOnType","mobileappMetrics","onSloChange","slo","onSloValueChange","onSloSpecificChange","sloReports","isValidSlo","loadSloReports","val","valid","shouldComponentUpdate","nextProps","nextState","nextContext","onWebsiteChange","websiteMetrics","onCategoryChange","newCategory","selectionReset","changeAndRun","onMetricsFilter","setMetricPlaceholder","filterForEntityType","findMatchingEntityTypes","filterResults","filterEntityTypes","types","newAvailableMetrics","applyFilterToMetricList","isAbleToShowAllMetrics","checkMetricAndRefresh","defaultQuery","selectedWindowSize","componentDidUpdate","prevProps","prevState","nrOfTotalResults","filterResult","filteredMetrics","resetMetricSelection","resetEntityTypeSelection","resetEntitySelection","resetServices","resetEndpoints","resetSLO","categories","text","color","setConfigEditor","setQueryEditor"],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","var api = require(\"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../node_modules/css-loader/dist/cjs.js??ref--8-1!../../node_modules/postcss-loader/src/index.js??ref--8-2!../../node_modules/sass-loader/dist/cjs.js!./plugin.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;","\"use strict\";\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce = typeof __webpack_nonce__ !== 'undefined' ? __webpack_nonce__ : null;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && btoa) {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join('');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === 'string') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, '']];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === 'function') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || '').concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n  return \"/*# \".concat(data, \" */\");\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(true);\n// Module\nexports.push([module.id, \".entityDropdown{min-width:80px}.settings{max-width:600px}\", \"\",{\"version\":3,\"sources\":[\"plugin.css\"],\"names\":[],\"mappings\":\"AAAA,gBAAgB,cAAc,CAAC,UAAU,eAAe\",\"file\":\"plugin.css\",\"sourcesContent\":[\".entityDropdown{min-width:80px}.settings{max-width:600px}\"]}]);\n// Exports\nmodule.exports = exports;\n","var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js??ref--8-1!../node_modules/postcss-loader/src/index.js??ref--8-2!../node_modules/sass-loader/dist/cjs.js!./instana-grafana.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(true);\n// Module\nexports.push([module.id, \"path[d=\\\"M18.71,7.21a1,1,0,0,0-1.42,0L9.84,14.67,6.71,11.53A1,1,0,1,0,5.29,13l3.84,3.84a1,1,0,0,0,1.42,0l8.16-8.16A1,1,0,0,0,18.71,7.21Z\\\"]{display:none}\", \"\",{\"version\":3,\"sources\":[\"instana-grafana.css\"],\"names\":[],\"mappings\":\"AAAA,0IAA0I,YAAY\",\"file\":\"instana-grafana.css\",\"sourcesContent\":[\"path[d=\\\"M18.71,7.21a1,1,0,0,0-1.42,0L9.84,14.67,6.71,11.53A1,1,0,1,0,5.29,13l3.84,3.84a1,1,0,0,0,1.42,0l8.16-8.16A1,1,0,0,0,18.71,7.21Z\\\"]{display:none}\"]}]);\n// Exports\nmodule.exports = exports;\n","var api = require(\"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../node_modules/css-loader/dist/cjs.js??ref--8-1!../../../node_modules/postcss-loader/src/index.js??ref--8-2!../../../node_modules/sass-loader/dist/cjs.js!./ApplicationBoundaryScope.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(true);\n// Module\nexports.push([module.id, \".dropdown{position:relative;background:transparent;width:\\\"32px\\\";height:\\\"32px\\\";margin-right:\\\"4px\\\"}.dropdown-list{transition:max-height .2s ease-out;max-height:0;overflow:hidden;z-index:2;position:absolute}.dropdown-list-active{overflow:hidden;z-index:2;max-height:1000px;opacity:1;position:absolute}.iconTextContainer{display:inline-flex}.iconStyle{display:flex;align-items:center;justify-content:center}.iconTextStyle{padding:7px}\", \"\",{\"version\":3,\"sources\":[\"ApplicationBoundaryScope.css\"],\"names\":[],\"mappings\":\"AAAA,UAAU,iBAAiB,CAAC,sBAAsB,CAAC,YAAY,CAAC,aAAa,CAAC,kBAAkB,CAAC,eAAe,kCAAkC,CAAC,YAAY,CAAC,eAAe,CAAC,SAAS,CAAC,iBAAiB,CAAC,sBAAsB,eAAe,CAAC,SAAS,CAAC,iBAAiB,CAAC,SAAS,CAAC,iBAAiB,CAAC,mBAAmB,mBAAmB,CAAC,WAAW,YAAY,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,eAAe,WAAW\",\"file\":\"ApplicationBoundaryScope.css\",\"sourcesContent\":[\".dropdown{position:relative;background:transparent;width:\\\"32px\\\";height:\\\"32px\\\";margin-right:\\\"4px\\\"}.dropdown-list{transition:max-height .2s ease-out;max-height:0;overflow:hidden;z-index:2;position:absolute}.dropdown-list-active{overflow:hidden;z-index:2;max-height:1000px;opacity:1;position:absolute}.iconTextContainer{display:inline-flex}.iconStyle{display:flex;align-items:center;justify-content:center}.iconTextStyle{padding:7px}\"]}]);\n// Exports\nmodule.exports = exports;\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","/* CONFIG */\nexport const PAGINATION_LIMIT = 15; // pagesize=200 => 3000 results in dropdown (~30sec.)\nexport const CACHE_MAX_AGE = 60000;\nexport const SEPARATOR = '|';\n\n/* CATEGORIES */\nexport const BUILT_IN_METRICS = 0;\nexport const CUSTOM_METRICS = 1;\nexport const ANALYZE_APPLICATION_METRICS = 2;\nexport const ANALYZE_WEBSITE_METRICS = 3;\nexport const APPLICATION_SERVICE_ENDPOINT_METRICS = 4; // replaces previous ->\n// APPLICATION_METRICS = '4';\n// SERVICE_METRICS = '5';\n// ENDPOINT_METRICS = '6';\nexport const SLO_INFORMATION = 7;\nexport const INFRASTRUCTURE_ANALYZE = 8;\nexport const ANALYZE_MOBILE_APP_METRICS = 9;\n\n/* DROPDOWN DEFAULTS */\nexport const ALL_APPLICATIONS = '-- No Application Filter --';\nexport const ALL_WEBSITES = '-- No Website Filter --';\nexport const ALL_MOBILE_APPS = '-- No Mobile App Filter --';\nexport const ALL_SERVICES = '-- No Service Filter --';\nexport const ALL_ENDPOINTS = '-- No Endpoint Filter --';\n\n/* PLACEHOLDER */\nexport const PLEASE_SPECIFY = 'Please specify';\n","import _ from 'lodash';\n\nimport TimeFilter from '../types/time_filter';\n\nconst omitLabels = [\n  'refId',\n  'pluginId',\n  'showWarningCantShowAllResults',\n  'timeShiftIsValid',\n  'useFreeTextMetrics',\n  'showGroupBySecondLevel',\n  'canShowAllMetrics',\n  'timeFilter',\n  'stableHash',\n];\n\nexport function generateStableHash(obj: any): string {\n  let pseudoHash = _.omit(obj, omitLabels);\n  pseudoHash = _.mapValues(pseudoHash, (value: any) => {\n    // to reduce overhead of interface Selectable\n    if (value != null && typeof value === 'object' && 'key' in value) {\n      value = value.key;\n    }\n\n    return value;\n  });\n  return JSON.stringify(pseudoHash);\n}\n\n/* Check if two time filters are overlapping.\n\nReturn true when:\na)\n  from |-------------------| to (t2)\n              from |--------------------| to (t1)\nb)\n  from |-------------------| to (t2)\n  from |-------------------| to (t1)\nc)\n  from |-------------------| to (t2)\n              from |-------| to (t1)\n\nReturns false when:\nd)\n  from |-------------------| to (t2)\n                      from |-------| to (t1)\ne)\n  from |-------------------| to (t2)\n       from |--------| to (t1)\nf)\n     from |-------------------| to (t2)\nfrom |----------------------------------------| to (t1)\ng)\n                from |-------------------| to (t2)\n  from |--------------------| to (t1)\nh)\n                from |-------------------| to (t2)\n  from |-------------| to (t1)\ni)\n                from |-------------------| to (t2)\n  from |--------| to (t1)\nj)\n  from |-------------------| to (t2)\n                        from |----------| to (t1)\nk)\n  from |-------------------| to (t2)\n  from |----------| to (t1)\n*/\nexport function hasIntersection(t1: TimeFilter, t2: TimeFilter): boolean {\n  return t1.from < t2.to && t1.from >= t2.from && t1.to >= t2.to;\n}\n\n/*\n  Appends new found items to already existing data in cache.\n  Also removes old data accordingly (e.g. if 4 new datapoints were added,\n  the corresponding oldest four datapoints are removed).\n*/\nexport function appendData(newDeltaData: any, cachedData: any): any {\n  _.each(newDeltaData, (deltaData) => {\n    let matchingCachedDataIndex = _.findIndex(\n      cachedData,\n      (o: any) => o.key === deltaData.key && o.target === deltaData.target\n    );\n    if (cachedData[matchingCachedDataIndex] && deltaData.datapoints) {\n      // const size = matchingCachedData.datapoints.length;\n      let datapoints = deltaData.datapoints.concat(cachedData[matchingCachedDataIndex].datapoints);\n      datapoints = _.sortedUniqBy(\n        datapoints.sort((a: any, b: any) => a[1] - b[1]),\n        (a: any) => a[1]\n      );\n      cachedData[matchingCachedDataIndex].datapoints = _.takeRight(datapoints, 800);\n      cachedData[matchingCachedDataIndex].target = deltaData.target;\n    } else {\n      cachedData.push(deltaData);\n    }\n  });\n\n  return cachedData;\n}\n\nexport function getDeltaRequestTimestamp(series: any, fromDefault: number, timeInterval: any): number {\n  // we do not apply any delta for requests that contain a one second granularity (application requests)\n  if (timeInterval.key === '1') {\n    return fromDefault;\n  }\n\n  // the found series can have multiple results, it's ok just to use the first one\n  // because data is written in batches and we know that once there is a datapoint\n  // for a series, the other series' datapoints are up-to-date as well.\n  const length = series[0].datapoints.length;\n  if (length < 2) {\n    return fromDefault;\n  }\n\n  const penultimate = length - 2;\n  return series[0].datapoints[penultimate][1];\n}\n","// accoring to metrics/BaseGranularity.java\nexport default [\n  {\n    value: 1, // 1s\n    label: '1s',\n  },\n  {\n    value: 5, // 5s\n    label: '5s',\n  },\n  {\n    value: 10, // 10s\n    label: '10s',\n  },\n  {\n    value: 60, // 1m\n    label: '1min',\n  },\n  {\n    value: 60 * 5, // 5m\n    label: '5min',\n  },\n  {\n    value: 60 * 10, // 10m\n    label: '10min',\n  },\n  {\n    value: 60 * 30, // 30m\n    label: '30min',\n  },\n  {\n    value: 60 * 60, // 1h\n    label: '1h',\n  },\n  {\n    value: 60 * 60 * 4, // 4h\n    label: '4h',\n  },\n  {\n    value: 60 * 60 * 6, // 6h\n    label: '6h',\n  },\n  {\n    value: 60 * 60 * 8, // 8h\n    label: '8h',\n  },\n  {\n    value: 60 * 60 * 12, // 12h\n    label: '12h',\n  },\n  {\n    value: 60 * 60 * 24, // 1d\n    label: '1d',\n  },\n  {\n    value: 60 * 60 * 24 * 5, // 5d\n    label: '5d',\n  },\n  {\n    value: 60 * 60 * 24 * 10, // 10d\n    label: '10d',\n  },\n];\n","import { TimeRange } from '@grafana/data/types/time';\nimport TimeFilter from '../types/time_filter';\nimport { SEPARATOR } from '../GlobalVariables';\n\nexport function readTime(time: TimeRange): TimeFilter {\n  const from = Math.floor(new Date(time!.from.valueOf()).getTime() / 1000) * 1000;\n  const to = Math.floor(new Date(time!.to.valueOf()).getTime() / 1000) * 1000;\n  return {\n    from: from,\n    to: to,\n    windowSize: to - from,\n  };\n}\n\nexport function getWindowSize(timeFilter: TimeFilter): number {\n  return timeFilter.from ? timeFilter.to - timeFilter.from : timeFilter.windowSize;\n}\n\nexport function getTimeKey(timeFilter: TimeFilter): string {\n  // time might be part of a cache key as this can cause different results\n  return msToMin(timeFilter.from) + SEPARATOR + msToMin(timeFilter.to);\n}\n\nfunction msToMin(time: number): number {\n  return Math.floor(time / 60000);\n}\n\nexport function hoursToMs(hours: any): number {\n  if (hours > 0) {\n    return hours * 60 * 60 * 1000;\n  }\n  return 0;\n}\n\nexport function atLeastGranularity(windowSize: number, granularity: number): number {\n  // api does not support a windowSize smaller than queried granularity in ms\n  const granularityInMs = granularity * 1000;\n  return Math.max(windowSize, granularityInMs);\n}\n","export default [\n  {\n    availableFor: 1000 * 60 * 60 * 24, // 1d\n    rollup: 1000, // 1s\n    label: '1s',\n  },\n  {\n    availableFor: 1000 * 60 * 60 * 24, // 1d\n    rollup: 1000 * 5, // 5s\n    label: '5s',\n  },\n  {\n    availableFor: 1000 * 60 * 60 * 24 * 31, // 1 month\n    rollup: 1000 * 60, // 1m\n    label: '1min',\n  },\n  {\n    availableFor: 1000 * 60 * 60 * 24 * 31 * 3, // 3 months\n    rollup: 1000 * 60 * 5, // 5m\n    label: '5min',\n  },\n  {\n    availableFor: 1000 * 60 * 60 * 24 * 31 * 12, // 1 year aka forever\n    rollup: 1000 * 60 * 60, // 1h\n    label: '1h',\n  },\n];\n","import granularities from '../lists/granularities';\nimport TimeFilter from '../types/time_filter';\nimport Selectable from '../types/selectable';\nimport { getWindowSize } from './time_util';\nimport rollups from '../lists/rollups';\n\nconst MAX_DATAPOINTS_ANALYZE = 600;\nconst MAX_DATAPOINTS_INFRASTRUCTURE = 800;\nconst UI_DATAPOINTS_ANALYZE = 80;\n\nfunction currentTime() {\n  return Date.now();\n}\n\nexport function getDefaultChartGranularity(windowSize: number): Selectable {\n  return getPossibleGranularities(windowSize, UI_DATAPOINTS_ANALYZE)[0];\n}\n\nexport function getPossibleGranularities(windowSize: number, maxValues = MAX_DATAPOINTS_ANALYZE): Selectable[] {\n  let possibleGranularities = granularities.filter(\n    (granularity) => windowSize / 1000 / granularity.value <= maxValues && granularity.value * 1000 <= windowSize\n  );\n\n  // window sizes of this length and up have a granularity of at least 1h\n  if (windowSize > 48000001) {\n    possibleGranularities = possibleGranularities.filter((granularity) => granularity.value >= 3600);\n  }\n\n  if (windowSize >= 1800000) {\n    possibleGranularities = possibleGranularities.filter((granularity) => granularity.value >= 60);\n  }\n\n  if (possibleGranularities.length > 0) {\n    return possibleGranularities.map((granularity) => ({\n      key: granularity.value.toString(),\n      label: granularity.label,\n    }));\n  }\n\n  return [\n    {\n      key: granularities[granularities.length - 1].value.toString(),\n      label: granularities[granularities.length - 1].label,\n    },\n  ];\n}\n\nexport function getDefaultMetricRollupDuration(timeFilter: TimeFilter): Selectable {\n  return getPossibleRollups(timeFilter)[0];\n}\n\nexport function getPossibleRollups(timeFilter: TimeFilter): Selectable[] {\n  // Ignoring time differences for now since small time differences\n  // can be accepted. This time is only used to calculate the rollup.\n  const now = currentTime();\n  const windowSize = getWindowSize(timeFilter);\n\n  let possibleRollups = rollups\n    .filter((rollupDefinition) => timeFilter.from >= now - rollupDefinition.availableFor)\n    .filter((rollUp) => windowSize >= rollUp.rollup && windowSize / rollUp.rollup <= MAX_DATAPOINTS_INFRASTRUCTURE);\n\n  if (possibleRollups.length > 0) {\n    return possibleRollups.map((rollup) => ({\n      key: rollup.rollup.toString(),\n      label: rollup.label,\n    }));\n  }\n\n  return [\n    {\n      key: rollups[rollups.length - 1].rollup.toString(),\n      label: rollups[rollups.length - 1].label,\n    },\n  ];\n}\n","import { getBackendSrv } from '@grafana/runtime';\nimport { BackendSrvRequest } from '@grafana/runtime/services/backendSrv';\nimport { InstanaOptions } from '../types/instana_options';\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport _ from 'lodash';\n\nexport const getRequest = (options: InstanaOptions, endpoint: string, swallowError = false, maxRetries = 1) => {\n  const request = {\n    method: 'GET',\n    url: options.url + endpoint,\n  };\n\n  return doRequest(options, request, swallowError, maxRetries);\n};\n\nexport const postRequest = (\n  options: InstanaOptions,\n  endpoint: string,\n  data: {},\n  swallowError = false,\n  maxRetries = 0\n) => {\n  const request = {\n    method: 'POST',\n    url: options.url + endpoint,\n    data: data,\n  };\n\n  return doRequest(options, request, swallowError, maxRetries);\n};\n\nfunction doRequest(\n  options: InstanaOptions,\n  request: BackendSrvRequest,\n  swallowError: boolean,\n  maxRetries: number\n): any {\n  return getBackendSrv()\n    .datasourceRequest(request)\n    .catch((error) => {\n      if (error.status === 429) {\n        // if the error was caused by a concurrent execution limit, we will retry\n        if (\n          maxRetries > 0 &&\n          error.data?.errors &&\n          error.data.errors[0] &&\n          error.data.errors[0].includes('concurrent')\n        ) {\n          const backoff = maxRetries >= 4 ? 10000 : (4 - maxRetries) * 20000; // something between 10 and 60 seconds\n          return new Promise((resolve) => setTimeout(resolve, backoff)).then(() => {\n            return doRequest(options, request, swallowError, maxRetries - 1);\n          });\n        }\n        throw new Error('API limit is reached.');\n        return;\n      }\n\n      if (swallowError && (error.status >= 400 || error.status < 500)) {\n        console.log(error);\n        return;\n      }\n      if (maxRetries > 0 && error.status >= 500) {\n        return doRequest(options, request, swallowError, maxRetries - 1);\n      }\n      // in order to display a reasonable error message text inside ui\n      if (!error.statusText && error.data?.errors && error.data.errors[0]) {\n        throw new Error(error.data.errors[0]);\n      }\n      throw error;\n    });\n}\n\nexport function instanaUrl(instanceSettings: DataSourceInstanceSettings<InstanaOptions>): string {\n  if (instanceSettings.jsonData.useProxy) {\n    return _.trimEnd(instanceSettings.url, '/ ') + '/instana'; // to match proxy route in plugin.json\n  } else {\n    return _.trimEnd(instanceSettings.jsonData.url, '/ ');\n  }\n}\n","export default class Cache<T> {\n  store: any;\n\n  constructor() {\n    this.store = {};\n  }\n\n  put(key: string, value: T, ttl = 70000): void {\n    if (key === undefined || value === undefined) {\n      return;\n    }\n\n    this.del(key);\n    this.store[key] = {\n      value,\n      expiry: Date.now() + ttl,\n      timeout: setTimeout(() => {\n        this.del(key);\n      }, ttl),\n    };\n  }\n\n  get(key: string): T {\n    var item = this.store[key];\n    if (item && !(item.expiry && item.expiry > Date.now())) {\n      this.del(key);\n      item = undefined;\n    }\n    return item && item.value;\n  }\n\n  del(key: string): void {\n    if (this.store.hasOwnProperty(key)) {\n      clearTimeout(this.store[key].timeout);\n      delete this.store[key];\n    }\n  }\n}\n","import TagFilter from '../types/tag_filter';\nimport _ from 'lodash';\nimport { InstanaQuery } from '../types/instana_query';\n\ninterface CustomTagFilter {\n  name: string;\n  operator: string;\n  value: string | boolean | number;\n}\n\nexport function createTagFilter(filter: TagFilter) {\n  let tagFilter: CustomTagFilter = {\n    name: filter.tag.key,\n    operator: filter.operator.key,\n    value: filter.stringValue,\n  };\n\n  if ('NUMBER' === filter.tag.type) {\n    if (filter.numberValue !== null) {\n      tagFilter.value = filter.numberValue;\n    }\n  } else if ('BOOLEAN' === filter.tag.type) {\n    tagFilter.value = filter.booleanValue;\n  }\n\n  return tagFilter;\n}\n\nexport function readItemMetrics(target: InstanaQuery, response: any, getLabel: any) {\n  if (!response.data) {\n    return response;\n  }\n\n  // as we map two times we need to flatten the result\n  return _.flatten(\n    response.data.items.map((item: any, index: number) => {\n      return _.map(item.metrics, (value, key) => {\n        return {\n          target: getLabel(target, item, key, index),\n          datapoints: _.map(value, (metric) => [metric[1], metric[0]]),\n          refId: target.refId,\n          key: target.stableHash,\n        };\n      });\n    })\n  );\n}\n","import { TimeSeries, TimeSeriesPoints } from '@grafana/data';\n\nexport function emptyResultData(refId: string): TimeSeries {\n  return {\n    target: refId,\n    datapoints: [],\n  };\n}\n\nexport function buildTimeSeries(label: string, refId: string, datapoints: TimeSeriesPoints): TimeSeries {\n  return {\n    target: label,\n    refId: refId,\n    datapoints: datapoints,\n  };\n}\n","export default [\n  { key: 'calls', label: 'Call count', description: 'calls', aggregations: [{ key: 'SUM', label: 'SUM' }] },\n  {\n    key: 'latency',\n    label: 'Call latency',\n    description: 'latency',\n    aggregations: [\n      { key: 'MAX', label: 'MAX' },\n      { key: 'MEAN', label: 'MEAN' },\n      { key: 'MIN', label: 'MIN' },\n      { key: 'P25', label: 'P25' },\n      { key: 'P50', label: 'P50' },\n      { key: 'P75', label: 'P75' },\n      { key: 'P90', label: 'P90' },\n      { key: 'P95', label: 'P95' },\n      { key: 'P98', label: 'P98' },\n      { key: 'P99', label: 'P99' },\n    ],\n  },\n  { key: 'errors', label: 'Error rate', description: 'errors', aggregations: [{ key: 'MEAN', label: 'MEAN' }] },\n  {\n    key: 'services',\n    label: 'Service Count',\n    description: 'services',\n    aggregations: [{ key: 'DISTINCT_COUNT', label: 'DISTINCT_COUNT' }],\n  },\n];\n","/**\n * Util method to validate query intervals which are too big.\n *\n * @param windowSize in ms\n * @param queryIntervalLimit in ms\n */\nexport function isInvalidQueryInterval(windowSize: number, queryIntervalLimit?: number): boolean {\n  if (queryIntervalLimit) {\n    if (queryIntervalLimit > 0) {\n      return Math.floor(windowSize / 1000) * 1000 > queryIntervalLimit;\n    }\n    return false;\n  }\n\n  return false;\n}\n","import Cache from '../cache';\nimport { getRequest } from './request_handler';\nimport { InstanaOptions } from '../types/instana_options';\n\nconst versionCache: Cache<number> = new Cache<number>();\n\n/*\n  Get version of current Instana backend and cache it for 10 minutes.\n  This should be the ONLY way to retrieve any information about the Instana backend version.\n */\nexport default function getVersion(options: InstanaOptions) {\n  let cachedVersion = versionCache.get('version');\n  if (cachedVersion) {\n    return Promise.resolve(cachedVersion);\n  }\n\n  return getRequest(options, '/api/instana/version').then(\n    (result: any) => {\n      if (result.data && result.data.imageTag) {\n        const majorVersion = parseInt(result.data.imageTag.split('.', 2)[1], 10) || null;\n        if (majorVersion) {\n          versionCache.put(options.url, majorVersion, 600000);\n        }\n        return majorVersion;\n      }\n      return null;\n    },\n    (error: any) => {\n      return null;\n    }\n  );\n}\n","import { SelectableValue } from '@grafana/data';\nimport { InstanaOptions } from '../types/instana_options';\nimport Cache from '../cache';\nimport _ from 'lodash';\nimport TimeFilter from '../types/time_filter';\nimport { getTimeKey, getWindowSize, hoursToMs, atLeastGranularity } from '../util/time_util';\nimport { getRequest, postRequest } from '../util/request_handler';\nimport { getDefaultChartGranularity } from '../util/rollup_granularity_util';\nimport { InstanaQuery } from '../types/instana_query';\nimport { createTagFilter, readItemMetrics } from '../util/analyze_util';\nimport { emptyResultData } from '../util/target_util';\nimport { ALL_APPLICATIONS, PAGINATION_LIMIT } from '../GlobalVariables';\nimport defaultApplicationMetricCatalog from '../lists/default_metric_catalog';\nimport { isInvalidQueryInterval } from '../util/queryInterval_check';\nimport getVersion from '../util/instana_version';\n\nexport class DataSourceApplication {\n  instanaOptions: InstanaOptions;\n  applicationsCache: Cache<Promise<SelectableValue[]>>;\n  miscCache: Cache<any>;\n\n  constructor(options: InstanaOptions) {\n    this.instanaOptions = options;\n    this.applicationsCache = new Cache<Promise<SelectableValue[]>>();\n    this.miscCache = new Cache<any>();\n  }\n\n  runQuery(target: InstanaQuery, timeFilter: TimeFilter): any {\n    // do not try to execute to big queries\n    if (isInvalidQueryInterval(timeFilter.windowSize, hoursToMs(this.instanaOptions.queryinterval_limit_app_calls))) {\n      throw new Error(\n        'Limit for maximum selectable windowsize exceeded, max is: ' +\n          this.instanaOptions.queryinterval_limit_app_calls +\n          ' hours'\n      );\n    }\n\n    // avoid invalid calls\n    if (!target || !target.metric || !target.metric.key || !target.group || !target.group.key) {\n      return Promise.resolve(emptyResultData(target.refId));\n    }\n\n    return this.fetchAnalyzeMetricsForApplication(target, timeFilter).then((response) => {\n      target.showWarningCantShowAllResults = response.data.canLoadMore;\n      return readItemMetrics(target, response, this.buildAnalyzeApplicationLabel);\n    });\n  }\n\n  getApplications(timeFilter: TimeFilter) {\n    const key = getTimeKey(timeFilter);\n\n    let applications = this.applicationsCache.get(key);\n    if (applications) {\n      return applications;\n    }\n\n    const windowSize = getWindowSize(timeFilter);\n    let page = 1;\n    let pageSize = 200;\n\n    applications = this.paginateApplications([], windowSize, timeFilter.to, page, pageSize, PAGINATION_LIMIT).then(\n      (response: any) => {\n        let allResults = _.flattenDeep(\n          _.map(response, (pageSet) => {\n            return pageSet.items;\n          })\n        );\n\n        return _.orderBy(\n          _.compact(allResults).map((entry) => {\n            return {\n              key: entry.id,\n              label: entry.label,\n              boundaryScope: entry.boundaryScope,\n            };\n          }),\n          [(application) => application.label.toLowerCase()],\n          ['asc']\n        );\n      }\n    );\n\n    this.applicationsCache.put(key, applications, 600000);\n    return applications;\n  }\n\n  paginateApplications(\n    results: any,\n    windowSize: number,\n    to: number,\n    page: number,\n    pageSize: number,\n    pageLimit: number\n  ) {\n    if (page > pageLimit) {\n      return results;\n    }\n\n    let queryParameters = 'windowSize=' + windowSize + '&to=' + to + '&page=' + page + '&pageSize=' + pageSize;\n\n    return getRequest(this.instanaOptions, '/api/application-monitoring/applications?' + queryParameters).then(\n      (response: any) => {\n        results.push(response.data);\n        if (page * pageSize < response.data.totalHits) {\n          page++;\n          return this.paginateApplications(results, windowSize, to, page, pageSize, pageLimit);\n        } else {\n          return results;\n        }\n      }\n    );\n  }\n\n  getApplicationTags(timeFilter: TimeFilter) {\n    let applicationTags = this.miscCache.get('applicationTags');\n    if (applicationTags) {\n      return applicationTags;\n    }\n\n    return getVersion(this.instanaOptions).then((version: number) => {\n      if (version >= 191) {\n        applicationTags = this.getCatalog(timeFilter).then((catalog: any) =>\n          this.mapCatalogResponse(catalog.data.tags)\n        );\n      } else {\n        applicationTags = this.getCatalogFromDeprecatedEndpoint().then((tagsResponse: any) =>\n          this.mapCatalogResponse(tagsResponse.data)\n        );\n      }\n\n      this.miscCache.put('applicationTags', applicationTags);\n      return applicationTags;\n    });\n  }\n\n  getCatalog(timeFilter: TimeFilter) {\n    const endpoint = '/api/application-monitoring/catalog?dataSource=CALLS&useCase=FILTERING&from=' + timeFilter.from;\n    return getRequest(this.instanaOptions, endpoint);\n  }\n\n  getCatalogFromDeprecatedEndpoint() {\n    return getRequest(this.instanaOptions, '/api/application-monitoring/catalog/tags');\n  }\n\n  mapCatalogResponse(catalog: any) {\n    return catalog.map((entry: any) => ({\n      key: entry.name,\n      label: entry.name,\n      type: entry.type,\n      canApplyToSource: entry.canApplyToSource,\n      canApplyToDestination: entry.canApplyToDestination,\n    }));\n  }\n\n  getApplicationMetricsCatalog() {\n    return defaultApplicationMetricCatalog;\n  }\n\n  fetchAnalyzeMetricsForApplication(target: InstanaQuery, timeFilter: TimeFilter) {\n    const windowSize = getWindowSize(timeFilter);\n    let tagFilters: any[] = [];\n\n    return Promise.resolve(this.getApplicationTags(timeFilter)).then((applicationTags) => {\n      if (target.entity.key) {\n        tagFilters.push({\n          name: 'application.name',\n          operator: 'EQUALS',\n          value: target.entity.label!,\n          entity: target.applicationCallToEntity ? target.applicationCallToEntity : 'DESTINATION',\n        });\n      }\n\n      _.forEach(target.filters, (filter) => {\n        if (filter.isValid) {\n          let tagFilter: any = createTagFilter(filter);\n          const tag = _.find(applicationTags, ['key', filter.tag.key]);\n          if (tag.canApplyToDestination || tag.canApplyToSource) {\n            tagFilter['entity'] = this.getTagEntity(filter.entity, tag);\n          }\n          tagFilters.push(tagFilter);\n        }\n      });\n\n      if (!target.timeInterval) {\n        target.timeInterval = getDefaultChartGranularity(windowSize);\n      }\n      const metric: any = {\n        metric: target.metric.key,\n        aggregation: target.aggregation && target.aggregation.key ? target.aggregation.key : 'SUM',\n        granularity: target.timeInterval.key,\n      };\n\n      const group: any = {\n        groupbyTag: target.group.key,\n      };\n      const tag: any = _.find(applicationTags, ['key', target.group.key]);\n      if (tag.canApplyToDestination || tag.canApplyToSource) {\n        group['groupbyTagEntity'] = target.callToEntity;\n      }\n      if (target.group.type === 'KEY_VALUE_PAIR' && target.groupbyTagSecondLevelKey) {\n        group['groupbyTagSecondLevelKey'] = target.groupbyTagSecondLevelKey;\n      }\n\n      let includeSynthetic = false;\n      target.filters.map((filter) => {\n        if (filter.tag.key === 'call.is_synthetic') {\n          includeSynthetic = filter.booleanValue;\n        }\n      });\n\n      const data: any = {\n        group: group,\n        timeFrame: {\n          to: timeFilter.to,\n          windowSize: atLeastGranularity(windowSize, metric.granularity),\n        },\n        metrics: [metric],\n        includeSynthetic,\n        tagFilterExpression: {\n          type: 'EXPRESSION',\n          logicalOperator: 'AND',\n          elements: tagFilters,\n        },\n      };\n\n      return postRequest(\n        this.instanaOptions,\n        '/api/application-monitoring/analyze/call-groups?fillTimeSeries=true',\n        data,\n        false,\n        5\n      );\n    });\n  }\n\n  getTagEntity(selectedEntity: string, tag: any): string {\n    if (selectedEntity === 'DESTINATION' && tag.canApplyToDestination) {\n      return 'DESTINATION';\n    }\n    if (selectedEntity === 'SOURCE' && tag.canApplyToSource) {\n      return 'SOURCE';\n    }\n    return tag.canApplyToDestination ? 'DESTINATION' : 'SOURCE';\n  }\n\n  fetchApplicationMetrics(target: InstanaQuery, timeFilter: TimeFilter) {\n    // avoid invalid calls\n    if (!target || !target.metric || !target.metric.key) {\n      return Promise.resolve(emptyResultData(target.refId));\n    }\n\n    const windowSize = getWindowSize(timeFilter);\n    if (!target.timeInterval) {\n      target.timeInterval = getDefaultChartGranularity(windowSize);\n    }\n    const metric: any = {\n      metric: target.metric.key,\n      aggregation: target.aggregation && target.aggregation.key ? target.aggregation.key : 'SUM',\n      granularity: target.timeInterval.key,\n    };\n\n    const data: any = {\n      timeFrame: {\n        to: timeFilter.to,\n        windowSize: atLeastGranularity(windowSize, metric.granularity),\n      },\n      metrics: [metric],\n    };\n\n    if (target.entity.key !== null) {\n      data['applicationId'] = target.entity.key;\n      data['applicationBoundaryScope'] = target.applicationBoundaryScope;\n    }\n\n    return postRequest(\n      this.instanaOptions,\n      '/api/application-monitoring/metrics/applications?fillTimeSeries=true',\n      data\n    );\n  }\n\n  buildAnalyzeApplicationLabel(target: InstanaQuery, item: any, key: string, index: number): string {\n    if (target.labelFormat) {\n      let label = target.labelFormat;\n      label = _.replace(label, '$label', item.name);\n      label = _.replace(label, '$application', target.entity.label!);\n      label = _.replace(label, '$metric', target.metric.label!);\n      label = _.replace(label, '$key', key);\n      label = _.replace(label, '$index', '' + index + 1);\n      label = _.replace(label, '$timeShift', target.timeShift);\n      return label;\n    }\n\n    if (target.entity.label === ALL_APPLICATIONS) {\n      return target.timeShift ? item.name + ' - ' + key + ' - ' + target.timeShift : item.name + ' - ' + key;\n    }\n\n    return target.timeShift && target.timeShiftIsValid\n      ? item.name + ' (' + target.entity.label + ')' + ' - ' + key + ' - ' + target.timeShift\n      : item.name + ' (' + target.entity.label + ')' + ' - ' + key;\n  }\n\n  buildApplicationMetricLabel(target: InstanaQuery, item: any, key: string, index: number): string {\n    if (target.labelFormat) {\n      let label = target.labelFormat;\n      label = _.replace(label, '$label', item.application.label);\n      label = _.replace(label, '$application', target.entity.label!);\n      label = _.replace(label, '$metric', target.metric.label!);\n      label = _.replace(label, '$key', key);\n      label = _.replace(label, '$index', '' + index + 1);\n      label = _.replace(label, '$timeShift', target.timeShift);\n      return label;\n    }\n\n    if (target.entity.label === ALL_APPLICATIONS) {\n      return target.timeShift\n        ? item.application.label + ' - ' + key + ' - ' + target.timeShift\n        : item.application.label + ' - ' + key;\n    }\n\n    return target.timeShift && target.timeShiftIsValid\n      ? item.application.label + ' (' + target.entity.label + ')' + ' - ' + key + ' - ' + target.timeShift\n      : item.application.label + ' (' + target.entity.label + ')' + ' - ' + key;\n  }\n}\n","import { SelectableValue } from '@grafana/data';\nimport { InstanaOptions } from '../types/instana_options';\nimport Cache from '../cache';\nimport _ from 'lodash';\nimport TimeFilter from '../types/time_filter';\nimport { getTimeKey, getWindowSize, atLeastGranularity } from '../util/time_util';\nimport { getRequest, postRequest } from '../util/request_handler';\nimport { InstanaQuery } from '../types/instana_query';\nimport { ALL_ENDPOINTS, PAGINATION_LIMIT } from '../GlobalVariables';\nimport { emptyResultData } from '../util/target_util';\nimport { getDefaultChartGranularity } from '../util/rollup_granularity_util';\n\nexport class DataSourceEndpoint {\n  instanaOptions: InstanaOptions;\n  endpointsCache: Cache<Promise<SelectableValue[]>>;\n\n  constructor(options: InstanaOptions) {\n    this.instanaOptions = options;\n    this.endpointsCache = new Cache<Promise<SelectableValue[]>>();\n  }\n\n  getEndpointsOfService(target: InstanaQuery, timeFilter: TimeFilter) {\n    let applicationId = '';\n    if (target.entity && target.entity.key) {\n      applicationId = target.entity.key;\n    }\n\n    let serviceId = '';\n    if (target.service) {\n      serviceId = target.service.key;\n    }\n\n    const key = getTimeKey(timeFilter) + applicationId + serviceId + target.applicationBoundaryScope;\n    let endpoints = this.endpointsCache.get(key);\n    if (endpoints) {\n      return endpoints;\n    }\n\n    const windowSize = getWindowSize(timeFilter);\n    let page = 1;\n    let pageSize = 200;\n\n    endpoints = this.paginateEndpoints(\n      [],\n      applicationId,\n      serviceId,\n      windowSize,\n      target.applicationBoundaryScope,\n      timeFilter.to,\n      page,\n      pageSize,\n      PAGINATION_LIMIT\n    ).then((response: any) => {\n      let allResults = _.flattenDeep(\n        _.map(response, (pageSet) => {\n          return pageSet.items;\n        })\n      );\n\n      return _.orderBy(\n        _.compact(allResults).map((entry) => {\n          return {\n            key: entry.id,\n            label: entry.label,\n          };\n        }),\n        [(endpoint) => endpoint.label.toLowerCase()],\n        ['asc']\n      );\n    });\n\n    this.endpointsCache.put(key, endpoints, 600000);\n    return endpoints;\n  }\n\n  paginateEndpoints(\n    results: any,\n    applicationId: string,\n    serviceId: string,\n    windowSize: number,\n    applicationBoundaryScope: string,\n    to: number,\n    page: number,\n    pageSize: number,\n    pageLimit: number\n  ) {\n    if (page > pageLimit) {\n      return results;\n    }\n\n    let queryParameters = 'windowSize=' + windowSize + '&to=' + to + '&page=' + page + '&pageSize=' + pageSize;\n    if (applicationBoundaryScope === 'ALL' || applicationBoundaryScope === 'INBOUND') {\n      queryParameters += '&applicationBoundaryScope=' + applicationBoundaryScope;\n    }\n\n    let url =\n      '/api/application-monitoring/applications;id=' +\n      (applicationId ? applicationId : '') +\n      '/services;id=' +\n      (serviceId ? serviceId : '') +\n      '/endpoints?' +\n      queryParameters;\n\n    return getRequest(this.instanaOptions, url).then((response: any) => {\n      results.push(response.data);\n      if (page * pageSize < response.data.totalHits) {\n        page++;\n        return this.paginateEndpoints(\n          results,\n          applicationId,\n          serviceId,\n          windowSize,\n          applicationBoundaryScope,\n          to,\n          page,\n          pageSize,\n          pageLimit\n        );\n      } else {\n        return results;\n      }\n    });\n  }\n\n  fetchEndpointMetrics(target: InstanaQuery, timeFilter: TimeFilter) {\n    // avoid invalid calls\n    if (!target || !target.metric || !target.metric.key) {\n      return Promise.resolve(emptyResultData(target.refId));\n    }\n\n    const windowSize = getWindowSize(timeFilter);\n    if (!target.timeInterval) {\n      target.timeInterval = getDefaultChartGranularity(windowSize);\n    }\n    const metric: any = {\n      metric: target.metric.key,\n      aggregation: target.aggregation && target.aggregation.key ? target.aggregation.key : 'SUM',\n      granularity: target.timeInterval.key,\n    };\n\n    const data: any = {\n      endpointId: target.endpoint.key,\n      timeFrame: {\n        to: timeFilter.to,\n        windowSize: atLeastGranularity(windowSize, metric.granularity),\n      },\n      metrics: [metric],\n    };\n\n    if (target.entity && target.entity.key) {\n      data['applicationId'] = target.entity.key;\n      // only set applicationBoundaryScope when an application is selected\n      data['applicationBoundaryScope'] = target.applicationBoundaryScope;\n    }\n\n    if (target.service && target.service.key) {\n      data['serviceId'] = target.service.key;\n    }\n\n    return postRequest(this.instanaOptions, '/api/application-monitoring/metrics/endpoints?fillTimeSeries=true', data);\n  }\n\n  buildEndpointMetricLabel(target: InstanaQuery, item: any, key: string, index: number): string {\n    if (target.labelFormat) {\n      let label = target.labelFormat;\n      label = _.replace(label, '$label', item.endpoint.label);\n      label = _.replace(label, '$endpoint', target.endpoint.label!);\n      label = _.replace(label, '$service', target.service.label!);\n      label = _.replace(label, '$application', target.entity.label!);\n      label = _.replace(label, '$metric', target.metric.label!);\n      label = _.replace(label, '$key', key);\n      label = _.replace(label, '$index', '' + index + 1);\n      label = _.replace(label, '$timeShift', target.timeShift);\n      return label;\n    }\n\n    if (target.endpoint.label === ALL_ENDPOINTS) {\n      return target.timeShift\n        ? item.endpoint.label + ' - ' + key + ' - ' + target.timeShift\n        : item.endpoint.label + ' - ' + key;\n    }\n\n    return target.timeShift && target.timeShiftIsValid\n      ? item.endpoint.label + ' (' + target.endpoint.label + ')' + ' - ' + key + ' - ' + target.timeShift\n      : item.endpoint.label + ' (' + target.endpoint.label + ')' + ' - ' + key;\n  }\n}\n","export default [\n  {\n    key: 'cpu.used', // metric.key\n    value: 'cpu.count', // value of the metric found in GET /snapshots/{snapshotId}\n    label: 'cpu.max', // label that shall be shown as target in graph\n  },\n  {\n    key: 'memory.used',\n    value: 'memory.total',\n    label: 'memory.max',\n  },\n  {\n    key: 'openFiles.used',\n    value: 'openFiles.max',\n    label: 'openFiles.max',\n  },\n];\n","import { CUSTOM_METRICS, INFRASTRUCTURE_ANALYZE, SEPARATOR } from '../GlobalVariables';\nimport { atLeastGranularity, getTimeKey, getWindowSize, hoursToMs } from '../util/time_util';\nimport { getRequest, postRequest } from '../util/request_handler';\nimport Cache from '../cache';\nimport { InstanaOptions } from '../types/instana_options';\nimport { InstanaQuery } from '../types/instana_query';\nimport { SelectableValue } from '@grafana/data';\nimport TimeFilter from '../types/time_filter';\nimport _ from 'lodash';\nimport { emptyResultData } from '../util/target_util';\nimport { getDefaultChartGranularity, getDefaultMetricRollupDuration } from '../util/rollup_granularity_util';\nimport { isInvalidQueryInterval } from '../util/queryInterval_check';\nimport max_metrics from '../lists/max_metrics';\n\nexport class DataSourceInfrastructure {\n  instanaOptions: InstanaOptions;\n  snapshotCache: Cache<Promise<SelectableValue[]>>;\n  snapshotInfoCache: Cache<Promise<SelectableValue[]>>;\n  catalogCache: Cache<Promise<SelectableValue[]>>;\n  typeCache: Cache<Promise<SelectableValue[]>>;\n  timeToLiveSnapshotInfoCache = 4000000; // set to 1,11 hour\n  miscCache: Cache<any>;\n\n  constructor(options: InstanaOptions) {\n    this.instanaOptions = options;\n    this.snapshotCache = new Cache<Promise<SelectableValue[]>>();\n    this.snapshotInfoCache = new Cache<Promise<SelectableValue[]>>();\n    this.catalogCache = new Cache<Promise<SelectableValue[]>>();\n    this.typeCache = new Cache<Promise<SelectableValue[]>>();\n    this.miscCache = new Cache<any>();\n  }\n\n  runQuery(target: InstanaQuery, timeFilter: TimeFilter) {\n    // do not try to execute to big queries\n    if (isInvalidQueryInterval(timeFilter.windowSize, hoursToMs(this.instanaOptions.queryinterval_limit_infra))) {\n      throw new Error(\n        'Limit for maximum selectable windowsize exceeded, max is: ' +\n          this.instanaOptions.queryinterval_limit_infra +\n          ' hours'\n      );\n    }\n\n    if (\n      target.tagFilterExpression ||\n      (target.metricCategory.key === INFRASTRUCTURE_ANALYZE &&\n        target.metric.key &&\n        target.group.key &&\n        target.entity.key)\n    ) {\n      return this.fetchAnalyzeEntities(target, timeFilter);\n    }\n\n    // do not try to retrieve data without selected metric\n    if ((!target.metric || !target.metric.key) && !target.showAllMetrics && !target.freeTextMetrics) {\n      return Promise.resolve(emptyResultData(target.refId));\n    }\n\n    // for every target, fetch snapshots in the selected timeframe that satisfy the lucene query.\n    return this.fetchSnapshotsForTarget(target, timeFilter).then((snapshots) => {\n      if (target.showAllMetrics) {\n        // only available for custom metrics\n        return this.fetchMultipleMetricsForSnapshots(target, snapshots, timeFilter, target.allMetrics);\n      } else if (target.freeTextMetrics) {\n        // only available for custom metrics\n        const metrics = this.extractMetricsFromText(target.freeTextMetrics);\n        return this.fetchMultipleMetricsForSnapshots(target, snapshots, timeFilter, metrics);\n      } else {\n        return this.fetchMetricsForSnapshots(target, snapshots, timeFilter, target.metric);\n      }\n    });\n  }\n\n  extractMetricsFromText(freeText: string): string[] {\n    const metricsString = freeText.replace(/\\s/g, '').split(',');\n    let metrics: string[] = [];\n    _.each(metricsString, (metricString) => metrics.push(JSON.parse('{ \"key\": \"' + metricString + '\"}')));\n\n    if (metrics.length > 4) {\n      metrics = metrics.slice(0, 4); // API supports up to 4 metrics at once\n    }\n\n    return metrics;\n  }\n\n  fetchMultipleMetricsForSnapshots(target: InstanaQuery, snapshots: any, timeFilter: TimeFilter, metrics: any) {\n    const resultPromises: any = [];\n    _.forEach(metrics, (metric) => {\n      resultPromises.push(this.fetchMetricsForSnapshots(target, snapshots, timeFilter, metric));\n    });\n\n    return Promise.all(resultPromises).then((allResults) => {\n      const allMetrics: any = [];\n      allResults.forEach((result: any) => result.forEach((s: any) => allMetrics.push(s)));\n      return allMetrics;\n    });\n  }\n\n  fetchMetricsForSnapshots(target: InstanaQuery, snapshots: any, timeFilter: TimeFilter, metric: any) {\n    let maxValues: any = [];\n    let snapshotIds: string[] = [];\n    _.map(snapshots, (snapshot) => snapshotIds.push(snapshot.snapshotId));\n    // ...fetch the metric data for every snapshot in the results.\n    return this.fetchMetricsForSnapshot(target, snapshotIds.slice(0, 30), timeFilter, metric).then((response: any) => {\n      if (!response.data) {\n        return response;\n      }\n      let timeseries = this.readTimeSeries(response.data.items, target.aggregation, timeFilter);\n      // as we map two times we need to flatten the result\n      let results = _.flatten(\n        response.data.items.map((item: any, index: number) => {\n          return _.map(item.metrics, (value, key) => {\n            let result = {\n              target: item.label,\n              datapoints: _.map(value, (metric) => [metric[1], metric[0]]),\n              refId: target.refId,\n              key: target.stableHash,\n            };\n            if (target.displayMaxMetricValue) {\n              const maxValue = this.getMaxMetricValue(target.metric, snapshots);\n              maxValues.push(this.buildMaxMetricTarget(target, timeseries, maxValue, result.target));\n              result.datapoints = this.convertRelativeToAbsolute(result.datapoints, maxValue);\n            }\n            return result;\n          });\n        })\n      );\n      return results;\n    });\n  }\n\n  getMaxMetricValue(metric: any, snapshot: any): number {\n    const maxMetrics: any = max_metrics;\n    return snapshot.response.data.data[_.find(maxMetrics, (m: any) => m.key === metric.key).value];\n  }\n\n  buildMaxMetricTarget(target: any, timeseries: any, maxValue: any, resultLabel: any) {\n    let datapoints = _.map(timeseries, (series) => {\n      return [maxValue, series.timestamp];\n    });\n\n    let maxLabel = this.convertMetricNameToMaxLabel(target.metric);\n\n    return {\n      target: resultLabel + ' ' + maxLabel,\n      datapoints: datapoints,\n      refId: target.refId,\n      key: target.stableHash + maxLabel,\n    };\n  }\n\n  convertMetricNameToMaxLabel(metric: any): string {\n    const maxMetrics: any = max_metrics;\n    return _.find(maxMetrics, (m) => m.key === metric.key).label;\n  }\n\n  convertRelativeToAbsolute(datapoints: any, maxValue: any) {\n    return _.map(datapoints, (datapoint) => {\n      if (datapoint[0]) {\n        return [datapoint[0] * maxValue, datapoint[1]];\n      }\n      return [null, datapoint[1]];\n    });\n  }\n\n  getEntityTypes(): Promise<SelectableValue[]> {\n    let entityTypes = this.typeCache.get('entityTypes');\n    if (entityTypes) {\n      return entityTypes;\n    }\n\n    entityTypes = getRequest(this.instanaOptions, '/api/infrastructure-monitoring/catalog/plugins').then(\n      (typesResponse: any) => {\n        const result = typesResponse.data.map((entry: any) => ({\n          key: entry.plugin,\n          label: entry.label,\n        }));\n\n        result.push({\n          key: 'regionEntity',\n          label: 'Region',\n        });\n\n        return _.sortBy(result, 'label');\n      }\n    );\n\n    this.typeCache.put('entityTypes', entityTypes);\n\n    return entityTypes;\n  }\n\n  fetchTypesForTarget(query: InstanaQuery, timeFilter: TimeFilter): any {\n    const fetchSnapshotTypesUrl =\n      `/api/snapshots/types` +\n      `?q=${encodeURIComponent(query.entityQuery)}` +\n      `&from=${timeFilter.from}` +\n      `&to=${timeFilter.to}` +\n      (this.instanaOptions.showOffline ? `` : `&time=${timeFilter.to}`);\n    return getRequest(this.instanaOptions, fetchSnapshotTypesUrl);\n  }\n\n  fetchAvailableMetricsForEntityType(target: InstanaQuery, timeFilter: TimeFilter) {\n    const windowSize = getWindowSize(timeFilter);\n    target.timeInterval = getDefaultChartGranularity(windowSize);\n    const data = {\n      tagFilterExpression: {\n        type: 'EXPRESSION',\n        logicalOperator: 'AND',\n        elements: [],\n      },\n      timeFrame: {\n        to: timeFilter.to,\n        windowSize: atLeastGranularity(windowSize, target.timeInterval.key),\n      },\n      query: '',\n      type: target.entity.key,\n    };\n\n    let metricFortarget = postRequest(this.instanaOptions, '/api/infrastructure-monitoring/analyze/metrics', data).then(\n      (metricResponse: any) => {\n        let result: any[] = [];\n        metricResponse.data.metrics.map((metric: any) =>\n          result.push({\n            key: metric.id,\n            label: metric.label,\n            description: metric.description,\n            aggregations: [\n              { key: 'MAX', label: 'MAX' },\n              { key: 'MEAN', label: 'MEAN' },\n              { key: 'MIN', label: 'MIN' },\n              { key: 'P25', label: 'P25' },\n              { key: 'P50', label: 'P50' },\n              { key: 'P75', label: 'P75' },\n              { key: 'P90', label: 'P90' },\n              { key: 'P95', label: 'P95' },\n              { key: 'P98', label: 'P98' },\n              { key: 'P99', label: 'P99' },\n            ],\n          })\n        );\n\n        return _.sortBy(result, 'label');\n      }\n    );\n    return metricFortarget;\n  }\n\n  fetchAnalyzeEntities(target: InstanaQuery, timeFilter: TimeFilter) {\n    const windowSize = getWindowSize(timeFilter);\n    let tagFilters: any[] = [];\n\n    if (!target.timeInterval) {\n      target.timeInterval = getDefaultChartGranularity(windowSize);\n    }\n    if (target.timeInterval.key < 60000) {\n      target.timeInterval.key = 60000;\n    }\n    _.forEach(target.filters, (filter) => {\n      tagFilters.push(filter);\n    });\n    const metric: any = {\n      metric: target.metric.key,\n      aggregation: target.aggregation && target.aggregation.key ? target.aggregation.key : 'SUM',\n      granularity: target.timeInterval.key,\n    };\n    const payload = {\n      tagFilterExpression: {\n        elements: tagFilters,\n        type: 'EXPRESSION',\n        logicalOperator: 'AND',\n      },\n      pagination: {\n        retrievalSize: 200,\n      },\n      groupBy: [target.groupbyTagSecondLevelKey],\n      type: target.entity.key,\n      metrics: [metric],\n      timeFrame: {\n        to: timeFilter.to,\n        windowSize: atLeastGranularity(windowSize, metric.granularity),\n      },\n    };\n\n    return postRequest(this.instanaOptions, '/api/infrastructure-monitoring/analyze/entity-groups', payload).then(\n      (res: any) => {\n        let result: any = [];\n\n        if (!res.data && res.errors.length >= 1) {\n          throw new Error(res.errors[0].message || res.errors[0]);\n        }\n\n        res.data.items.forEach((entity: any) => {\n          for (var metric in entity.metrics) {\n            result.push({\n              target: entity.tags[target.groupbyTagSecondLevelKey] + ' - ' + metric,\n              datapoints: entity.metrics[metric]\n                ? entity.metrics[metric].map((datapoint: any) => [datapoint[1], datapoint[0]])\n                : [],\n              refId: target.refId,\n              key: target.stableHash,\n            });\n          }\n        });\n\n        return result;\n      }\n    );\n  }\n\n  getMetricsCatalog(plugin: SelectableValue, metricCategory: number): Promise<SelectableValue[]> {\n    const key = plugin.key + '|' + metricCategory;\n\n    let metrics = this.catalogCache.get(key);\n    if (metrics) {\n      return metrics;\n    }\n\n    const filter = metricCategory === CUSTOM_METRICS ? 'custom' : 'builtin';\n    metrics = getRequest(\n      this.instanaOptions,\n      `/api/infrastructure-monitoring/catalog/metrics/${plugin.key}?filter=${filter}`\n    ).then((catalogResponse: any) =>\n      catalogResponse.data.map((entry: any) => ({\n        key: entry.metricId,\n        label: entry.label,\n        description: entry.metricId,\n        aggregations: [\n          { key: 'MEAN', label: 'MEAN' },\n          { key: 'SUM', label: 'SUM' },\n        ],\n        entityType: entry.pluginId,\n      }))\n    );\n\n    this.catalogCache.put(key, metrics);\n\n    return metrics;\n  }\n\n  fetchSnapshotsForTarget(target: InstanaQuery, timeFilter: TimeFilter) {\n    const query = this.buildQuery(target);\n    const key = this.buildSnapshotCacheKey(query, timeFilter);\n\n    let snapshots = this.snapshotCache.get(key);\n    if (snapshots) {\n      return snapshots;\n    }\n\n    const fetchSnapshotContextsUrl =\n      `/api/infrastructure-monitoring/snapshots` +\n      `?plugin=${target.entityType.key}` +\n      '&size=100' +\n      `&q=${target.entityQuery}` +\n      `&from=${timeFilter.from}` +\n      `&to=${timeFilter.to}` +\n      (this.instanaOptions.showOffline ? `` : `&time=${timeFilter.to}`);\n\n    snapshots = getRequest(this.instanaOptions, fetchSnapshotContextsUrl)\n      .then((contextsResponse: any) => {\n        return Promise.all(\n          contextsResponse.data.items.map(({ snapshotId, host }: any) => {\n            let snapshotInfo = this.snapshotInfoCache.get(snapshotId);\n            if (snapshotInfo) {\n              return snapshotInfo;\n            }\n\n            const fetchSnapshotUrl =\n              `/api/infrastructure-monitoring/snapshots/${snapshotId}` +\n              (this.instanaOptions.showOffline\n                ? `?from=${timeFilter.from}&to=${timeFilter.to}`\n                : `?time=${timeFilter.to}`); // @see SnapshotApiResource#getSnapshot\n\n            snapshotInfo = getRequest(this.instanaOptions, fetchSnapshotUrl, true).then((snapshotResponse: any) => {\n              // check for undefined because the fetchSnapshotContexts is buggy\n              if (snapshotResponse !== undefined) {\n                return {\n                  snapshotId,\n                  host,\n                  response: this.reduceSnapshot(snapshotResponse),\n                };\n              }\n\n              return null;\n            });\n\n            this.snapshotInfoCache.put(snapshotId, snapshotInfo, this.timeToLiveSnapshotInfoCache);\n            return snapshotInfo;\n          })\n        );\n      })\n      .then((response: any) => {\n        // undefined items need to be removed, because the fetchSnapshotContexts is buggy in the backend, maybe can be removed in the future\n        return _.compact(response);\n      });\n\n    this.snapshotCache.put(key, snapshots);\n    return snapshots;\n  }\n\n  buildQuery(target: InstanaQuery): string {\n    // check for entity.pluginId or entity.selfType, because otherwise the backend has a problem with `AND entity.pluginId`\n    if (`${target.entityQuery}`.includes('entity.pluginId:') || `${target.entityQuery}`.includes('entity.selfType:')) {\n      return encodeURIComponent(`${target.entityQuery}`);\n    } else {\n      return encodeURIComponent(`${target.entityQuery} AND entity.pluginId:${target.entityType.key}`);\n    }\n  }\n\n  buildSnapshotCacheKey(query: string, timeFilter: TimeFilter): string {\n    return query + SEPARATOR + getTimeKey(timeFilter);\n  }\n\n  reduceSnapshot(snapshotResponse: any) {\n    // reduce data to used label formatting values\n    snapshotResponse.data = _.pick(snapshotResponse.data, ['id', 'label', 'plugin', 'data']);\n    return snapshotResponse;\n  }\n\n  readTimeSeries(values: any, aggregation: SelectableValue, timeFilter: TimeFilter) {\n    if (aggregation && aggregation.key === 'SUM') {\n      return this.correctMeanToSum(values, timeFilter);\n    }\n    return values;\n  }\n\n  correctMeanToSum(values: any, timeFilter: TimeFilter) {\n    const secondMultiplier = parseInt(getDefaultMetricRollupDuration(timeFilter).key, 10) / 1000;\n    return _.map(values, (value) => {\n      return {\n        value: value.value ? value.value * secondMultiplier : null,\n        timestamp: value.timestamp,\n      };\n    });\n  }\n\n  fetchMetricsForSnapshot(target: InstanaQuery, snapshotIds: string[], timeFilter: TimeFilter, metric: any) {\n    const windowSize = getWindowSize(timeFilter);\n    target.timeInterval = getDefaultChartGranularity(windowSize);\n    const data = {\n      metrics: [metric.key],\n      query: target.entityQuery,\n      plugin: target.entityType.key,\n      rollup: target.timeInterval.key,\n      snapshotIds,\n      timeFrame: {\n        to: timeFilter.to,\n        windowSize: atLeastGranularity(windowSize, target.timeInterval.key),\n      },\n    };\n    return postRequest(this.instanaOptions, '/api/infrastructure-monitoring/metrics', data);\n  }\n\n  getHostSuffix(host: string): string {\n    if (host) {\n      return ' (on host \"' + host + '\")';\n    }\n    return '';\n  }\n\n  buildLabel(snapshotResponse: any, host: any, target: InstanaQuery, index: any, metric: any): string {\n    if (target.labelFormat) {\n      let label = target.labelFormat;\n      label = _.replace(label, '$label', snapshotResponse.label);\n      label = _.replace(label, '$plugin', snapshotResponse.plugin); // not documented\n      label = _.replace(label, '$snapshot', snapshotResponse.snapshotId); // not documented\n      label = _.replace(label, '$host', host ? host : 'unknown');\n      label = _.replace(label, '$pid', _.get(snapshotResponse, ['data', 'pid'], ''));\n      label = _.replace(label, '$type', _.get(snapshotResponse, ['data', 'type'], ''));\n      label = _.replace(label, '$name', _.get(snapshotResponse, ['data', 'name'], ''));\n      label = _.replace(label, '$service', _.get(snapshotResponse, ['data', 'service_name'], ''));\n      if (target.freeTextMetrics) {\n        label = _.replace(label, '$metric', metric.key);\n      } else {\n        label = _.replace(label, '$metric', _.get(target, ['metric', 'key'], 'n/a'));\n      }\n      label = _.replace(label, '$index', index + 1);\n      label = _.replace(label, '$timeShift', target.timeShift);\n      return label;\n    }\n    return target.timeShift && target.timeShiftIsValid\n      ? snapshotResponse.label + this.getHostSuffix(host) + ' - ' + target.timeShift\n      : snapshotResponse.label + this.getHostSuffix(host);\n  }\n}\n","import { atLeastGranularity, getTimeKey, getWindowSize, hoursToMs } from '../util/time_util';\nimport { createTagFilter, readItemMetrics } from '../util/analyze_util';\nimport { getRequest, postRequest } from '../util/request_handler';\n\nimport BeaconGroupBody from '../types/beacon_group_body';\nimport Cache from '../cache';\nimport { InstanaOptions } from '../types/instana_options';\nimport { InstanaQuery } from '../types/instana_query';\nimport { SelectableValue } from '@grafana/data';\nimport TimeFilter from '../types/time_filter';\nimport _ from 'lodash';\nimport { emptyResultData } from '../util/target_util';\nimport { getDefaultChartGranularity } from '../util/rollup_granularity_util';\nimport { isInvalidQueryInterval } from '../util/queryInterval_check';\n\nexport class DataSourceMobileApp {\n  instanaOptions: InstanaOptions;\n  MobileAppCache: Cache<Promise<SelectableValue[]>>;\n  miscCache: Cache<any>;\n\n  constructor(options: InstanaOptions) {\n    this.instanaOptions = options;\n    this.MobileAppCache = new Cache<Promise<SelectableValue[]>>();\n    this.miscCache = new Cache<any>();\n  }\n\n  runQuery(target: InstanaQuery, timeFilter: TimeFilter) {\n    if (\n      isInvalidQueryInterval(\n        timeFilter.windowSize,\n        hoursToMs(this.instanaOptions.queryinterval_limit_mobileapp_metrics)\n      )\n    ) {\n      throw new Error(\n        'Limit for maximum selectable windowsize exceeded, max is: ' +\n          this.instanaOptions.queryinterval_limit_mobileapp_metrics +\n          ' hours'\n      );\n    }\n\n    // avoid invalid calls\n    if (\n      !target ||\n      !target.metric ||\n      !target.metric.key ||\n      !target.group ||\n      !target.group.key ||\n      !target.entity ||\n      !target.entity.key\n    ) {\n      return Promise.resolve(emptyResultData(target.refId));\n    }\n\n    return this.fetchAnalyzeMetricsForMobileapp(target, timeFilter).then((response: any) => {\n      return readItemMetrics(target, response, this.buildAnalyzeMobileAppLabel);\n    });\n  }\n\n  getMobileapp(timeFilter: TimeFilter) {\n    const key = getTimeKey(timeFilter);\n    let mobileapps = this.MobileAppCache.get(key);\n    if (mobileapps) {\n      return mobileapps;\n    }\n\n    mobileapps = getRequest(this.instanaOptions, '/api/mobile-app-monitoring/config').then((mobileappsResponse: any) =>\n      mobileappsResponse.data.map((mobile: any) => ({\n        key: mobile.name, // use name as key because a mobileapp name can only be configured once\n        label: mobile.name,\n      }))\n    );\n    this.MobileAppCache.put(key, mobileapps, 600000);\n\n    return mobileapps;\n  }\n\n  getMobileappTags() {\n    let mobileappTags = this.miscCache.get('mobileappTags');\n    if (mobileappTags) {\n      return mobileappTags;\n    }\n\n    mobileappTags = getRequest(this.instanaOptions, '/api/mobile-app-monitoring/catalog/tags').then(\n      (tagsResponse: any) =>\n        tagsResponse.data.map((entry: any) => ({\n          key: entry.name,\n          label: entry.name,\n          type: entry.type,\n        }))\n    );\n    this.miscCache.put('mobileappTags', mobileappTags);\n\n    return mobileappTags;\n  }\n\n  getMobileappMetricsCatalog() {\n    let mobileappCatalog = this.miscCache.get('mobileappCatalog');\n    if (mobileappCatalog) {\n      return mobileappCatalog;\n    }\n\n    mobileappCatalog = getRequest(this.instanaOptions, '/api/mobile-app-monitoring/catalog/metrics').then(\n      (catalogResponse: any) =>\n        catalogResponse.data.map((entry: any) => {\n          return {\n            key: entry.metricId,\n            label: entry.label,\n            aggregations: entry.aggregations ? this.transformAggregations(entry.aggregations.sort()) : [],\n            beaconTypes: entry.beaconTypes\n              ? this.transformBeaconTypes(entry.beaconTypes)\n              : ['sessionStart', 'crash', 'httpRequest', 'custom', 'viewChange'],\n          };\n        })\n    );\n    this.miscCache.put('mobileappCatalog', mobileappCatalog);\n\n    return mobileappCatalog;\n  }\n\n  transformBeaconTypes(beaconTypes: string[]) {\n    if (beaconTypes.includes('sessionStart')) {\n      let result = _.remove(beaconTypes, (type) => type !== 'sessionStart');\n      result.push('session_start');\n      return result;\n    }\n\n    if (beaconTypes.includes('httpRequest')) {\n      let result = _.remove(beaconTypes, (type) => type !== 'httpRequest');\n      result.push('http_request');\n      return result;\n    }\n\n    if (beaconTypes.includes('viewChange')) {\n      let result = _.remove(beaconTypes, (type) => type !== 'viewChange');\n      result.push('view_change');\n      return result;\n    }\n\n    return beaconTypes;\n  }\n\n  transformAggregations(aggregations: string[]) {\n    return _.map(aggregations, (a) => {\n      return {\n        key: a,\n        label: a,\n      };\n    });\n  }\n\n  private fetchAnalyzeMetricsForMobileapp(target: InstanaQuery, timeFilter: TimeFilter) {\n    const windowSize = getWindowSize(timeFilter);\n    const tagFilters = [\n      {\n        name: 'mobileBeacon.mobileApp.name',\n        operator: 'EQUALS',\n        value: target.entity.key,\n      },\n    ];\n\n    _.forEach(target.filters, (filter) => {\n      if (filter.isValid) {\n        tagFilters.push(createTagFilter(filter));\n      }\n    });\n\n    if (!target.timeInterval) {\n      target.timeInterval = getDefaultChartGranularity(windowSize);\n    }\n    const metric: any = {\n      metric: target.metric.key,\n      aggregation: target.aggregation.key ? target.aggregation.key : 'SUM',\n      granularity: target.timeInterval.key,\n    };\n\n    const group: any = {\n      groupbyTag: target.group.key,\n    };\n    if (target.group.type === 'KEY_VALUE_PAIR' && target.groupbyTagSecondLevelKey) {\n      group['groupbyTagSecondLevelKey'] = target.groupbyTagSecondLevelKey;\n    }\n\n    const data: BeaconGroupBody = {\n      group: group,\n      timeFrame: {\n        to: timeFilter.to,\n        windowSize: atLeastGranularity(windowSize, metric.granularity),\n      },\n      tagFilters: tagFilters,\n      type: target.entityType.key,\n      metrics: [metric],\n    };\n    return postRequest(\n      this.instanaOptions,\n      '/api/mobile-app-monitoring/analyze/beacon-groups?fillTimeSeries=true',\n      data,\n      false,\n      5\n    );\n  }\n\n  buildAnalyzeMobileAppLabel(target: InstanaQuery, item: any, key: string, index: number): string {\n    if (target.labelFormat) {\n      let label = target.labelFormat;\n      label = _.replace(label, '$label', item.name);\n      label = _.replace(label, '$mobileapp', target.entity.label!);\n      label = _.replace(label, '$type', target.entityType.label!);\n      label = _.replace(label, '$metric', target.metric.label!);\n      label = _.replace(label, '$key', key);\n      label = _.replace(label, '$index', '' + index + 1);\n      label = _.replace(label, '$timeShift', target.timeShift);\n      return label;\n    }\n    return target.timeShift && target.timeShiftIsValid\n      ? item.name + ' (' + target.entity.label + ')' + ' - ' + key + ' - ' + target.timeShift\n      : item.name + ' (' + target.entity.label + ')' + ' - ' + key;\n  }\n}\n","import { SelectableValue } from '@grafana/data';\nimport { InstanaOptions } from '../types/instana_options';\nimport Cache from '../cache';\nimport _ from 'lodash';\nimport TimeFilter from '../types/time_filter';\nimport { getTimeKey, getWindowSize, atLeastGranularity } from '../util/time_util';\nimport { getRequest, postRequest } from '../util/request_handler';\nimport { getDefaultChartGranularity } from '../util/rollup_granularity_util';\nimport { InstanaQuery } from '../types/instana_query';\nimport { PAGINATION_LIMIT } from '../GlobalVariables';\nimport { emptyResultData } from '../util/target_util';\n\nexport class DataSourceService {\n  instanaOptions: InstanaOptions;\n  servicesCache: Cache<Promise<SelectableValue[]>>;\n\n  constructor(options: InstanaOptions) {\n    this.instanaOptions = options;\n    this.servicesCache = new Cache<Promise<SelectableValue[]>>();\n  }\n\n  getServicesOfApplication(target: InstanaQuery, timeFilter: TimeFilter) {\n    let applicationId = '';\n    if (target.entity && target.entity.key) {\n      applicationId = target.entity.key;\n    }\n\n    const key = getTimeKey(timeFilter) + applicationId + target.applicationBoundaryScope;\n    let services = this.servicesCache.get(key);\n    if (services) {\n      return services;\n    }\n\n    const windowSize = getWindowSize(timeFilter);\n    let page = 1;\n    let pageSize = 200;\n\n    services = this.paginateServices(\n      [],\n      applicationId,\n      windowSize,\n      timeFilter.to,\n      target.applicationBoundaryScope,\n      page,\n      pageSize,\n      PAGINATION_LIMIT\n    ).then((response: any) => {\n      let allResults = _.flattenDeep(\n        _.map(response, (pageSet) => {\n          return pageSet.items;\n        })\n      );\n\n      return _.orderBy(\n        _.compact(allResults).map((entry) => {\n          return {\n            key: entry.id,\n            label: entry.label,\n          };\n        }),\n        [(service) => service.label.toLowerCase()],\n        ['asc']\n      );\n    });\n\n    this.servicesCache.put(key, services, 600000);\n    return services;\n  }\n\n  paginateServices(\n    results: any,\n    applicationId: string,\n    windowSize: number,\n    to: number,\n    applicationBoundaryScope: string,\n    page: number,\n    pageSize: number,\n    pageLimit: number\n  ) {\n    if (page > pageLimit) {\n      return results;\n    }\n\n    let queryParameters = 'windowSize=' + windowSize + '&to=' + to + '&page=' + page + '&pageSize=' + pageSize;\n    if (applicationBoundaryScope === 'ALL' || applicationBoundaryScope === 'INBOUND') {\n      queryParameters += '&applicationBoundaryScope=' + applicationBoundaryScope;\n    }\n\n    let url =\n      '/api/application-monitoring/applications;id=' +\n      (applicationId ? applicationId : '') +\n      '/services?' +\n      queryParameters;\n\n    return getRequest(this.instanaOptions, url).then((response: any) => {\n      results.push(response.data);\n      if (page * pageSize < response.data.totalHits) {\n        page++;\n        return this.paginateServices(\n          results,\n          applicationId,\n          windowSize,\n          to,\n          applicationBoundaryScope,\n          page,\n          pageSize,\n          pageLimit\n        );\n      } else {\n        return results;\n      }\n    });\n  }\n\n  fetchServiceMetrics(target: InstanaQuery, timeFilter: TimeFilter) {\n    // avoid invalid calls\n    if (!target || !target.metric || !target.metric.key) {\n      return Promise.resolve(emptyResultData(target.refId));\n    }\n\n    const windowSize = getWindowSize(timeFilter);\n\n    if (!target.timeInterval) {\n      target.timeInterval = getDefaultChartGranularity(windowSize);\n    }\n\n    const metric = {\n      metric: target.metric.key,\n      aggregation: target.aggregation && target.aggregation.key ? target.aggregation.key : 'SUM',\n      granularity: target.timeInterval.key,\n    };\n\n    const data: any = {\n      timeFrame: {\n        to: timeFilter.to,\n        windowSize: atLeastGranularity(windowSize, metric.granularity),\n      },\n      metrics: [metric],\n    };\n\n    if (target.entity && target.entity.key) {\n      data['applicationId'] = target.entity.key;\n      // only set applicationBoundaryScope when an application is selected\n      data['applicationBoundaryScope'] = target.applicationBoundaryScope;\n    }\n\n    if (target.service && target.service.key) {\n      data['serviceId'] = target.service.key;\n    }\n\n    return postRequest(this.instanaOptions, '/api/application-monitoring/metrics/services?fillTimeSeries=true', data);\n  }\n\n  buildServiceMetricLabel(target: InstanaQuery, item: any, key: string, index: number): string {\n    if (target.labelFormat) {\n      let label = target.labelFormat;\n      label = _.replace(label, '$label', item.service.label);\n      label = _.replace(label, '$service', target.service.label!);\n      label = _.replace(label, '$application', target.entity.label!);\n      label = _.replace(label, '$metric', target.metric.label!);\n      label = _.replace(label, '$key', key);\n      label = _.replace(label, '$index', index + 1 + '');\n      label = _.replace(label, '$timeShift', target.timeShift);\n      return label;\n    }\n\n    if (target.service.key === null) {\n      return target.timeShift\n        ? item.service.label + ' - ' + key + ' - ' + target.timeShift\n        : item.service.label + ' - ' + key;\n    }\n\n    return target.timeShift && target.timeShiftIsValid\n      ? item.service.label + ' (' + target.service.label + ')' + ' - ' + key + ' - ' + target.timeShift\n      : item.service.label + ' (' + target.service.label + ')' + ' - ' + key;\n  }\n}\n","import { SelectableValue, TimeSeries, TimeSeriesPoints } from '@grafana/data';\nimport { buildTimeSeries, emptyResultData } from '../util/target_util';\nimport { InstanaOptions } from '../types/instana_options';\nimport { InstanaQuery } from '../types/instana_query';\nimport { getRequest } from '../util/request_handler';\nimport { getWindowSize } from '../util/time_util';\nimport TimeFilter from '../types/time_filter';\nimport Cache from '../cache';\nimport _ from 'lodash';\n\nexport class DataSourceSlo {\n  sliReportsCache: Cache<Promise<SelectableValue[]>>;\n  instanaOptions: InstanaOptions;\n\n  constructor(options: InstanaOptions) {\n    this.instanaOptions = options;\n    this.sliReportsCache = new Cache<Promise<SelectableValue[]>>();\n  }\n\n  getConfiguredSLIs(): Promise<SelectableValue[]> {\n    let sliReports = this.sliReportsCache.get('sliReports');\n    if (sliReports) {\n      return sliReports;\n    }\n\n    sliReports = getRequest(this.instanaOptions, '/api/settings/sli').then((response: any) =>\n      _.map(response.data, (r) => {\n        return {\n          key: r.id,\n          label: r.sliName,\n        };\n      })\n    );\n\n    this.sliReportsCache.put('sliReports', sliReports);\n    return sliReports;\n  }\n\n  runQuery(target: InstanaQuery, timeFilter: TimeFilter) {\n    //avoid involid calls\n    if (\n      !target ||\n      !target.sloReport ||\n      !target.sloReport.key ||\n      !target.sloSpecific ||\n      !target.sloSpecific.key ||\n      !target.sloValue\n    ) {\n      return Promise.resolve(emptyResultData(target.refId));\n    }\n\n    let endpoint =\n      '/api/sli/report/' +\n      target.sloReport.key +\n      '?from=' +\n      timeFilter.from +\n      '&to=' +\n      timeFilter.to +\n      '&slo=' +\n      target.sloValue;\n    return getRequest(this.instanaOptions, endpoint).then((response: any) => {\n      return this.extractSpecificValueFromSLI(target, response.data, timeFilter);\n    });\n  }\n\n  extractSpecificValueFromSLI(target: InstanaQuery, sliResult: any, timeFilter: TimeFilter) {\n    if (target.sloSpecific.key === 'SLI') {\n      return [\n        buildTimeSeries(target.sloSpecific.label!, target.refId, this.buildResultArray(sliResult.sli, timeFilter.to)),\n      ];\n    } else if (target.sloSpecific.key === 'Remaining Error Budget') {\n      return [\n        buildTimeSeries(\n          target.sloSpecific.label!,\n          target.refId,\n          this.buildResultArray(sliResult.errorBudgetRemaining, timeFilter.to)\n        ),\n      ];\n    } else if (target.sloSpecific.key === 'Timeseries') {\n      return this.buildViolationDistributionTimeSeries(target, sliResult.violationDistribution, timeFilter);\n    }\n\n    return [emptyResultData(target.refId)];\n  }\n\n  buildResultArray(result: number, timestamp: number): TimeSeriesPoints {\n    return [[result, timestamp]];\n  }\n\n  buildViolationDistributionTimeSeries(target: InstanaQuery, series: any, timeFilter: TimeFilter): TimeSeries[] {\n    const greens: any[] = [];\n    const reds: any[] = [];\n    const greys: any[] = [];\n\n    let granularity = getWindowSize(timeFilter) / Object.keys(series).length;\n    _.forEach(series, (value: number, index: number) => {\n      if (value === 1) {\n        greens.push([1, timeFilter.from + index * granularity]);\n      } else if (value === 0) {\n        greys.push([1, timeFilter.from + index * granularity]);\n      } else if (value === -1) {\n        reds.push([1, timeFilter.from + index * granularity]);\n      }\n    });\n\n    const result: TimeSeries[] = [];\n    result.push(buildTimeSeries('No violation', target.refId, greens));\n    result.push(buildTimeSeries('Violation', target.refId, reds));\n    result.push(buildTimeSeries('No data', target.refId, greys));\n\n    return result;\n  }\n}\n","import { SelectableValue } from '@grafana/data';\nimport { InstanaOptions } from '../types/instana_options';\nimport Cache from '../cache';\nimport _ from 'lodash';\nimport TimeFilter from '../types/time_filter';\nimport { getTimeKey, getWindowSize, hoursToMs, atLeastGranularity } from '../util/time_util';\nimport BeaconGroupBody from '../types/beacon_group_body';\nimport { getRequest, postRequest } from '../util/request_handler';\nimport { getDefaultChartGranularity } from '../util/rollup_granularity_util';\nimport { InstanaQuery } from '../types/instana_query';\nimport { createTagFilter, readItemMetrics } from '../util/analyze_util';\nimport { emptyResultData } from '../util/target_util';\nimport { isInvalidQueryInterval } from '../util/queryInterval_check';\n\nexport class DataSourceWebsite {\n  instanaOptions: InstanaOptions;\n  websitesCache: Cache<Promise<SelectableValue[]>>;\n  miscCache: Cache<any>;\n\n  constructor(options: InstanaOptions) {\n    this.instanaOptions = options;\n    this.websitesCache = new Cache<Promise<SelectableValue[]>>();\n    this.miscCache = new Cache<any>();\n  }\n\n  runQuery(target: InstanaQuery, timeFilter: TimeFilter) {\n    if (\n      isInvalidQueryInterval(timeFilter.windowSize, hoursToMs(this.instanaOptions.queryinterval_limit_website_metrics))\n    ) {\n      throw new Error(\n        'Limit for maximum selectable windowsize exceeded, max is: ' +\n          this.instanaOptions.queryinterval_limit_website_metrics +\n          ' hours'\n      );\n    }\n\n    // avoid invalid calls\n    if (\n      !target ||\n      !target.metric ||\n      !target.metric.key ||\n      !target.group ||\n      !target.group.key ||\n      !target.entity ||\n      !target.entity.key\n    ) {\n      return Promise.resolve(emptyResultData(target.refId));\n    }\n\n    return this.fetchAnalyzeMetricsForWebsite(target, timeFilter).then((response: any) => {\n      return readItemMetrics(target, response, this.buildAnalyzeWebsiteLabel);\n    });\n  }\n\n  getWebsites(timeFilter: TimeFilter) {\n    const key = getTimeKey(timeFilter);\n    let websites = this.websitesCache.get(key);\n    if (websites) {\n      return websites;\n    }\n\n    websites = getRequest(this.instanaOptions, '/api/website-monitoring/config').then((websitesResponse: any) =>\n      websitesResponse.data.map((website: any) => ({\n        key: website.name, // use name as key because a website name can only be configured once\n        label: website.name,\n      }))\n    );\n    this.websitesCache.put(key, websites, 600000);\n\n    return websites;\n  }\n\n  getWebsiteTags() {\n    let websiteTags = this.miscCache.get('websiteTags');\n    if (websiteTags) {\n      return websiteTags;\n    }\n\n    websiteTags = getRequest(this.instanaOptions, '/api/website-monitoring/catalog/tags').then((tagsResponse: any) =>\n      tagsResponse.data.map((entry: any) => ({\n        key: entry.name,\n        label: entry.name,\n        type: entry.type,\n      }))\n    );\n    this.miscCache.put('websiteTags', websiteTags);\n\n    return websiteTags;\n  }\n\n  getWebsiteMetricsCatalog() {\n    let websiteCatalog = this.miscCache.get('websiteCatalog');\n    if (websiteCatalog) {\n      return websiteCatalog;\n    }\n\n    websiteCatalog = getRequest(this.instanaOptions, '/api/website-monitoring/catalog/metrics').then(\n      (catalogResponse: any) =>\n        catalogResponse.data.map((entry: any) => {\n          return {\n            key: entry.metricId,\n            label: entry.label,\n            aggregations: entry.aggregations ? this.transformAggregations(entry.aggregations.sort()) : [],\n            beaconTypes: entry.beaconTypes\n              ? this.transformBeaconTypes(entry.beaconTypes)\n              : ['pageLoad', 'resourceLoad', 'httpRequest', 'error', 'custom', 'pageChange'],\n          };\n        })\n    );\n    this.miscCache.put('websiteCatalog', websiteCatalog);\n\n    return websiteCatalog;\n  }\n\n  transformBeaconTypes(beaconTypes: string[]) {\n    if (beaconTypes.includes('pageChange')) {\n      let result = _.remove(beaconTypes, (type) => type !== 'pageChange');\n      result.push('page_change');\n      return result;\n    }\n\n    return beaconTypes;\n  }\n\n  transformAggregations(aggregations: string[]) {\n    return _.map(aggregations, (a) => {\n      return {\n        key: a,\n        label: a,\n      };\n    });\n  }\n\n  private fetchAnalyzeMetricsForWebsite(target: InstanaQuery, timeFilter: TimeFilter) {\n    const windowSize = getWindowSize(timeFilter);\n    const tagFilters = [\n      {\n        name: 'beacon.website.name',\n        operator: 'EQUALS',\n        value: target.entity.key,\n      },\n    ];\n\n    _.forEach(target.filters, (filter) => {\n      if (filter.isValid) {\n        tagFilters.push(createTagFilter(filter));\n      }\n    });\n\n    if (!target.timeInterval) {\n      target.timeInterval = getDefaultChartGranularity(windowSize);\n    }\n    const metric: any = {\n      metric: target.metric.key,\n      aggregation: target.aggregation.key ? target.aggregation.key : 'SUM',\n      granularity: target.timeInterval.key,\n    };\n\n    const group: any = {\n      groupbyTag: target.group.key,\n    };\n    if (target.group.type === 'KEY_VALUE_PAIR' && target.groupbyTagSecondLevelKey) {\n      group['groupbyTagSecondLevelKey'] = target.groupbyTagSecondLevelKey;\n    }\n\n    const data: BeaconGroupBody = {\n      group: group,\n      timeFrame: {\n        to: timeFilter.to,\n        windowSize: atLeastGranularity(windowSize, metric.granularity),\n      },\n      tagFilters: tagFilters,\n      type: target.entityType.key,\n      metrics: [metric],\n    };\n    return postRequest(\n      this.instanaOptions,\n      '/api/website-monitoring/analyze/beacon-groups?fillTimeSeries=true',\n      data,\n      false,\n      5\n    );\n  }\n\n  buildAnalyzeWebsiteLabel(target: InstanaQuery, item: any, key: string, index: number): string {\n    if (target.labelFormat) {\n      let label = target.labelFormat;\n      label = _.replace(label, '$label', item.name);\n      label = _.replace(label, '$website', target.entity.label!);\n      label = _.replace(label, '$type', target.entityType.label!);\n      label = _.replace(label, '$metric', target.metric.label!);\n      label = _.replace(label, '$key', key);\n      label = _.replace(label, '$index', '' + index + 1);\n      label = _.replace(label, '$timeShift', target.timeShift);\n      return label;\n    }\n    return target.timeShift && target.timeShiftIsValid\n      ? item.name + ' (' + target.entity.label + ')' + ' - ' + key + ' - ' + target.timeShift\n      : item.name + ' (' + target.entity.label + ')' + ' - ' + key;\n  }\n}\n","/**\n * Do not remove the commented stuff.\n */\nexport default [\n  {\n    label: 'Infrastructure built-in metrics',\n    key: 0,\n  },\n  {\n    label: 'Infrastructure custom metrics',\n    key: 1,\n  },\n  {\n    label: 'Infrastructure Analyze',\n    key: 8,\n  },\n  {\n    // replaces Application metrics(4) & Service metrics(5) & Endpoint metrics(6)\n    label: 'Application/service/endpoint metrics',\n    key: 4,\n  },\n  {\n    label: 'Analyze application calls',\n    key: 2,\n  },\n  {\n    label: 'Analyze website',\n    key: 3,\n  },\n  {\n    label: 'Analyze mobile app',\n    key: 9,\n  },\n  {\n    label: 'SLO information',\n    key: 7,\n  },\n];\n","import _ from 'lodash';\nimport { InstanaQuery } from '../types/instana_query';\n\nexport function aggregateTarget(data: any, target: InstanaQuery) {\n  const targetLabel = buildAggregationLabel(target);\n  data = _.filter(data, (d) => d.target !== targetLabel); // filter out any previously calculated aggregations\n  let concatedTargetData = concatTargetData(data);\n\n  let dataGroupedByTimestamp = _.groupBy(concatedTargetData, function (d) {\n    return d[1];\n  });\n\n  let aggregatedData = aggregateDataOfTimestamp(dataGroupedByTimestamp, target.aggregationFunction.label!);\n  aggregatedData = _.sortBy(aggregatedData, [\n    function (datapoint) {\n      return datapoint[1];\n    },\n  ]);\n\n  return buildResult(aggregatedData, target.refId, targetLabel);\n}\n\nfunction concatTargetData(data: any) {\n  let result: any = [];\n  _.each(data, (entry) => {\n    result = _.concat(result, entry.datapoints);\n  });\n  return result;\n}\n\nfunction aggregateDataOfTimestamp(dataGroupedByTimestamp: any, aggregationLabel: string) {\n  let result: any = [];\n  _.each(dataGroupedByTimestamp, (timestampData, timestamp) => {\n    let valuesOfTimestamp = _.map(timestampData, (datapoint) => {\n      return datapoint[0];\n    });\n    let aggregatedValue = aggregate(aggregationLabel, valuesOfTimestamp);\n    result.push([aggregatedValue, parseInt(timestamp, 10)]);\n  });\n  return result;\n}\n\nfunction aggregate(aggregation: string, data: any) {\n  if (aggregation.toLowerCase() === 'sum') {\n    return _.sum(data);\n  } else if (aggregation.toLowerCase() === 'mean') {\n    return _.mean(data);\n  } else if (aggregation.toLowerCase() === 'min') {\n    return _.min(data);\n  } else if (aggregation.toLowerCase() === 'max') {\n    return _.max(data);\n  } else {\n    //apply not aggregation\n    return data;\n  }\n}\n\nfunction buildResult(aggregatedData: any, refId: string, target: string) {\n  return {\n    datapoints: aggregatedData,\n    refId: refId,\n    target: target,\n  };\n}\n\nfunction buildAggregationLabel(target: InstanaQuery): string {\n  if (target.showAllMetrics) {\n    if (target.allMetrics.length > 1) {\n      if (target.customFilters && target.customFilters.length > 0) {\n        let label = '';\n        _.each(target.customFilters, (filter, index) => {\n          label += filter;\n          if (index !== target.customFilters.length - 1) {\n            label += '.';\n          }\n        });\n        label = label + ' (' + target.aggregationFunction.label + ')';\n        return label;\n      } else {\n        return target.aggregationFunction.label!;\n      }\n    } else {\n      return target.allMetrics[0].key + ' (' + target.aggregationFunction.label + ')';\n    }\n  } else {\n    return target.metric.key + ' (' + target.aggregationFunction.label + ')';\n  }\n}\n","// can be removed once mixpanel shows no old plugins around\nimport _ from 'lodash';\nimport metric_categories from './lists/metric_categories';\nimport { INFRASTRUCTURE_ANALYZE } from 'GlobalVariables';\n\nexport default function (target: any) {\n  // 1.3.1 towards 2.0.0\n  if (target.entityType && typeof target.entityType === 'string') {\n    target.entityType = { key: target.entityType, label: target.entityType };\n  }\n\n  // 2.3.1 towards 2.4.0\n  if (target.filter && target.filter !== '') {\n    if (!target.customFilters) {\n      target.customFilters = [];\n      target.customFilters.push({ value: target.filter });\n    }\n  }\n\n  // 2.4.2 towards 2.4.3\n  if (target.timeInterval) {\n    if (target.timeInterval.value) {\n      target.timeInterval = { key: target.timeInterval.value, label: target.timeInterval.label };\n    } else if (target.timeInterval.rollup) {\n      target.timeInterval = { key: target.timeInterval.rollup, label: target.timeInterval.label };\n    }\n  }\n\n  //2.4.4 towards 2.5.0\n  if (target.metricCategory === '5') {\n    //old service metric view\n    target.metricCategory = '4';\n    target.service = {}; //because target.service does not exist yet.\n    target.service.key = target.entity.key;\n    target.service.label = target.entity.label;\n    if (target.selectedApplication && target.selectedApplication.key) {\n      target.entity.key = target.selectedApplication.key;\n      target.entity.label = target.selectedApplication.label;\n    } else {\n      target.entity.key = null;\n      target.entity.label = 'Test';\n    }\n  }\n\n  //2.4.4 towards 2.5.0\n  if (target.metricCategory === '6') {\n    //old endpoint metric view\n    target.metricCategory = '4';\n    target.endpoint = {}; //because target.endpoint does not exist yet.\n    target.endpoint.key = target.entity.key;\n    if (target.selectedApplication && target.selectedApplication.key) {\n      target.entity.key = target.selectedApplication.key;\n      target.entity.label = target.selectedApplication.label;\n    } else {\n      target.entity.key = null;\n      target.entity.label = 'Test';\n    }\n  }\n\n  //2.7.3 towards 3.0 (Angular to React Migration)\n  if (target.aggregation && typeof target.aggregation === 'string') {\n    target.aggregation\n      ? (target.aggregation = { key: target.aggregation, label: target.aggregation })\n      : (target.aggregation = {});\n    target.aggregationFunction\n      ? (target.aggregationFunction = {\n          key: target.aggregationFunction.label,\n          label: target.aggregationFunction.label,\n        })\n      : (target.aggregationFunction = {});\n  }\n  if (target.customFilters && target.customFilters.length > 0 && target.customFilters[0].value) {\n    target.customFilters = _.map(target.customFilters, (cf) => cf.value);\n  }\n  if (\n    target.metricCategory.key !== INFRASTRUCTURE_ANALYZE &&\n    target.filters &&\n    target.filters.length > 0 &&\n    !target.filters[0].tag.key &&\n    !target.filters[0].tag.label\n  ) {\n    _.forEach(target.filters, (filter) => {\n      filter.tag.label = filter.tag.key;\n    });\n  }\n  if (target.group && target.group.key && !target.group.label) {\n    target.group.label = target.group.key;\n  }\n  if (target.metricCategory && typeof target.metricCategory === 'string') {\n    target.metricCategory = _.find(\n      metric_categories,\n      (category) => category.key === parseInt(target.metricCategory, 10)\n    );\n  }\n\n  //3.0.1 towards 3.1.0\n  if (target.callToEntity && target.callToEntity.key) {\n    target.callToEntity = target.callToEntity.key;\n  }\n  if (target.applicationCallToEntity && target.applicationCallToEntity.key) {\n    target.applicationCallToEntity = target.applicationCallToEntity.key;\n  }\n  if (target.filters && target.filters.length > 0) {\n    target.filters.forEach((filter: any) => {\n      if (filter.entity && filter.entity.key) {\n        filter.entity = filter.entity.key;\n      }\n    });\n  }\n}\n","import {\n  ANALYZE_APPLICATION_METRICS,\n  ANALYZE_MOBILE_APP_METRICS,\n  ANALYZE_WEBSITE_METRICS,\n  APPLICATION_SERVICE_ENDPOINT_METRICS,\n  BUILT_IN_METRICS,\n  CUSTOM_METRICS,\n  INFRASTRUCTURE_ANALYZE,\n  SLO_INFORMATION,\n} from '../GlobalVariables';\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  SelectableValue,\n} from '@grafana/data';\nimport { appendData, generateStableHash, getDeltaRequestTimestamp, hasIntersection } from '../util/delta_util';\nimport {\n  getDefaultChartGranularity,\n  getDefaultMetricRollupDuration,\n  getPossibleGranularities,\n  getPossibleRollups,\n} from '../util/rollup_granularity_util';\nimport { getRequest, instanaUrl } from '../util/request_handler';\nimport { hoursToMs, readTime } from '../util/time_util';\n\nimport Cache from '../cache';\nimport { DataSourceApplication } from './DataSource_Application';\nimport { DataSourceEndpoint } from './DataSource_Endpoint';\nimport { DataSourceInfrastructure } from './Datasource_Infrastructure';\nimport { DataSourceMobileApp } from './DataSource_MobileApp';\nimport { DataSourceService } from './DataSource_Service';\nimport { DataSourceSlo } from './DataSource_Slo';\nimport { DataSourceWebsite } from './DataSource_Website';\nimport { InstanaOptions } from '../types/instana_options';\nimport { InstanaQuery } from '../types/instana_query';\nimport MetricCategories from '../lists/metric_categories';\nimport TimeFilter from '../types/time_filter';\nimport _ from 'lodash';\nimport { aggregateTarget } from '../util/aggregation_util';\nimport { emptyResultData } from '../util/target_util';\nimport getVersion from '../util/instana_version';\nimport { isInvalidQueryInterval } from '../util/queryInterval_check';\nimport migrate from '../migration';\nimport { readItemMetrics } from '../util/analyze_util';\n\nexport class DataSource extends DataSourceApi<InstanaQuery, InstanaOptions> {\n  options: InstanaOptions;\n  dataSourceInfrastructure: DataSourceInfrastructure;\n  dataSourceWebsite: DataSourceWebsite;\n  dataSourceMobileapp: DataSourceMobileApp;\n  dataSourceApplication: DataSourceApplication;\n  dataSourceService: DataSourceService;\n  dataSourceEndpoint: DataSourceEndpoint;\n  dataSourceSlo: DataSourceSlo;\n  timeFilter!: TimeFilter;\n  availableGranularities: SelectableValue[];\n  availableRollups: SelectableValue[];\n  availableTimeIntervals: SelectableValue[];\n  resultCache: Cache<any>;\n\n  constructor(instanceSettings: DataSourceInstanceSettings<InstanaOptions>) {\n    super(instanceSettings);\n    this.options = instanceSettings.jsonData;\n    this.options.url = instanaUrl(instanceSettings);\n    this.availableGranularities = [];\n    this.availableRollups = [];\n    this.availableTimeIntervals = [];\n    this.dataSourceSlo = new DataSourceSlo(instanceSettings.jsonData);\n    this.dataSourceInfrastructure = new DataSourceInfrastructure(instanceSettings.jsonData);\n    this.dataSourceWebsite = new DataSourceWebsite(instanceSettings.jsonData);\n    this.dataSourceMobileapp = new DataSourceMobileApp(instanceSettings.jsonData);\n    this.dataSourceApplication = new DataSourceApplication(instanceSettings.jsonData);\n    this.dataSourceService = new DataSourceService(instanceSettings.jsonData);\n    this.dataSourceEndpoint = new DataSourceEndpoint(instanceSettings.jsonData);\n    this.resultCache = new Cache<any>();\n  }\n\n  async query(options: DataQueryRequest<InstanaQuery>): Promise<DataQueryResponse> {\n    const { range } = options;\n    this.timeFilter = readTime(range!);\n    this.availableRollups = getPossibleRollups(this.timeFilter);\n    this.availableGranularities = getPossibleGranularities(this.timeFilter.windowSize);\n\n    return Promise.all(\n      options.targets.map((target) => {\n        let targetTimeFilter = readTime(range!);\n\n        // grafana setting to disable query execution\n        if (target.hide) {\n          return { data: [], target: target };\n        }\n\n        // target migration for downwards compatibility\n        migrate(target);\n\n        if (!target.metricCategory) {\n          target.metricCategory = MetricCategories[0];\n        }\n\n        this.setPossibleTimeIntervals(target);\n        if (!this.availableTimeIntervals.find((i) => i.key === target.timeInterval.key)) {\n          target.timeInterval = this.getDefaultTimeInterval(target);\n        }\n\n        if (target.timeShift) {\n          let millis = this.convertTimeShiftToMillis(target.timeShift);\n          if (millis > 0) {\n            targetTimeFilter = this.applyTimeShiftOnTimeFilter(targetTimeFilter, millis);\n          }\n        }\n\n        target.timeFilter = targetTimeFilter;\n        target.stableHash = generateStableHash(target);\n        targetTimeFilter = this.adjustTimeFilterIfCached(targetTimeFilter, target);\n        const category = target.metricCategory.key;\n\n        if (category === SLO_INFORMATION) {\n          return this.dataSourceSlo.runQuery(target, targetTimeFilter).then((data: any) => {\n            return this.buildTargetWithAppendedDataResult(target, targetTimeFilter, data);\n          });\n        } else if (category === INFRASTRUCTURE_ANALYZE) {\n          return this.dataSourceInfrastructure.runQuery(target, targetTimeFilter).then((data: any) => {\n            return this.buildTarget(target, data);\n          });\n        } else if (category === BUILT_IN_METRICS || category === CUSTOM_METRICS) {\n          return this.dataSourceInfrastructure.runQuery(target, targetTimeFilter).then((data: any) => {\n            return this.buildTargetWithAppendedDataResult(target, targetTimeFilter, data);\n          });\n        } else if (category === ANALYZE_WEBSITE_METRICS) {\n          return this.dataSourceWebsite.runQuery(target, targetTimeFilter).then((data: any) => {\n            return this.buildTargetWithAppendedDataResult(target, targetTimeFilter, data);\n          });\n        } else if (category === ANALYZE_MOBILE_APP_METRICS) {\n          return this.dataSourceMobileapp.runQuery(target, targetTimeFilter).then((data: any) => {\n            return this.buildTargetWithAppendedDataResult(target, targetTimeFilter, data);\n          });\n        } else if (category === ANALYZE_APPLICATION_METRICS) {\n          return this.dataSourceApplication.runQuery(target, targetTimeFilter).then((data: any) => {\n            return this.buildTargetWithAppendedDataResult(target, targetTimeFilter, data);\n          });\n        } else if (category === APPLICATION_SERVICE_ENDPOINT_METRICS) {\n          return this.getApplicationServiceEndpointMetrics(target, targetTimeFilter).then((data: any) => {\n            return this.buildTargetWithAppendedDataResult(target, targetTimeFilter, data);\n          });\n        }\n\n        return Promise.resolve(emptyResultData(target.refId));\n      })\n    ).then((targetData) => {\n      let result: any = [];\n      _.each(targetData, (targetAndData) => {\n        // Flatten the list as Grafana expects a list of targets with corresponding datapoints.\n        let resultData: any = _.compact(_.flatten(targetAndData.data)); // Also remove empty data items\n        this.cacheResultIfNecessary(_.cloneDeep(resultData), targetAndData.target); // clone to store results without timeshift re-calculation\n        this.applyTimeShiftIfNecessary(resultData, targetAndData.target); // adjust resultdata after caching the result\n        resultData = this.aggregateDataIfNecessary(resultData, targetAndData.target);\n        result.push(resultData);\n      });\n\n      return { data: _.flatten(result) };\n    });\n  }\n\n  getApplicationServiceEndpointMetrics(target: InstanaQuery, timeFilter: TimeFilter) {\n    // do not try to execute too big queries\n    if (isInvalidQueryInterval(timeFilter.windowSize, hoursToMs(this.options.queryinterval_limit_app_metrics))) {\n      throw new Error(\n        'Limit for maximum selectable windowsize exceeded, max is: ' +\n          this.options.queryinterval_limit_app_metrics +\n          ' hours'\n      );\n    }\n\n    if (target.endpoint && target.endpoint.key) {\n      return this.dataSourceEndpoint.fetchEndpointMetrics(target, timeFilter).then((response: any) => {\n        return readItemMetrics(target, response, this.dataSourceEndpoint.buildEndpointMetricLabel);\n      });\n    } else if (target.service && target.service.key) {\n      return this.dataSourceService.fetchServiceMetrics(target, timeFilter).then((response: any) => {\n        return readItemMetrics(target, response, this.dataSourceService.buildServiceMetricLabel);\n      });\n    } else if (target.entity && target.entity.key) {\n      return this.dataSourceApplication.fetchApplicationMetrics(target, timeFilter).then((response: any) => {\n        if (response.data) {\n          target.showWarningCantShowAllResults = response.data.canLoadMore;\n        }\n        return readItemMetrics(target, response, this.dataSourceApplication.buildApplicationMetricLabel);\n      });\n    }\n\n    return Promise.resolve({ data: { items: [] } });\n  }\n\n  applyTimeShiftIfNecessary(data: any, target: InstanaQuery) {\n    if (target.timeShift) {\n      let millis = this.convertTimeShiftToMillis(target.timeShift);\n      if (millis > 0) {\n        data.forEach((data: any) => {\n          this.applyTimeShiftOnData(data, millis);\n        });\n      }\n    }\n  }\n\n  cacheResultIfNecessary(result: any, target: InstanaQuery) {\n    if (this.supportsDeltaRequests(target) && this.hasResult(result)) {\n      let cachedObj = {\n        timeFilter: target.timeFilter,\n        results: result,\n      };\n      this.resultCache.put(target.stableHash, cachedObj, 4000000); // set to 1,11 hour\n    }\n  }\n\n  supportsDeltaRequests(target: InstanaQuery): boolean {\n    if (target.metricCategory) {\n      if (target.metricCategory.key === SLO_INFORMATION || target.metricCategory.key === INFRASTRUCTURE_ANALYZE) {\n        return false;\n      }\n    }\n\n    let version = this.resultCache.get('version');\n    if (!version) {\n      return getVersion(this.options).then((version: any) => {\n        this.resultCache.put('version', version, 4000000); // set to 1,11 hour\n        return version >= 171;\n      });\n    }\n\n    return version >= 171;\n  }\n\n  hasResult(result: any) {\n    return result && result.length > 0;\n  }\n\n  applyTimeShiftOnData(data: any, timeshift: number) {\n    data.datapoints.forEach((datapoint: any) => {\n      datapoint[1] = datapoint[1] + timeshift;\n    });\n  }\n\n  aggregateDataIfNecessary(data: any, target: InstanaQuery): any[] {\n    let newData = [];\n\n    if (target.aggregateGraphs) {\n      const aggregatedData = aggregateTarget(data, target);\n      newData.push(aggregatedData);\n      if (!target.hideOriginalGraphs) {\n        _.each(data, (dt) => {\n          if (dt.target !== aggregatedData.target) {\n            newData.push(dt);\n          }\n        });\n      }\n      return newData;\n    }\n\n    return data;\n  }\n\n  buildTarget(target: InstanaQuery, data: any) {\n    return {\n      target: target,\n      data: data,\n    };\n  }\n\n  buildTargetWithAppendedDataResult(target: InstanaQuery, timeFilter: TimeFilter, data: any) {\n    if (timeFilter.from !== target.timeFilter.from && data) {\n      data = this.appendResult(data, target);\n\n      data.forEach((t: any) => {\n        t.datapoints = t.datapoints.filter((d: any) => d[1] >= target.timeFilter.from);\n      });\n    }\n\n    return this.buildTarget(target, data);\n  }\n\n  appendResult(data: any, target: InstanaQuery) {\n    let cachedResult = this.resultCache.get(target.stableHash);\n    if (cachedResult && cachedResult.results) {\n      data = appendData(data, cachedResult.results);\n    }\n    return data;\n  }\n\n  adjustTimeFilterIfCached(timeFilter: TimeFilter, target: InstanaQuery): TimeFilter {\n    let cachedResult = this.resultCache.get(target.stableHash);\n    if (cachedResult && hasIntersection(timeFilter, cachedResult.timeFilter)) {\n      let newFrom = getDeltaRequestTimestamp(cachedResult.results, cachedResult.timeFilter.from, target.timeInterval);\n      let newTo = Math.floor(timeFilter.to / 10000) * 10000;\n      return {\n        from: newFrom,\n        to: newTo,\n        windowSize: newTo - newFrom,\n      };\n    }\n    return timeFilter;\n  }\n\n  getSloReports(): Promise<SelectableValue[]> {\n    return this.dataSourceSlo.getConfiguredSLIs();\n  }\n\n  getEntityTypes(): Promise<SelectableValue[]> {\n    return this.dataSourceInfrastructure.getEntityTypes();\n  }\n\n  fetchApplications() {\n    return this.dataSourceApplication.getApplications(this.getTimeFilter());\n  }\n\n  fetchApplicationTags() {\n    return this.dataSourceApplication.getApplicationTags(this.getTimeFilter());\n  }\n\n  fetchServices(target: InstanaQuery) {\n    return this.dataSourceService.getServicesOfApplication(target, this.getTimeFilter());\n  }\n\n  fetchEndpoints(target: InstanaQuery) {\n    return this.dataSourceEndpoint.getEndpointsOfService(target, this.getTimeFilter());\n  }\n\n  fetchTypesForTarget(query: InstanaQuery) {\n    return this.dataSourceInfrastructure.fetchTypesForTarget(query, this.getTimeFilter());\n  }\n\n  fetchWebsites(): Promise<SelectableValue[]> {\n    return this.dataSourceWebsite.getWebsites(this.getTimeFilter());\n  }\n\n  fetchMobileapp(): Promise<SelectableValue[]> {\n    return this.dataSourceMobileapp.getMobileapp(this.getTimeFilter());\n  }\n  fetchMetricsForEntityType(target: InstanaQuery): Promise<SelectableValue[]> {\n    return this.dataSourceInfrastructure.fetchAvailableMetricsForEntityType(target, this.timeFilter);\n  }\n\n  getDefaultTimeInterval(query: InstanaQuery) {\n    const category = query.metricCategory.key;\n    if (category === BUILT_IN_METRICS || category === CUSTOM_METRICS || category === INFRASTRUCTURE_ANALYZE) {\n      return getDefaultMetricRollupDuration(this.getTimeFilter());\n    } else {\n      return getDefaultChartGranularity(this.getTimeFilter().windowSize);\n    }\n  }\n\n  convertTimeShiftToMillis(timeShift: string): number {\n    if (!timeShift) {\n      return 0;\n    }\n\n    try {\n      return this.parseTimeShift(timeShift);\n    } catch (e) {\n      return 0;\n    }\n  }\n\n  parseTimeShift(timeShift: string): number {\n    let milliSeconds = 1000;\n\n    if (timeShift.endsWith('s')) {\n      return parseInt(timeShift.split('s')[0], 10) * milliSeconds;\n    } else if (timeShift.endsWith('m')) {\n      return parseInt(timeShift.split('m')[0], 10) * 60 * milliSeconds;\n    } else if (timeShift.endsWith('h')) {\n      return parseInt(timeShift.split('h')[0], 10) * 60 * 60 * milliSeconds;\n    } else if (timeShift.endsWith('d')) {\n      return parseInt(timeShift.split('d')[0], 10) * 60 * 60 * 24 * milliSeconds;\n    } else if (timeShift.endsWith('w')) {\n      return parseInt(timeShift.split('w')[0], 10) * 60 * 60 * 24 * 7 * milliSeconds;\n    }\n    return 0;\n  }\n\n  applyTimeShiftOnTimeFilter(timeFilter: TimeFilter, timeShift: number): TimeFilter {\n    return {\n      from: timeFilter.from - timeShift,\n      to: timeFilter.to - timeShift,\n      windowSize: timeFilter.windowSize,\n    };\n  }\n\n  setPossibleTimeIntervals(target: InstanaQuery) {\n    const category = target.metricCategory.key;\n    if (category === BUILT_IN_METRICS || category === CUSTOM_METRICS || category === INFRASTRUCTURE_ANALYZE) {\n      this.availableTimeIntervals = this.availableRollups;\n    } else {\n      this.availableTimeIntervals = this.availableGranularities;\n    }\n  }\n\n  getTimeFilter(): TimeFilter {\n    if (!this.timeFilter || !this.timeFilter.from) {\n      const now = Math.floor(Date.now() / 1000) * 1000;\n      const windowSize = 6 * 60 * 60 * 1000; // 6h\n      this.timeFilter = {\n        from: now - windowSize,\n        to: now,\n        windowSize: windowSize,\n      };\n    }\n\n    return this.timeFilter;\n  }\n\n  testDatasource(): Promise<any> {\n    return getRequest(this.options, '/api/infrastructure-monitoring/monitoring-state').then(\n      () => {\n        return {\n          status: 'success',\n          message: 'Successfully connected to the Instana API.',\n          title: 'Success',\n        };\n      },\n      (error: any) => {\n        if (error.status === 401) {\n          return {\n            status: 'error',\n            message: 'Unauthorized. Please verify the API Token.',\n            title: 'Error',\n          };\n        } else {\n          console.log(error);\n          return {\n            status: 'error',\n            message: 'Error (' + error.status + ') connecting to the Instana API: ' + error.statusText,\n            title: 'Error',\n          };\n        }\n      }\n    );\n  }\n}\n","import _ from 'lodash';\n\n// check grafana version (5.3+)\nexport default () => {\n  const version = _.get(window, ['grafanaBootData', 'settings', 'buildInfo', 'version'], '3.0.0');\n  const versions = _.split(version, '.', 2).map((v) => {\n    return parseInt(v, 10);\n  });\n  return version[0] >= 6 || (versions[0] >= 5 && versions[1] >= 3);\n};\n","import './plugin.css';\nimport { Button, Checkbox, Field, Icon, Input, Legend, Tooltip } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps, DataSourceSettings, SelectableValue } from '@grafana/data';\nimport React, { ChangeEvent, PureComponent } from 'react';\nimport { InstanaOptions, SecureJsonData } from '../types/instana_options';\nimport _ from 'lodash';\nimport getVersion from '../util/instana_version';\nimport proxyCheck from '../util/proxy_check';\ninterface Props extends DataSourcePluginOptionsEditorProps<InstanaOptions, SecureJsonData> {}\ninterface State {\n  canQueryOfflineSnapshots: boolean;\n  canUseProxy: boolean;\n  isApiKeyConfigured: boolean;\n  apiKeyValue: string;\n}\nexport class ConfigEditor extends PureComponent<Props, State> {\n  constructor(props: Readonly<Props>) {\n    super(props);\n    this.state = { canQueryOfflineSnapshots: false, canUseProxy: false, isApiKeyConfigured: false, apiKeyValue: '' };\n    // check possibility every time\n    this.detectFeatures();\n    const { options, onOptionsChange } = this.props;\n    const { jsonData } = options;\n    if (jsonData.useProxy === undefined) {\n      jsonData.useProxy = proxyCheck();\n    }\n    jsonData.useProxy = true;\n    // Check if API key is already configured\n    const isApiKeyConfigured = !!options.secureJsonData?.apiToken;\n    const apiKeyValue = isApiKeyConfigured ? '********' : '';\n    this.setState({ isApiKeyConfigured, apiKeyValue });\n    onOptionsChange({ ...options, jsonData });\n  }\n  onInstanaOptionsChange = (eventItem: ChangeEvent<HTMLInputElement> | SelectableValue, key: keyof InstanaOptions) => {\n    const { options, onOptionsChange } = this.props;\n    let jsonData = {\n      ...options.jsonData,\n      [key]: eventItem.currentTarget.value,\n    };\n    let secureJsonData;\n    if (key === 'apiToken') {\n      secureJsonData = {\n        apiToken: eventItem.currentTarget.value,\n      };\n      delete jsonData.apiToken;\n      options.secureJsonData = secureJsonData;\n      // Update state for API key configuration\n      const isApiKeyConfigured = !!eventItem.currentTarget.value;\n      const apiKeyValue = isApiKeyConfigured ? eventItem.currentTarget.value : '';\n      this.setState({ isApiKeyConfigured, apiKeyValue });\n    }\n    onOptionsChange({ ...options, jsonData, secureJsonData });\n    if ('url' === key || 'apiToken' === key) {\n      this.debouncedDetectFeatures(options);\n    }\n  };\n  onResetAPIKey = () => {\n    const { options, onOptionsChange } = this.props;\n    onOptionsChange({\n      ...options,\n      secureJsonFields: {\n        ...options.secureJsonFields,\n        apiToken: false,\n      },\n      secureJsonData: {\n        ...options.secureJsonData,\n        apiToken: '',\n      },\n    });\n    // Removed unused variable\n    this.setState({ apiKeyValue: '' });\n  };\n  onSwitchChange = (eventItem: SelectableValue<HTMLInputElement> | any, key: keyof InstanaOptions) => {\n    const { options, onOptionsChange } = this.props;\n    let value = false;\n    if (eventItem && eventItem.currentTarget) {\n      value = !options.jsonData[key];\n    }\n    const jsonData = {\n      ...options.jsonData,\n      [key]: value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n  debouncedDetectFeatures = (settings?: DataSourceSettings<InstanaOptions, {}>) => {\n    _.debounce(() => this.detectFeatures(settings), 500);\n  };\n  /**\n   * Checks whether the provided tenant-unit is able to provide certain features such as querying offline snapshots.\n   */\n  detectFeatures = (settings?: DataSourceSettings<InstanaOptions, {}>) => {\n    let jsonData = settings ? settings.jsonData : this.props.options.jsonData;\n\n    if (!jsonData || !jsonData.url) {\n      return;\n    }\n\n    this.setState({ canUseProxy: proxyCheck() });\n\n    getVersion(jsonData).then((version: any) => {\n      version\n        ? this.setState({ canQueryOfflineSnapshots: version >= 156 })\n        : this.setState({ canQueryOfflineSnapshots: false });\n    });\n  };\n\n  render() {\n    const { options } = this.props;\n    const { jsonData } = options;\n    const { apiKeyValue } = this.state;\n    return (\n      <div className=\"settings\">\n        <Legend>Instana configuration</Legend>\n        <Field\n          className={'width-30'}\n          horizontal\n          required\n          label=\"URL\"\n          description=\"The URL of your Instana installation.\"\n        >\n          <Input\n            width={30}\n            value={jsonData.url}\n            placeholder={'https://tools-acme.instana.io'}\n            onChange={(event) => this.onInstanaOptionsChange(event, 'url')}\n          />\n        </Field>\n\n        <Field\n          style={{ width: '637px' }}\n          horizontal\n          required\n          label=\"API Token\"\n          description=\"The API token to access the data.\"\n        >\n          <div style={{ display: 'flex' }}>\n            <Input\n              type=\"password\"\n              width={30}\n              value={apiKeyValue}\n              placeholder={options.secureJsonFields?.apiToken ? 'Configured' : 'Enter API Key'}\n              readOnly={options.secureJsonFields?.apiToken}\n              suffix={\n                <Tooltip\n                  content={\n                    <p>\n                      You can create API tokens following the instructions at&nbsp;\n                      <a href=\"https://www.ibm.com/docs/en/obi/current?topic=apis-web-rest-api#unit-specific-api-tokens\">\n                        https://www.ibm.com/docs/en/obi/current?topic=apis-web-rest-api\n                      </a>\n                    </p>\n                  }\n                  theme={'info'}\n                >\n                  <Icon name=\"info-circle\" />\n                </Tooltip>\n              }\n              onChange={(event) => this.onInstanaOptionsChange(event, 'apiToken')}\n            />\n            <div style={{ marginLeft: '15px' }}>\n              <Button onClick={this.onResetAPIKey}>Reset API Token</Button>\n            </div>\n          </div>\n        </Field>\n\n        <Checkbox\n          label={'Use Proxy'}\n          value={true}\n          disabled={true}\n          description={\n            'The only way to use the API token for authentication in Grafana is through Use-Proxy. Needs Grafana 10.0.0+ and Instana datasource 4.0.0+'\n          }\n        />\n        <Checkbox\n          label={'Enable offline snapshots'}\n          value={jsonData.showOffline}\n          onChange={(event) => this.onSwitchChange(event, 'showOffline')}\n          description={'Enables querying offline snapshots. Needs Instana release 260+ and Instana datasource 3.3.0+'}\n        />\n        <Checkbox\n          label={'Enable Infrastructure Analyze category'}\n          value={jsonData.allowInfraExplore}\n          onChange={(event) => this.onSwitchChange(event, 'allowInfraExplore')}\n          description={\n            'Adds a new category that allows usage of Infrastructure Analyze functionality. Needs Instana release ' +\n            '195+ and an explicit feature flag. If you are interested in this technology, please submit a request via ' +\n            'our support system at https://support.instana.com/.'\n          }\n        />\n        <br />\n        <br />\n        <b>Maximum query intervals in hours</b>\n        <p className={'width-30'}>\n          This settings are optional values to control the load of data queries, by defining the maximum allowed query\n          intervals against the Instana API.\n        </p>\n        <Field className={'width-30'} horizontal label=\"Infrastructure metrics\">\n          <Input\n            width={30}\n            value={jsonData.queryinterval_limit_infra}\n            placeholder={'optional: interval limit in hours'}\n            onChange={(event) => this.onInstanaOptionsChange(event, 'queryinterval_limit_infra')}\n          />\n        </Field>\n        <Field className={'width-30'} horizontal label=\"Application metrics\">\n          <Input\n            width={30}\n            value={jsonData.queryinterval_limit_app_metrics}\n            placeholder={'optional: interval limit in hours'}\n            onChange={(event) => this.onInstanaOptionsChange(event, 'queryinterval_limit_app_metrics')}\n          />\n        </Field>\n        <Field className={'width-30'} horizontal label=\"Analyze application calls\">\n          <Input\n            width={30}\n            value={jsonData.queryinterval_limit_app_calls}\n            placeholder={'optional: interval limit in hours'}\n            onChange={(event) => this.onInstanaOptionsChange(event, 'queryinterval_limit_app_calls')}\n          />\n        </Field>\n        <Field className={'width-30'} horizontal label=\"Analyze website\">\n          <Input\n            width={30}\n            value={jsonData.queryinterval_limit_website_metrics}\n            placeholder={'optional: interval limit in hours'}\n            onChange={(event) => this.onInstanaOptionsChange(event, 'queryinterval_limit_website_metrics')}\n          />\n        </Field>\n        <Field className={'width-30'} horizontal label=\"Analyze mobile app\">\n          <Input\n            width={30}\n            value={jsonData.queryinterval_limit_mobileapp_metrics}\n            placeholder={'optional: interval limit in hours'}\n            onChange={(event) => this.onInstanaOptionsChange(event, 'queryinterval_limit_mobileapp_metrics')}\n          />\n        </Field>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\ninterface WrapperProps {\n  disabled?: boolean;\n  stretch?: boolean;\n  children: any;\n}\n\nexport default function FormWrapper(props: WrapperProps) {\n  const style: any = { display: 'flex' };\n\n  if (props.disabled) {\n    style.opacity = '0.4';\n    style.pointerEvents = 'none';\n  }\n\n  if (props.stretch) {\n    style.width = '100%';\n  }\n\n  return <div style={style}>{props.children}</div>;\n}\n","import React from 'react';\n\nimport { InlineFormLabel, LegacyForms, PopoverContent } from '@grafana/ui';\nimport FormWrapper from './FormWrapper';\n\nconst { Switch } = LegacyForms;\n\ninterface State {}\n\ninterface Props {\n  label: string;\n  value: boolean;\n  disabled?: boolean;\n  queryKeyword?: boolean;\n  labelWidth?: number | 14;\n  tooltip?: PopoverContent;\n\n  onChange(event?: any): any;\n}\n\n/**\n * Default switch field including label. Switch element is grafana/ui <Switch />.\n */\nexport default class FormSwitch extends React.Component<Props, State> {\n  constructor(props: any) {\n    super(props);\n  }\n\n  render() {\n    const { label, tooltip, queryKeyword, disabled, labelWidth = 14, value, ...remainingProps } = this.props;\n\n    return (\n      <FormWrapper disabled={disabled} stretch={false}>\n        <InlineFormLabel className={queryKeyword ? 'query-keyword' : ''} width={labelWidth} tooltip={tooltip}>\n          {label}\n        </InlineFormLabel>\n        <Switch checked={value} label={''} {...remainingProps} />\n      </FormWrapper>\n    );\n  }\n}\n","import React, { ChangeEvent } from 'react';\n\nimport { InstanaQuery } from '../../../types/instana_query';\nimport FormSwitch from '../../FormField/FormSwitch';\nimport { Input } from '@grafana/ui';\nimport _ from 'lodash';\n\ninterface FreeTextMetricsState {}\n\ninterface Props {\n  query: InstanaQuery;\n  onRunQuery(): void;\n  onChange(value: InstanaQuery): void;\n  loadEntityTypes(filterResult?: boolean): void;\n}\n\nexport class FreeTextMetrics extends React.Component<Props, FreeTextMetricsState> {\n  constructor(props: any) {\n    super(props);\n  }\n\n  debouncedRunQuery = _.debounce(this.props.onRunQuery, 500);\n\n  onUseFreeTextMetricsChange = (event: React.SyntheticEvent<HTMLInputElement> | undefined) => {\n    const { query, onChange, loadEntityTypes } = this.props;\n    if (event && event.currentTarget) {\n      query.useFreeTextMetrics = event.currentTarget.checked;\n      if (query.useFreeTextMetrics) {\n        loadEntityTypes(false);\n        query.metric = {};\n      } else {\n        loadEntityTypes(true);\n      }\n      onChange(query);\n    }\n  };\n\n  onFreeTextMetricsChange = (eventItem: ChangeEvent<HTMLInputElement>) => {\n    const { query, onChange } = this.props;\n    query.freeTextMetrics = eventItem.currentTarget.value;\n    onChange(query);\n\n    // onRunQuery with 500ms delay after last debounce\n    this.debouncedRunQuery();\n  };\n\n  render() {\n    const { query } = this.props;\n\n    return (\n      <div className={'gf-form'}>\n        <FormSwitch\n          queryKeyword\n          label={'Enable free text metrics'}\n          tooltip={\n            'Specify comma separated metrics directly in this text field. Once this field has a value,' +\n            ' selected metrics from above will be ignored. Enabled as soon as a query is entered.' +\n            ' Max 4 metrics supported.'\n          }\n          value={query.useFreeTextMetrics}\n          onChange={this.onUseFreeTextMetricsChange}\n          disabled={false}\n        />\n        <Input\n          width={0}\n          disabled={!query.useFreeTextMetrics}\n          value={query.freeTextMetrics}\n          placeholder={'metric.one,metric.two,metric.three'}\n          onChange={this.onFreeTextMetricsChange}\n        />\n      </div>\n    );\n  }\n}\n","export default [\n  {\n    label: 'SUM',\n  },\n  {\n    label: 'MEAN',\n  },\n  {\n    label: 'MIN',\n  },\n  {\n    label: 'MAX',\n  },\n];\n","import React from 'react';\n\nimport AggregationFunctions from '../../lists/aggregation_function';\nimport { InstanaQuery } from '../../types/instana_query';\nimport FormSwitch from '../FormField/FormSwitch';\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\ninterface AggregateQueryState {}\n\ninterface Props {\n  query: InstanaQuery;\n  onRunQuery(): void;\n  onChange(value: InstanaQuery): void;\n}\n\nexport class AggregateQuery extends React.Component<Props, AggregateQueryState> {\n  constructor(props: any) {\n    super(props);\n    this.state = { showAdditionalSettings: false, legendFormat: '' };\n    const { query } = this.props;\n    if (!query.aggregationFunction) {\n      query.aggregationFunction = AggregationFunctions[0];\n    }\n  }\n\n  onAggregateGraphs = (event: React.SyntheticEvent<HTMLInputElement> | undefined) => {\n    const { query, onRunQuery } = this.props;\n    if (event && event.currentTarget) {\n      query.aggregateGraphs = event.currentTarget.checked;\n      onRunQuery();\n    }\n  };\n\n  onHideOriginalGraph = (event: React.SyntheticEvent<HTMLInputElement> | undefined) => {\n    const { query, onRunQuery } = this.props;\n    if (event && event.currentTarget) {\n      query.hideOriginalGraphs = event.currentTarget.checked;\n      onRunQuery();\n    }\n  };\n\n  onAggregationFunctionChange = (event: SelectableValue) => {\n    const { query, onRunQuery } = this.props;\n    query.aggregationFunction = event;\n    onRunQuery();\n  };\n\n  render() {\n    const { query } = this.props;\n\n    return (\n      <div className={'gf-form'}>\n        <FormSwitch\n          queryKeyword\n          label={'Aggregate query graphs'}\n          tooltip={'Aggregate all graphs of a query.'}\n          value={query.aggregateGraphs}\n          onChange={this.onAggregateGraphs}\n        />\n\n        <Select\n          menuPlacement={'bottom'}\n          width={12}\n          isSearchable={true}\n          options={AggregationFunctions}\n          value={query.aggregationFunction}\n          disabled={!query.aggregateGraphs}\n          onChange={this.onAggregationFunctionChange}\n        />\n\n        <FormSwitch\n          queryKeyword\n          disabled={!query.aggregateGraphs}\n          labelWidth={10}\n          label={'Hide original graphs'}\n          tooltip={'Removes the original graphs resulted from the query and only shows the aggregated graph.'}\n          value={query.hideOriginalGraphs}\n          onChange={this.onHideOriginalGraph}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport { InlineFormLabel, Input, PopoverContent } from '@grafana/ui';\nimport FormWrapper from './FormWrapper';\n\ninterface State {}\n\ninterface Props {\n  label: string;\n  value: string;\n  invalid?: boolean;\n  disabled?: boolean;\n  placeholder?: string;\n  queryKeyword?: boolean;\n  labelWidth?: number | 14;\n  inputWidth?: number | 30;\n  tooltip?: PopoverContent;\n\n  onChange(event?: any): any;\n}\n\n/**\n * Default input field including label. Input element is grafana/ui <Input />.\n */\nexport default class FormInput extends React.Component<Props, State> {\n  constructor(props: any) {\n    super(props);\n  }\n\n  render() {\n    const { label, tooltip, queryKeyword, disabled, labelWidth = 14, inputWidth = 30, ...remainingProps } = this.props;\n\n    return (\n      <FormWrapper disabled={disabled} stretch={!inputWidth}>\n        <InlineFormLabel className={queryKeyword ? 'query-keyword' : ''} width={labelWidth} tooltip={tooltip}>\n          {label}\n        </InlineFormLabel>\n        <Input width={inputWidth} disabled={disabled} {...remainingProps} />\n      </FormWrapper>\n    );\n  }\n}\n","import React, { ChangeEvent, FormEvent } from 'react';\n\nimport { BUILT_IN_METRICS, CUSTOM_METRICS, INFRASTRUCTURE_ANALYZE, SLO_INFORMATION } from '../../GlobalVariables';\nimport { FreeTextMetrics } from '../Infrastructure/Custom/FreeTextMetrics';\nimport { InstanaQuery } from '../../types/instana_query';\nimport { AggregateQuery } from './AggregateQuery';\nimport FormSwitch from '../FormField/FormSwitch';\nimport FormInput from '../FormField/FormInput';\nimport _ from 'lodash';\n\nconst legendFormatPlaceholders = [\n  '$label (on host $host)',\n  '$label (on host $host)',\n  '$label ($application) - $key',\n  '$label ($website) - $key',\n  '$label ($application) - $key',\n  '',\n  '',\n  '',\n];\n\nconst legendFormatTooltips = [\n  <div key=\"builtIn\">\n    Default: $label (on host $host)\n    <ul>\n      <li>• $label - entity label</li>\n      <li>• $host - corresponding host</li>\n      <li>• $pid - corresponding PID</li>\n      <li>• $timeShift - corresponding timeShift</li>\n      <li>• $metric - displayed metric</li>\n      <li>• $type - entity type</li>\n      <li>• $service - service label</li>\n      <li>• $name - label alternative</li>\n      <li>• $index - index in the list</li>\n    </ul>\n  </div>,\n  <div key=\"custom\">\n    Default: $label (on host $host)\n    <ul>\n      <li>• $label - entity label</li>\n      <li>• $host - corresponding host</li>\n      <li>• $pid - corresponding PID</li>\n      <li>• $timeShift - corresponding timeShift</li>\n      <li>• $metric - displayed metric</li>\n      <li>• $type - entity type</li>\n      <li>• $service - service label</li>\n      <li>• $name - label alternative</li>\n      <li>• $index - index in the list</li>\n    </ul>\n  </div>,\n  <div key=\"application\">\n    Default: $label ($application) - $key\n    <ul>\n      <li>• $label - entity label</li>\n      <li>• $application - application label</li>\n      <li>• $timeShift - corresponding timeShift</li>\n      <li>• $metric - displayed metric</li>\n      <li>• $key - metric key with aggregation and rollup</li>\n      <li>• $index - index in the list</li>\n    </ul>\n  </div>,\n  <div key=\"website\">\n    Default: $label ($website) - $key\n    <ul>\n      <li>• $label - entity label</li>\n      <li>• $website - application label</li>\n      <li>• $type - entity type</li>\n      <li>• $timeShift - corresponding timeShift</li>\n      <li>• $metric - displayed metric</li>\n      <li>• $key - metric key with aggregation and rollup</li>\n      <li>• $index - index in the list</li>\n    </ul>\n  </div>,\n  <div key=\"endpoint\">\n    Default: $label ($application) - $key\n    <ul>\n      <li>• $label - entity label</li>\n      <li>• $application - application label</li>\n      <li>• $service - service label</li>\n      <li>• $endpoint - endpoint label</li>\n      <li>• $timeShift - corresponding timeShift</li>\n      <li>• $metric - displayed metric</li>\n      <li>• $key - metric key with aggregation and rollup</li>\n      <li>• $index - index in the list</li>\n    </ul>\n  </div>,\n  '',\n  '',\n  '',\n];\n\ninterface AdvancedSettingsState {\n  legendFormatPlaceholder: string;\n}\n\ninterface Props {\n  query: InstanaQuery;\n  onRunQuery(): void;\n  onChange(value: InstanaQuery): void;\n  loadEntityTypes(filterResult?: boolean): void;\n}\n\nexport default class AdvancedSettings extends React.Component<Props, AdvancedSettingsState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      legendFormatPlaceholder: this.setLegendFormatPlaceholder(),\n    };\n  }\n\n  debouncedRunQuery = _.debounce(this.props.onRunQuery, 500);\n\n  onLegendFormatChange = (eventItem: FormEvent<HTMLInputElement>) => {\n    const { query, onChange } = this.props;\n    query.labelFormat = eventItem.currentTarget.value;\n    onChange(query);\n\n    // onRunQuery with 500ms delay after last debounce\n    this.debouncedRunQuery();\n  };\n\n  onTimeShiftChange = (eventItem: ChangeEvent<HTMLInputElement>) => {\n    const { query, onChange } = this.props;\n    query.timeShift = eventItem.currentTarget.value;\n\n    if (query.timeShift) {\n      query.timeShiftIsValid = query.timeShift.match(/\\d+[m,s,h,d,w]{1}/) ? true : false;\n    } else {\n      query.timeShiftIsValid = true;\n    }\n\n    onChange(query);\n\n    if (query.timeShiftIsValid) {\n      // onRunQuery with 500ms delay after last debounce\n      this.debouncedRunQuery();\n    }\n  };\n\n  setLegendFormatPlaceholder(): string {\n    const { query } = this.props;\n    return legendFormatPlaceholders[query.metricCategory.key];\n  }\n\n  setLegendFormatTooltip() {\n    const { query } = this.props;\n    return legendFormatTooltips[query.metricCategory.key];\n  }\n\n  onShowAdvancedSettingsChange = (event: React.SyntheticEvent<HTMLInputElement> | undefined) => {\n    if (event && event.currentTarget) {\n      const { query, onChange } = this.props;\n      query.showAdvancedSettings = event.currentTarget.checked;\n      onChange(query);\n    }\n  };\n\n  render() {\n    const { query, onRunQuery, onChange, loadEntityTypes } = this.props;\n    const category = query.metricCategory.key;\n\n    return (\n      <div>\n        <div className={'gf-form'}>\n          <FormSwitch\n            label={'Show advanced settings'}\n            tooltip={'Show all additional settings'}\n            value={query.showAdvancedSettings}\n            onChange={(e) => this.onShowAdvancedSettingsChange(e)}\n          />\n        </div>\n\n        <div hidden={!query.showAdvancedSettings}>\n          <div className={'gf-form'} hidden={category === SLO_INFORMATION || category === INFRASTRUCTURE_ANALYZE}>\n            <FormInput\n              queryKeyword\n              inputWidth={0}\n              label={'Legend format'}\n              tooltip={this.setLegendFormatTooltip()}\n              value={query.labelFormat}\n              placeholder={this.setLegendFormatPlaceholder()}\n              onChange={(event) => this.onLegendFormatChange(event)}\n            />\n          </div>\n\n          <div className={'gf-form'}>\n            <FormInput\n              queryKeyword\n              inputWidth={0}\n              label={'Time shift'}\n              tooltip={\n                'Specify the amount of hours that shall be used. The time shift function always go back in time, ' +\n                'not forward. Accepts values such as 1s, 1m, 1h, 1d, 1w.'\n              }\n              value={query.timeShift}\n              invalid={!query.timeShiftIsValid}\n              placeholder={'1h'}\n              onChange={(event) => this.onTimeShiftChange(event)}\n            />\n          </div>\n\n          <div hidden={category !== CUSTOM_METRICS}>\n            <FreeTextMetrics\n              query={query}\n              onRunQuery={onRunQuery}\n              onChange={onChange}\n              loadEntityTypes={loadEntityTypes}\n            />\n          </div>\n\n          <div hidden={category !== BUILT_IN_METRICS && category !== CUSTOM_METRICS}>\n            <AggregateQuery query={query} onRunQuery={onRunQuery} onChange={onChange} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","export default ['DESTINATION', 'SOURCE'];\n","import React, { useState } from 'react';\nimport { Tooltip, useTheme } from '@grafana/ui';\n\nconst DESTINATION = 'DESTINATION';\nconst SOURCE = 'SOURCE';\n\nconst dropdown = {\n  position: 'relative',\n  background: 'transparent',\n  width: '32px',\n  height: '32px',\n  marginRight: '4px',\n} as React.CSSProperties;\n\nconst dropdown__list = {\n  transition: 'max-height .2s ease-out',\n  maxHeight: 0,\n  overflow: 'hidden',\n  zIndex: 1,\n  position: 'fixed',\n} as React.CSSProperties;\n\nconst dropdown__list__active = {\n  overflow: 'hidden',\n  zIndex: 2, // we set a zIndex to ensure that the overlay is above other elements and does not move any DOM elements.\n  position: 'fixed',\n  maxHeight: '1000px',\n  opacity: 1,\n} as React.CSSProperties;\n\nconst iconTextContainer = {\n  display: 'inline-flex',\n};\n\nconst iconStyle = {\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n};\n\nconst iconTextStyle = {\n  padding: '7px',\n};\n\nconst iconSize = 30;\n\nconst destinationIcon = (\n  <svg style={iconStyle} height={iconSize} width={iconSize}>\n    <path\n      transform=\"translate(3, 5)\"\n      fill=\"#33a2e5\"\n      d=\"M4 11.173h6.38L8.115 8.92 9.042 8l3.704 3.684-3.704 3.684-.926-.92 2.263-2.252H4zM16.43 14.316c-1.426 0-2.632-1.206-2.632-2.632 0-1.425 1.206-2.631 2.632-2.631 1.425 0 2.631 1.206 2.631 2.631 0 1.426-1.206 2.632-2.631 2.632z\"\n    />\n  </svg>\n);\n\nconst sourceIcon = (\n  <svg style={iconStyle} height={iconSize} width={iconSize}>\n    <path\n      transform=\"translate(3, 5)\"\n      fill=\"#33a2e5\"\n      d=\"M9.939 11.173h6.379L14.054 8.92 14.98 8l3.704 3.684-3.704 3.684-.926-.92 2.264-2.252h-6.38c-.308 1.023-1.234 1.842-2.366 1.842C6.132 14.243 5 13.117 5 11.787c0-1.33 1.132-2.457 2.47-2.457 1.234 0 2.16.717 2.469 1.843z\"\n    />\n  </svg>\n);\n\n/**\n * Props have to be:\n *   value: string\n *   onChange: function that accepts a string as a parameter and returns void\n */\nexport default function Entity(props: any) {\n  const theme = useTheme();\n\n  const dropdown__list__item = {\n    background: theme.colors.bg2,\n    cursor: 'pointer',\n    listStyle: 'none',\n    borderRadius: '3px',\n    height: '32px',\n  } as React.CSSProperties;\n\n  const [active, setActive] = useState(false);\n\n  function toggleDropdown() {\n    setActive(!active);\n  }\n\n  function handleClick(entity: string) {\n    props.onChange(entity);\n    setActive(false);\n  }\n\n  return (\n    <div style={dropdown}>\n      <div\n        onClick={() => toggleDropdown()}\n        onBlur={() => setActive(false)}\n        style={dropdown__list__item}\n        contentEditable\n      >\n        <Tooltip content={props.value} theme={'info'} placement={'top'}>\n          {props.value === DESTINATION ? destinationIcon : sourceIcon}\n        </Tooltip>\n      </div>\n\n      <ul style={active ? dropdown__list__active : dropdown__list}>\n        <li onClick={() => handleClick(DESTINATION)} key={DESTINATION} style={dropdown__list__item}>\n          <div style={iconTextContainer}>\n            {destinationIcon} <span style={iconTextStyle}>{DESTINATION}</span>\n          </div>\n        </li>\n        <li onClick={() => handleClick('SOURCE')} key={SOURCE} style={dropdown__list__item}>\n          <div style={iconTextContainer}>\n            {sourceIcon} <span style={iconTextStyle}>{SOURCE}</span>\n          </div>\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import React, { ChangeEvent } from 'react';\n\nimport { ALL_APPLICATIONS, ANALYZE_APPLICATION_METRICS } from '../../GlobalVariables';\nimport call_to_entities from '../../lists/apply_call_to_entities';\nimport { Input, Select, InlineFormLabel } from '@grafana/ui';\nimport { DataSource } from '../../datasources/DataSource';\nimport { InstanaQuery } from '../../types/instana_query';\nimport FormWrapper from '../FormField/FormWrapper';\nimport { SelectableValue } from '@grafana/data';\nimport Entity from '../Entity/Entity';\nimport _ from 'lodash';\nimport '../plugin.css';\n\ninterface ApplicationCallsMetricsState {\n  applications: SelectableValue[];\n}\n\ninterface Props {\n  query: InstanaQuery;\n\n  groups: SelectableValue[];\n\n  updateGroups(groups: SelectableValue[]): void;\n\n  onRunQuery(): void;\n\n  onChange(value: InstanaQuery): void;\n\n  updateMetrics(metrics: SelectableValue[]): void;\n\n  datasource: DataSource;\n}\n\nlet isUnmounting = false;\n\nexport class ApplicationCallsMetrics extends React.Component<Props, ApplicationCallsMetricsState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      applications: [],\n    };\n  }\n\n  componentDidMount() {\n    const { query, datasource, onChange } = this.props;\n    isUnmounting = false;\n    datasource.fetchApplications().then((applications) => {\n      if (!isUnmounting) {\n        if (!_.find(applications, { key: null })) {\n          applications.unshift({ key: null, label: ALL_APPLICATIONS });\n        }\n\n        this.setState({\n          applications: applications,\n        });\n\n        if (!query.entity || (!query.entity.key && !query.entity.label)) {\n          query.entity = applications[0];\n        }\n\n        if (!query.callToEntity) {\n          query.callToEntity = call_to_entities[0];\n        }\n        if (!query.applicationCallToEntity) {\n          query.applicationCallToEntity = call_to_entities[0];\n        }\n\n        onChange(query);\n      }\n    });\n\n    datasource.fetchApplicationTags().then((applicationTags: any) => {\n      if (!isUnmounting) {\n        this.props.updateGroups(_.sortBy(applicationTags, 'key'));\n\n        // select a meaningful default group\n        if (!query.group || !query.group.key) {\n          query.group = _.find(applicationTags, ['key', 'endpoint.name']);\n          onChange(query);\n        }\n      }\n    });\n\n    this.props.updateMetrics(datasource.dataSourceApplication.getApplicationMetricsCatalog());\n  }\n\n  componentWillUnmount() {\n    isUnmounting = true;\n  }\n\n  onApplicationChange = (application: SelectableValue) => {\n    const { query, onChange, onRunQuery } = this.props;\n    query.entity = application;\n    onChange(query);\n    onRunQuery();\n  };\n\n  onGroupChange = (group: SelectableValue) => {\n    const { query, onChange, onRunQuery } = this.props;\n    query.group = group;\n\n    if (query.group && query.metricCategory.key === ANALYZE_APPLICATION_METRICS) {\n      query.showGroupBySecondLevel = query.group.type === 'KEY_VALUE_PAIR';\n    }\n\n    if (!query.showGroupBySecondLevel) {\n      query.groupbyTagSecondLevelKey = '';\n    }\n\n    onChange(query);\n    onRunQuery();\n  };\n\n  onApplicationCallToEntityChange = (applicationCallToEntity: string) => {\n    const { query, onChange, onRunQuery } = this.props;\n    query.applicationCallToEntity = applicationCallToEntity;\n    onChange(query);\n    onRunQuery();\n  };\n\n  onCallToEntityChange = (callToEntity: string) => {\n    const { query, onChange, onRunQuery } = this.props;\n    query.callToEntity = callToEntity;\n    onChange(query);\n    onRunQuery();\n  };\n\n  debouncedRunQuery = _.debounce(this.props.onRunQuery, 500);\n\n  onGroupByTagSecondLevelKeyChange = (eventItem: ChangeEvent<HTMLInputElement>) => {\n    const { query, onChange } = this.props;\n    query.groupbyTagSecondLevelKey = eventItem.currentTarget.value;\n    onChange(query);\n\n    // onRunQuery with 500ms delay after last debounce\n    this.debouncedRunQuery();\n  };\n\n  render() {\n    const { query, groups } = this.props;\n\n    return (\n      <div className={'gf-form'}>\n        <FormWrapper stretch={true}>\n          <InlineFormLabel className={'query-keyword'} width={14} tooltip={'Select your application.'}>\n            Application\n          </InlineFormLabel>\n          <Entity value={query.applicationCallToEntity} onChange={this.onApplicationCallToEntityChange} />\n          <Select\n            menuPlacement={'bottom'}\n            width={0}\n            isSearchable={true}\n            value={query.entity}\n            options={this.state.applications}\n            onChange={this.onApplicationChange}\n          />\n        </FormWrapper>\n\n        <FormWrapper stretch={true}>\n          <InlineFormLabel className={'query-keyword'} width={7} tooltip={'Group by tag.'}>\n            Group by\n          </InlineFormLabel>\n          <Entity value={query.callToEntity} onChange={this.onCallToEntityChange} />\n          <Select\n            menuPlacement={'bottom'}\n            width={0}\n            isSearchable={true}\n            options={groups}\n            value={query.group}\n            onChange={this.onGroupChange}\n          />\n        </FormWrapper>\n\n        <div style={!query.showGroupBySecondLevel ? { display: 'none' } : {}}>\n          <Input\n            type={'text'}\n            value={query.groupbyTagSecondLevelKey}\n            onChange={this.onGroupByTagSecondLevelKeyChange}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import { Tooltip, useTheme } from '@grafana/ui';\nimport React, { useState } from 'react';\n\nimport './ApplicationBoundaryScope.css';\n\nconst INBOUND = 'INBOUND';\nconst ALL = 'ALL';\n\nconst dropdown = {\n  position: 'relative',\n  background: 'transparent',\n  width: '32px',\n  height: '32px',\n  marginRight: '4px',\n} as React.CSSProperties;\n\nconst iconSize = 30;\n\nconst inboundIcon = (\n  <svg className={'iconStyle'} height={iconSize} width={iconSize}>\n    <path\n      transform=\"translate(3, 5)\"\n      fill=\"#33a2e5\"\n      d=\"M12.7891666,14.6051302 L12.7751756,19.8293818 L11.4691127,19.8328795 L11.4776628,16.6402814 L6.96695389,21.1509902 L6.2433066,20.427343 L10.7540155,15.9166341 L7.56141732,15.9251842 L7.56491507,14.6191213 L12.7891666,14.6051302 Z M15.754133,9.38135895 C17.1795716,9.38135895 18.3857119,10.5874993 18.3857119,12.0129379 C18.3857119,13.4383765 17.1795716,14.6445168 15.754133,14.6445168 C14.3286944,14.6445168 13.122554,13.4383765 13.122554,12.0129379 C13.122554,10.5874993 14.3286944,9.38135895 15.754133,9.38135895 Z M6.96695389,3.2433066 L11.4776628,7.75401547 L11.4691127,4.56141732 L12.7751756,4.56491507 L12.7891666,9.7891666 L7.56491507,9.77517557 L7.56141732,8.46911269 L10.7540155,8.47766276 L6.2433066,3.96695389 L6.96695389,3.2433066 Z\"\n    />\n  </svg>\n);\n\nconst allIcon = (\n  <svg className={'iconStyle'} height={iconSize} width={iconSize}>\n    <path\n      transform=\"translate(3, 5)\"\n      fill=\"#33a2e5\"\n      d=\"M7.54586,15 L7.53186897,20.2242515 L6.22580608,20.2277493 L6.23435616,17.0351511 L1.72364729,21.54586 L1,20.8222127 L5.51070887,16.3115038 L2.31811071,16.3200539 L2.32160847,15.013991 L7.54586,15 Z M14.1975552,7.94441147 L17.901552,11.628622 L14.1975552,15.3128325 L13.271556,14.3917799 L15.5351096,12.1403179 L12.4724561,12.1407167 C12.2827518,13.474447 11.1361413,14.5 9.75,14.5 C8.23121694,14.5 7,13.2687831 7,11.75 C7,10.2312169 8.23121694,9 9.75,9 C11.0508538,9 12.1407461,9.90323356 12.4267385,11.1167623 L15.5351096,11.1169261 L13.271556,8.8654641 L14.1975552,7.94441147 Z M20.75,9 C22.2687831,9 23.5,10.2312169 23.5,11.75 C23.5,13.2687831 22.2687831,14.5 20.75,14.5 C19.2312169,14.5 18,13.2687831 18,11.75 C18,10.2312169 19.2312169,9 20.75,9 Z M1.72364729,2 L6.23435616,6.51070887 L6.22580608,3.31811071 L7.53186897,3.32160847 L7.54586,8.54586 L2.32160847,8.53186897 L2.31811071,7.22580608 L5.51070887,7.23435616 L1,2.72364729 L1.72364729,2 Z\"\n    />\n  </svg>\n);\n\n/**\n * Props have to be:\n *   value: string\n *   onChange: function that accepts a string as a parameter and returns void\n *   disabled: boolean\n */\nexport default function ApplicationBoundaryScope(props: any) {\n  const theme = useTheme();\n\n  const opacity = props.disabled ? 0.5 : 1;\n\n  const dropdown__list__item = {\n    background: theme.colors.bg2,\n    cursor: 'pointer',\n    listStyle: 'none',\n    borderRadius: '3px',\n    height: '32px',\n    opacity: opacity,\n  } as React.CSSProperties;\n\n  const [active, setActive] = useState(false);\n\n  function toggleDropdown() {\n    if (!props.disabled) {\n      setActive(!active);\n    }\n  }\n\n  function handleClick(entity: string) {\n    props.onChange(entity);\n    setActive(false);\n  }\n\n  return (\n    <div style={dropdown}>\n      <div\n        onClick={() => toggleDropdown()}\n        onBlur={() => setActive(false)}\n        style={dropdown__list__item}\n        contentEditable\n      >\n        <Tooltip content={props.value ? props.value : ALL} theme={'info'} placement={'top'}>\n          {props.value === INBOUND ? inboundIcon : allIcon}\n        </Tooltip>\n      </div>\n\n      <ul className={active ? 'dropdown-list-active' : 'dropdown-list'}>\n        <li onClick={() => handleClick(INBOUND)} key={INBOUND} style={dropdown__list__item}>\n          <div className={'iconTextContainer'}>\n            {inboundIcon} <span className={'iconTextStyle'}>{INBOUND}</span>\n          </div>\n        </li>\n        <li onClick={() => handleClick(ALL)} key={ALL} style={dropdown__list__item}>\n          <div className={'iconTextContainer'}>\n            {allIcon} <span className={'iconTextStyle'}>{ALL}</span>\n          </div>\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import { ALL_APPLICATIONS, ALL_ENDPOINTS, ALL_SERVICES } from '../../GlobalVariables';\nimport { InlineFormLabel, Input, Select } from '@grafana/ui';\nimport React, { ChangeEvent } from 'react';\n\nimport ApplicationBoundaryScope from './ApplicationBoundaryScope';\nimport { DataSource } from '../../datasources/DataSource';\nimport { InstanaQuery } from '../../types/instana_query';\nimport { SelectableValue } from '@grafana/data';\nimport _ from 'lodash';\n\ninterface ApplicationServiceEndpointMetricsState {\n  applications: SelectableValue[];\n  services: SelectableValue[];\n  endpoints: SelectableValue[];\n  value: SelectableValue;\n}\n\ninterface Props {\n  query: InstanaQuery;\n\n  onRunQuery(): void;\n\n  onChange(value: InstanaQuery): void;\n\n  updateMetrics(metrics: SelectableValue[]): void;\n\n  datasource: DataSource;\n}\n\nlet isUnmounting = false;\n\nexport class ApplicationServiceEndpointMetrics extends React.Component<Props, ApplicationServiceEndpointMetricsState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      applications: [],\n      services: [],\n      endpoints: [],\n      value: {\n        value: 2,\n        imgUrl: '../../resources/dest.png',\n      },\n    };\n  }\n\n  componentDidMount() {\n    isUnmounting = false;\n    this.loadApplications();\n    this.loadServices();\n    this.loadEndpoints();\n\n    const { datasource } = this.props;\n    this.props.updateMetrics(datasource.dataSourceApplication.getApplicationMetricsCatalog());\n  }\n\n  componentWillUnmount() {\n    isUnmounting = true;\n  }\n\n  loadApplications() {\n    const { query, onChange, datasource } = this.props;\n    datasource.fetchApplications().then((applications) => {\n      if (!isUnmounting) {\n        if (!_.find(applications, { key: null })) {\n          applications.unshift({ key: null, label: ALL_APPLICATIONS });\n        }\n        this.setState({\n          applications: applications,\n        });\n\n        // replace removed application and preselect entity\n        if (query.entity && query.entity.key && !_.find(applications, (app) => app.key === query.entity.key)) {\n          query.entity = applications[0];\n        } else if ((!query.entity || !query.entity.key) && applications) {\n          query.entity = applications[0];\n        }\n\n        onChange(query);\n      }\n    });\n  }\n\n  loadServices() {\n    const { query, onChange, datasource } = this.props;\n    datasource.fetchServices(query).then((services) => {\n      if (!isUnmounting) {\n        if (!_.find(services, { key: null })) {\n          services.unshift({ key: null, label: ALL_SERVICES });\n        }\n        this.setState({\n          services: services,\n        });\n\n        // replace removed service and preselect service\n        if (query.service && query.service.key) {\n          if (!_.find(services, (app) => app.key === query.service.key)) {\n            query.service = services[0];\n          }\n        } else {\n          query.service = services[0];\n        }\n\n        onChange(query);\n      }\n    });\n  }\n\n  loadEndpoints() {\n    const { query, onChange, datasource } = this.props;\n    datasource.fetchEndpoints(query).then((endpoints) => {\n      if (!isUnmounting) {\n        if (!_.find(endpoints, { key: null })) {\n          endpoints.unshift({ key: null, label: ALL_ENDPOINTS });\n        }\n        this.setState({\n          endpoints: endpoints,\n        });\n\n        // replace removed endpoint and preselect endpoint\n        if (query.endpoint && query.endpoint.key) {\n          if (!_.find(endpoints, (app) => app.key === query.endpoint.key)) {\n            query.endpoint = { key: null, label: ALL_ENDPOINTS };\n          }\n        } else {\n          query.endpoint = { key: null, label: ALL_ENDPOINTS };\n        }\n\n        onChange(query);\n      }\n    });\n  }\n\n  onApplicationChange = (application: SelectableValue) => {\n    const { query, onChange, onRunQuery } = this.props;\n    query.entity = application;\n    if (application.boundaryScope !== '') {\n      //set the default boundary scope that is configured for this application\n      query.applicationBoundaryScope = application.boundaryScope;\n    } else {\n      if (query.applicationBoundaryScope !== 'ALL' && query.applicationBoundaryScope !== 'INBOUND') {\n        //if no default is set, set it to INBOUND\n        query.applicationBoundaryScope = 'INBOUND';\n      }\n    }\n\n    onChange(query);\n    this.loadServices();\n    this.loadEndpoints();\n    onRunQuery();\n  };\n\n  onServiceChange = (service: SelectableValue) => {\n    const { query, onChange, onRunQuery } = this.props;\n    query.service = service;\n    onChange(query);\n    this.loadEndpoints();\n    onRunQuery();\n  };\n\n  onEndpointChange = (endpoint: SelectableValue) => {\n    const { query, onChange, onRunQuery } = this.props;\n    query.endpoint = endpoint;\n    onChange(query);\n    onRunQuery();\n  };\n\n  debouncedRunQuery = _.debounce(this.props.onRunQuery, 500);\n\n  onGroupByTagSecondLevelKeyChange = (eventItem: ChangeEvent<HTMLInputElement>) => {\n    const { query, onChange } = this.props;\n    query.groupbyTagSecondLevelKey = eventItem.currentTarget.value;\n    onChange(query);\n\n    // onRunQuery with 500ms delay after last debounce\n    this.debouncedRunQuery();\n  };\n\n  onApplicationBoundaryScopeChange = (scope: string) => {\n    const { query, onChange, onRunQuery } = this.props;\n    query.applicationBoundaryScope = scope;\n    onChange(query);\n    this.loadServices();\n    this.loadEndpoints();\n    onRunQuery();\n  };\n\n  render() {\n    const { query } = this.props;\n\n    return (\n      <div className={'gf-form'}>\n        <InlineFormLabel className={'query-keyword'} width={14} tooltip={'Select your application.'}>\n          Application\n        </InlineFormLabel>\n        <ApplicationBoundaryScope\n          value={query.applicationBoundaryScope}\n          disabled={!query.entity?.key}\n          onChange={this.onApplicationBoundaryScopeChange}\n        />\n        <Select\n          menuPlacement={'bottom'}\n          width={0}\n          isSearchable={true}\n          value={query.entity}\n          options={this.state.applications}\n          onChange={this.onApplicationChange}\n        />\n\n        <InlineFormLabel className={'query-keyword'} width={6} tooltip={'Select your service.'}>\n          Service\n        </InlineFormLabel>\n        <Select\n          menuPlacement={'bottom'}\n          width={0}\n          isSearchable={true}\n          value={query.service}\n          options={this.state.services}\n          onChange={this.onServiceChange}\n        />\n\n        <InlineFormLabel className={'query-keyword'} width={6} tooltip={'Select your endpoint.'}>\n          Endpoint\n        </InlineFormLabel>\n        <Select\n          menuPlacement={'bottom'}\n          width={0}\n          isSearchable={true}\n          value={query.endpoint}\n          options={this.state.endpoints}\n          onChange={this.onEndpointChange}\n        />\n\n        <div style={!query.showGroupBySecondLevel ? { display: 'none' } : {}}>\n          <Input value={query.groupbyTagSecondLevelKey} onChange={this.onGroupByTagSecondLevelKeyChange} />\n        </div>\n      </div>\n    );\n  }\n}\n","import '../plugin.css';\nimport { InlineFormLabel, Input, Select } from '@grafana/ui';\nimport React, { ChangeEvent } from 'react';\nimport { DataSource } from '../../datasources/DataSource';\nimport FormWrapper from '../FormField/FormWrapper';\nimport { InstanaQuery } from '../../types/instana_query';\nimport { PLEASE_SPECIFY } from '../../GlobalVariables';\nimport { SelectableValue } from '@grafana/data';\nimport _ from 'lodash';\nimport call_to_entities from '../../lists/apply_call_to_entities';\n\ninterface AnalyzeState {\n  entityTypes: SelectableValue[];\n}\ninterface Props {\n  query: InstanaQuery;\n  groups: SelectableValue[];\n  updateGroups(groups: SelectableValue[]): void;\n  onRunQuery(): void;\n  onChange(value: InstanaQuery): void;\n  updateMetrics(metrics: any): void;\n  datasource: DataSource;\n}\nlet isUnmounting = false;\nexport class Explore extends React.Component<Props, AnalyzeState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      entityTypes: [],\n    };\n  }\n  componentDidMount() {\n    const { query, datasource, onChange } = this.props;\n    isUnmounting = false;\n    datasource.getEntityTypes().then((entityTypes: SelectableValue[]) => {\n      if (!isUnmounting) {\n        if (!_.find(entityTypes, { key: null })) {\n          entityTypes.unshift({ key: null, label: PLEASE_SPECIFY });\n        }\n        this.setState({\n          entityTypes: entityTypes,\n        });\n        if (!query.entity || (!query.entity.key && !query.entity.label)) {\n          query.entity = entityTypes[0];\n        }\n        if (!query.callToEntity) {\n          query.callToEntity = call_to_entities[0];\n        }\n        if (!query.applicationCallToEntity) {\n          query.applicationCallToEntity = call_to_entities[0];\n        }\n        onChange(query);\n      }\n    });\n  }\n  componentWillUnmount() {\n    isUnmounting = true;\n  }\n  onEntityChange = (entityType: SelectableValue) => {\n    const { query, datasource, onChange, onRunQuery } = this.props;\n    query.entity = entityType;\n    onChange(query);\n    onRunQuery();\n    datasource.fetchMetricsForEntityType(query).then((result: any) => {\n      this.props.updateMetrics(result);\n    });\n  };\n  onInfraCallToEntityChange = (applicationCallToEntity: string) => {\n    const { query, onChange, onRunQuery } = this.props;\n    query.applicationCallToEntity = applicationCallToEntity;\n    onChange(query);\n    onRunQuery();\n  };\n  debouncedRunQuery = _.debounce(this.props.onRunQuery, 500);\n  onCallToEntityChange = (eventItem: ChangeEvent<HTMLInputElement>) => {\n    const { query, onChange } = this.props;\n    query.callToEntity = eventItem.currentTarget.value;\n    onChange(query);\n    // onRunQuery with 500ms delay after last debounce\n    this.debouncedRunQuery();\n  };\n  onGroupByTagSecondLevelKeyChange = (eventItem: ChangeEvent<HTMLInputElement>) => {\n    const { query, onChange } = this.props;\n    query.group = {\n      key: eventItem.currentTarget.value,\n      label: eventItem.currentTarget.value,\n      type: 'STRING',\n    };\n    query.groupbyTagSecondLevelKey = eventItem.currentTarget.value;\n    onChange(query);\n    // onRunQuery with 500ms delay after last debounce\n    this.debouncedRunQuery();\n  };\n  render() {\n    const { query } = this.props;\n    return (\n      <div className={'gf-form'}>\n        <FormWrapper stretch={true}>\n          <InlineFormLabel className={'query-keyword'} width={14} tooltip={'Select your Entity Type.'}>\n            Entity types\n          </InlineFormLabel>\n          <Select\n            menuPlacement={'bottom'}\n            width={0}\n            isSearchable={true}\n            value={query.entity}\n            options={this.state.entityTypes}\n            onChange={this.onEntityChange}\n          />\n        </FormWrapper>\n        <FormWrapper stretch={true}>\n          <InlineFormLabel className={'query-keyword'} width={7} tooltip={'Enter the Group by tag.'}>\n            Group by\n          </InlineFormLabel>\n          <Input\n            type={'text'}\n            value={query.groupbyTagSecondLevelKey}\n            onChange={this.onGroupByTagSecondLevelKeyChange}\n          />\n        </FormWrapper>\n      </div>\n    );\n  }\n}\n","export default [\n  // STRING\n  { key: 'EQUALS', label: 'equals', type: 'STRING' },\n  { key: 'NOT_EQUAL', label: 'does not equal', type: 'STRING' },\n  { key: 'CONTAINS', label: 'contains', type: 'STRING' },\n  { key: 'NOT_CONTAIN', label: 'does not contain', type: 'STRING' },\n  { key: 'NOT_EMPTY', label: 'is present', type: 'STRING' },\n  { key: 'IS_EMPTY', label: 'is not present', type: 'STRING' },\n  { key: 'STARTS_WITH', label: 'starts with', type: 'STRING' },\n  { key: 'ENDS_WITH', label: 'ends with', type: 'STRING' },\n  { key: 'NOT_STARTS_WITH', label: 'does not start with', type: 'STRING' },\n  { key: 'NOT_ENDS_WITH', label: 'does not end with', type: 'STRING' },\n  // NUMBER\n  { key: 'EQUALS', label: '=', type: 'NUMBER' },\n  { key: 'NOT_EQUAL', label: '!=', type: 'NUMBER' },\n  { key: 'LESS_THAN', label: '<', type: 'NUMBER' },\n  { key: 'GREATER_THAN', label: '>', type: 'NUMBER' },\n  { key: 'IS_EMPTY', label: 'is empty', type: 'NUMBER' },\n  { key: 'NOT_EMPTY', label: 'is not empty', type: 'NUMBER' },\n  { key: 'LESS_OR_EQUAL_THAN', label: 'less or equal than', type: 'NUMBER' },\n  { key: 'GREATER_OR_EQUAL_THAN', label: 'greater or equal than', type: 'NUMBER' },\n  // BOOLEAN\n  { key: 'EQUALS', label: 'is', type: 'BOOLEAN' },\n  // KEY_VALUE_PAIR\n  { key: 'EQUALS', label: 'equals', type: 'KEY_VALUE_PAIR' },\n  { key: 'NOT_EQUAL', label: 'does not equal', type: 'KEY_VALUE_PAIR' },\n  { key: 'CONTAINS', label: 'contains', type: 'KEY_VALUE_PAIR' },\n  { key: 'NOT_CONTAIN', label: 'does not contain', type: 'KEY_VALUE_PAIR' },\n  { key: 'NOT_EMPTY', label: 'is present', type: 'KEY_VALUE_PAIR' },\n  { key: 'IS_EMPTY', label: 'is not present', type: 'KEY_VALUE_PAIR' },\n  { key: 'STARTS_WITH', label: 'starts with', type: 'KEY_VALUE_PAIR' },\n  { key: 'ENDS_WITH', label: 'ends with', type: 'KEY_VALUE_PAIR' },\n  { key: 'IS_BLANK', label: 'is blank', type: 'KEY_VALUE_PAIR' },\n  { key: 'NOT_BLANK', label: 'is not blank', type: 'KEY_VALUE_PAIR' },\n  // STRING_SET\n  { key: 'EQUALS', label: 'equals', type: 'STRING_SET' },\n  { key: 'NOT_EQUAL', label: 'does not equal', type: 'STRING_SET' },\n  { key: 'CONTAINS', label: 'contains', type: 'STRING_SET' },\n  { key: 'NOT_CONTAIN', label: 'does not contain', type: 'STRING_SET' },\n  { key: 'NOT_EMPTY', label: 'is present', type: 'STRING_SET' },\n  { key: 'IS_EMPTY', label: 'is not present', type: 'STRING_SET' },\n];\n","import React from 'react';\n\nimport { InlineFormLabel, TextArea, PopoverContent } from '@grafana/ui';\nimport FormWrapper from './FormWrapper';\n\ninterface State {}\n\ninterface Props {\n  label: string;\n  value: string;\n  invalid?: boolean;\n  disabled?: boolean;\n  placeholder?: string;\n  queryKeyword?: boolean;\n  labelWidth?: number | 14;\n  inputWidth?: number | 30;\n  tooltip?: PopoverContent;\n\n  onChange(event?: any): any;\n}\n\n/**\n * Default input text area including label. Input text area is grafana/ui <TextArea />.\n */\nexport default class FormTextArea extends React.Component<Props, State> {\n  constructor(props: any) {\n    super(props);\n  }\n\n  render() {\n    const { label, tooltip, queryKeyword, disabled, labelWidth = 14, inputWidth = 30, ...remainingProps } = this.props;\n\n    return (\n      <FormWrapper disabled={disabled} stretch={!inputWidth}>\n        <InlineFormLabel className={queryKeyword ? 'query-keyword' : ''} width={labelWidth} tooltip={tooltip}>\n          {label}\n        </InlineFormLabel>\n        <TextArea rows={4} width={inputWidth} disabled={disabled} {...remainingProps} />\n      </FormWrapper>\n    );\n  }\n}\n","import {\n  ANALYZE_APPLICATION_METRICS,\n  ANALYZE_MOBILE_APP_METRICS,\n  INFRASTRUCTURE_ANALYZE,\n  PLEASE_SPECIFY,\n} from '../../GlobalVariables';\nimport { Button, InlineFormLabel, Input, Select } from '@grafana/ui';\nimport React, { FormEvent } from 'react';\n\nimport { DataSource } from '../../datasources/DataSource';\nimport Entity from '../Entity/Entity';\nimport { InstanaQuery } from '../../types/instana_query';\nimport { SelectableValue } from '@grafana/data';\nimport TagFilter from '../../types/tag_filter';\nimport _ from 'lodash';\nimport call_to_entities from '../../lists/apply_call_to_entities';\nimport operators from '../../lists/operators';\nimport FormTextArea from 'components/FormField/FormTextArea';\n\ninterface FilterState {\n  textareaValue: string;\n}\n\ninterface Props {\n  query: InstanaQuery;\n  datasource: DataSource;\n  groups: SelectableValue[];\n\n  onRunQuery(): void;\n\n  onChange(value: InstanaQuery): void;\n}\n\nexport class Filters extends React.Component<Props, FilterState> {\n  OPERATOR_STRING = 'STRING';\n  OPERATOR_STRING_SET = 'STRING_SET';\n  OPERATOR_NUMBER = 'NUMBER';\n  OPERATOR_BOOLEAN = 'BOOLEAN';\n  OPERATOR_KEY_VALUE = 'KEY_VALUE_PAIR';\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      textareaValue: '',\n    };\n  }\n\n  addTagFilter = () => {\n    const { query, onChange } = this.props;\n    query.filters.push({\n      tag: query.group,\n      entity: call_to_entities[0],\n      operator: this.filterOperatorsOnType(query.group.type)[0],\n      booleanValue: false,\n      numberValue: 0,\n      stringValue: '',\n      isValid: false,\n    });\n\n    onChange(query);\n  };\n\n  removeTagFilter = (index: number) => {\n    const { query, onChange, onRunQuery } = this.props;\n    query.filters.splice(index, 1);\n\n    onChange(query);\n    onRunQuery();\n  };\n\n  filterOperatorsOnType(type: any): SelectableValue[] {\n    return _.filter(operators, (o) => o.type === type);\n  }\n\n  onGroupChange(group: SelectableValue, index: number) {\n    const { query } = this.props;\n    query.filters[index].tag = group;\n\n    let ops = this.filterOperatorsOnType(group.type);\n    if (!_.includes(ops, query.filters[index].operator)) {\n      query.filters[index].operator = ops[0];\n    }\n\n    this.validateChangeAndRun(index);\n  }\n\n  onCallToEntityChange = (callToEntity: string, index: number) => {\n    const { query } = this.props;\n    query.filters[index].entity = callToEntity;\n\n    this.validateChangeAndRun(index);\n  };\n\n  onOperatorChange = (operator: SelectableValue, index: number) => {\n    const { query } = this.props;\n    query.filters[index].operator = operator;\n\n    this.validateChangeAndRun(index);\n  };\n\n  canShowStringInput(filter: TagFilter) {\n    return (\n      filter.tag.type === this.OPERATOR_KEY_VALUE ||\n      (!filter.operator.key.includes('EMPTY') &&\n        (filter.tag.type === this.OPERATOR_STRING || filter.tag.type === this.OPERATOR_STRING_SET))\n    );\n  }\n\n  canShowNumberInput(filter: TagFilter) {\n    return filter.tag.type === this.OPERATOR_NUMBER && !filter.operator.key.includes('EMPTY');\n  }\n\n  debouncedRunQuery = _.debounce(this.props.onRunQuery, 500);\n\n  onTagFilterStringValueChange = (value: FormEvent<HTMLInputElement>, index: number) => {\n    const { query } = this.props;\n    query.filters[index].stringValue = value.currentTarget.value;\n\n    this.validateChangeAndRun(index, true);\n  };\n\n  onTagFilterNumberValueChange = (value: FormEvent<HTMLInputElement>, index: number) => {\n    const { query } = this.props;\n    query.filters[index].numberValue = value.currentTarget.valueAsNumber;\n\n    this.validateChangeAndRun(index, true);\n  };\n\n  onTagFilterBooleanValueChange(value: SelectableValue, index: number) {\n    const { query } = this.props;\n    query.filters[index].booleanValue = value.key;\n\n    this.validateChangeAndRun(index);\n  }\n\n  onFilterChange = (event: FormEvent<HTMLInputElement>) => {\n    const { query, onChange, onRunQuery } = this.props;\n    const filterValue = event.currentTarget.value;\n    this.setState({\n      textareaValue: event.currentTarget.value,\n    });\n    if (filterValue.trim() !== '') {\n      query.filters = JSON.parse(filterValue);\n    } else {\n      query.filters = [];\n    }\n    onChange(query);\n    this.debouncedRunQuery = _.debounce(this.props.onRunQuery, 500);\n    onRunQuery();\n  };\n\n  validateChangeAndRun(index: number, runDebounced = false) {\n    const { query, onChange, onRunQuery } = this.props;\n    if (query.filters[index].tag) {\n      if (\n        query.filters[index].operator.key.includes('EMPTY') &&\n        (this.OPERATOR_STRING === query.filters[index].tag.type ||\n          this.OPERATOR_STRING_SET === query.filters[index].tag.type)\n      ) {\n        query.filters[index].isValid = true;\n        // to avoid sending value with query.filters[index] operators that do not require a value (such as is-present/is-not-present)\n        query.filters[index].stringValue = '';\n        query.filters[index].numberValue = 0;\n        query.filters[index].booleanValue = true;\n      } else if (\n        (this.OPERATOR_STRING === query.filters[index].tag.type ||\n          this.OPERATOR_STRING_SET === query.filters[index].tag.type) &&\n        query.filters[index].stringValue\n      ) {\n        query.filters[index].isValid = true;\n      } else if (\n        query.filters[index].operator.key.includes('EMPTY') &&\n        this.OPERATOR_KEY_VALUE === query.filters[index].tag.type &&\n        query.filters[index].stringValue\n      ) {\n        query.filters[index].isValid = true;\n      } else if (\n        this.OPERATOR_KEY_VALUE === query.filters[index].tag.type &&\n        query.filters[index].stringValue &&\n        query.filters[index].stringValue.includes('=')\n      ) {\n        query.filters[index].isValid = true;\n      } else if (this.OPERATOR_NUMBER === query.filters[index].tag.type && !isNaN(query.filters[index].numberValue)) {\n        query.filters[index].isValid = true;\n      } else if (\n        this.OPERATOR_BOOLEAN === query.filters[index].tag.type &&\n        query.filters[index].booleanValue !== undefined\n      ) {\n        query.filters[index].isValid = true;\n      }\n    } else {\n      query.filters[index].isValid = false;\n    }\n\n    onChange(query);\n    if (runDebounced) {\n      // onRunQuery with 500ms delay after last debounce\n      this.debouncedRunQuery();\n    } else {\n      onRunQuery();\n    }\n  }\n\n  render() {\n    const { query, groups } = this.props;\n    if (query.metricCategory.key === INFRASTRUCTURE_ANALYZE) {\n      return (\n        <div className={'gf-form'}>\n          <FormTextArea\n            queryKeyword\n            inputWidth={0}\n            label={'TagFilterExpression'}\n            tooltip={'Enter the tagFilterExpression here '}\n            placeholder=\"[{Enter the filter JSON here}]\"\n            value={this.state.textareaValue}\n            onChange={(event) => this.onFilterChange(event)}\n          />\n        </div>\n      );\n    } else {\n      let listFilter = query.filters?.map((singleFilter, index) => {\n        return (\n          <div key={'filter_' + index} className={'gf-form'}>\n            <InlineFormLabel className={'query-keyword'} width={14} tooltip={'Filter by tag.'}>\n              {index + 1}. filter\n            </InlineFormLabel>\n            {query.metricCategory.key === ANALYZE_APPLICATION_METRICS && ANALYZE_MOBILE_APP_METRICS && (\n              <Entity\n                value={query.filters[index].entity}\n                onChange={(callToEntity: string) => this.onCallToEntityChange(callToEntity, index)}\n              />\n            )}\n            <Select\n              menuPlacement={'bottom'}\n              width={30}\n              isSearchable={true}\n              value={query.filters[index].tag}\n              options={groups}\n              onChange={(group) => this.onGroupChange(group, index)}\n            />\n            <Select\n              menuPlacement={'bottom'}\n              width={20}\n              isSearchable={true}\n              value={query.filters[index].operator}\n              options={this.filterOperatorsOnType(query.filters[index].tag.type)}\n              onChange={(operator) => this.onOperatorChange(operator, index)}\n            />\n\n            {this.canShowStringInput(query.filters[index]) && (\n              <Input\n                width={30}\n                value={query.filters[index].stringValue}\n                placeholder={query.filters[index].tag.type === 'KEY_VALUE_PAIR' ? 'key=value' : PLEASE_SPECIFY}\n                onChange={(event) => this.onTagFilterStringValueChange(event, index)}\n              />\n            )}\n\n            {this.canShowNumberInput(query.filters[index]) && (\n              <Input\n                type={'number'}\n                width={30}\n                value={query.filters[index].numberValue}\n                placeholder={PLEASE_SPECIFY}\n                onChange={(event) => this.onTagFilterNumberValueChange(event, index)}\n              />\n            )}\n\n            {query.filters[index].tag.type === 'BOOLEAN' && (\n              <Select\n                menuPlacement={'bottom'}\n                width={30}\n                isSearchable={true}\n                onChange={(e) => this.onTagFilterBooleanValueChange(e, index)}\n                value={{ key: '' + query.filters[index].booleanValue, label: '' + query.filters[index].booleanValue }}\n                options={[\n                  { key: false, label: 'false' },\n                  { key: true, label: 'true' },\n                ]}\n              />\n            )}\n\n            <Button variant={'secondary'} onClick={() => this.removeTagFilter(index)}>\n              -\n            </Button>\n          </div>\n        );\n      });\n\n      return (\n        <div>\n          {listFilter}\n\n          <div className={'gf-form'}>\n            <InlineFormLabel width={14} tooltip={'Add an additional tag filter.'}>\n              Add filter\n            </InlineFormLabel>\n            <Button variant={'secondary'} onClick={this.addTagFilter}>\n              +\n            </Button>\n            <div hidden={!query.showWarningCantShowAllResults}>\n              <InlineFormLabel width={12} tooltip={'Add Filter to narrow down the data.'}>\n                ⚠️ Can&apos;t show all results\n              </InlineFormLabel>\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n","import React from 'react';\n\nimport { InlineFormLabel, Select, PopoverContent } from '@grafana/ui';\nimport FormWrapper from './FormWrapper';\nimport { SelectableValue } from '@grafana/data';\n\ninterface State {}\n\ninterface Props {\n  label: string;\n  value: SelectableValue;\n  options: any;\n  queryKeyword?: boolean;\n  disabled?: boolean;\n  defaultValue?: SelectableValue;\n  noOptionsMessage?: string;\n  searchable?: boolean | true;\n  labelWidth?: number | 14;\n  inputWidth?: number | 30;\n  placeholder?: string | '-';\n  tooltip?: PopoverContent;\n\n  onChange(event?: any): any;\n}\n\n/**\n * Default select field including label. Select element is grafana/ui <Select />.\n */\nexport default class FormSelect extends React.Component<Props, State> {\n  constructor(props: any) {\n    super(props);\n  }\n\n  render() {\n    const {\n      label,\n      tooltip,\n      searchable = true,\n      disabled,\n      queryKeyword,\n      placeholder = '-',\n      labelWidth = 14,\n      inputWidth = 30,\n      ...remainingProps\n    } = this.props;\n\n    return (\n      <FormWrapper disabled={disabled} stretch={!inputWidth}>\n        <InlineFormLabel className={queryKeyword ? 'query-keyword' : ''} width={labelWidth} tooltip={tooltip}>\n          {label}\n        </InlineFormLabel>\n        <Select\n          menuPlacement={'bottom'}\n          disabled={disabled}\n          width={inputWidth}\n          isSearchable={searchable}\n          placeholder={placeholder}\n          {...remainingProps}\n        />\n      </FormWrapper>\n    );\n  }\n}\n","import React, { ChangeEvent } from 'react';\n\nimport { DataSource } from '../../datasources/DataSource';\nimport { InstanaQuery } from '../../types/instana_query';\nimport { PLEASE_SPECIFY } from '../../GlobalVariables';\nimport FormSelect from '../FormField/FormSelect';\nimport { SelectableValue } from '@grafana/data';\nimport FormInput from '../FormField/FormInput';\nimport _ from 'lodash';\n\ninterface QueryTypeState {}\n\ninterface Props {\n  query: InstanaQuery;\n  datasource: DataSource;\n  queryTypes: SelectableValue[];\n  onRunQuery(): void;\n  loadEntityTypes(filterResult?: boolean): void;\n  onChange(value: InstanaQuery): void;\n  updateMetrics(metrics: SelectableValue[]): void;\n  updateQueryTypes(types: SelectableValue[]): void;\n}\n\nexport class QueryType extends React.Component<Props, QueryTypeState> {\n  constructor(props: any) {\n    super(props);\n  }\n\n  componentDidMount() {\n    const { query, loadEntityTypes } = this.props;\n    if (query.entityQuery) {\n      loadEntityTypes();\n    }\n  }\n\n  onQueryChange = (eventItem: ChangeEvent<HTMLInputElement>) => {\n    const { query, onChange, updateQueryTypes } = this.props;\n    if (eventItem.currentTarget && eventItem.currentTarget.value) {\n      query.entityQuery = eventItem.currentTarget.value;\n    } else {\n      updateQueryTypes([]);\n      query.entityQuery = '';\n      query.entityType = { key: null, label: '-' };\n    }\n\n    onChange(query);\n\n    // loadEntityTypes with 500ms delay after last debounce\n    this.debouncedEntityTypes();\n  };\n\n  onTypeChange = (eventItem: SelectableValue) => {\n    const { query, datasource, onChange } = this.props;\n    query.entityType = eventItem;\n    onChange(query);\n\n    datasource.dataSourceInfrastructure\n      .getMetricsCatalog(query.entityType, query.metricCategory.key)\n      .then((results) => {\n        this.props.updateMetrics(results);\n      });\n  };\n\n  debouncedEntityTypes = _.debounce(this.props.loadEntityTypes, 500);\n\n  render() {\n    const { query, queryTypes } = this.props;\n\n    return (\n      <div className={'gf-form'}>\n        <FormInput\n          queryKeyword\n          inputWidth={0}\n          label={'Query'}\n          tooltip={\n            <div>\n              Specify a query for the entities you wish to plot. Use the dynamic focus syntax:\n              <a href=\"https://www.ibm.com/docs/en/instana-observability/current?topic=instana-filtering-dynamic-focus#syntax\">\n                https://www.ibm.com/docs/en/instana-observability/current?topic=instana-filtering-dynamic-focus#syntax\n              </a>\n            </div>\n          }\n          value={query.entityQuery}\n          placeholder={PLEASE_SPECIFY}\n          onChange={this.onQueryChange}\n        />\n\n        <FormSelect\n          queryKeyword\n          labelWidth={6}\n          label={'Type'}\n          tooltip={'Select an entity type for a list of available metrics.'}\n          noOptionsMessage={'No types found with query'}\n          value={query.entityType}\n          options={queryTypes}\n          onChange={this.onTypeChange}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport { DataSource } from '../../datasources/DataSource';\nimport { InstanaQuery } from '../../types/instana_query';\nimport { SelectableValue } from '@grafana/data';\nimport { QueryType } from './QueryType';\n\ninterface InfrastructureBuiltInState {}\n\ninterface Props {\n  query: InstanaQuery;\n  datasource: DataSource;\n  queryTypes: SelectableValue[];\n  onRunQuery(): void;\n  loadEntityTypes(filterResult?: boolean): void;\n  onChange(value: InstanaQuery): void;\n  updateMetrics(metrics: SelectableValue[]): void;\n  updateQueryTypes(types: SelectableValue[]): void;\n}\n\nlet isUnmounting = false;\n\nexport class Infrastructure extends React.Component<Props, InfrastructureBuiltInState> {\n  constructor(props: any) {\n    super(props);\n  }\n\n  componentDidMount() {\n    const { query, onChange, datasource } = this.props;\n    isUnmounting = false;\n\n    if (query.entityQuery && query.entityType && query.entityType.key) {\n      datasource.dataSourceInfrastructure\n        .getMetricsCatalog(query.entityType, query.metricCategory.key)\n        .then((results) => {\n          if (!isUnmounting) {\n            this.props.updateMetrics(results);\n          }\n        });\n    } else {\n      query.metric = {\n        key: null,\n        label: '-',\n      };\n    }\n\n    onChange(query);\n  }\n\n  componentWillUnmount() {\n    isUnmounting = true;\n  }\n\n  render() {\n    const {\n      query,\n      onRunQuery,\n      onChange,\n      updateMetrics,\n      loadEntityTypes,\n      datasource,\n      queryTypes,\n      updateQueryTypes,\n    } = this.props;\n\n    return (\n      <QueryType\n        query={query}\n        onChange={onChange}\n        queryTypes={queryTypes}\n        onRunQuery={onRunQuery}\n        datasource={datasource}\n        updateMetrics={updateMetrics}\n        loadEntityTypes={loadEntityTypes}\n        updateQueryTypes={updateQueryTypes}\n      />\n    );\n  }\n}\n","import React from 'react';\n\nimport {\n  BUILT_IN_METRICS,\n  CUSTOM_METRICS,\n  ANALYZE_APPLICATION_METRICS,\n  INFRASTRUCTURE_ANALYZE,\n} from '../../GlobalVariables';\nimport { DataSource } from '../../datasources/DataSource';\nimport { InstanaQuery } from '../../types/instana_query';\nimport max_metrics from '../../lists/max_metrics';\nimport FormSelect from '../FormField/FormSelect';\nimport FormSwitch from '../FormField/FormSwitch';\nimport { SelectableValue } from '@grafana/data';\nimport _ from 'lodash';\n\ninterface MetricState {\n  possibleTimeIntervals: SelectableValue[];\n  possibleAggregations: SelectableValue[];\n}\n\ninterface Props {\n  query: InstanaQuery;\n  datasource: DataSource;\n  availableMetrics: SelectableValue[];\n\n  updateMetrics(metrics: SelectableValue[]): void;\n\n  onRunQuery(): void;\n\n  onChange(value: InstanaQuery): void;\n}\n\nexport default class Metric extends React.Component<Props, MetricState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      possibleTimeIntervals: [],\n      possibleAggregations: [],\n    };\n  }\n\n  componentDidMount() {\n    const { query, datasource, onChange } = this.props;\n\n    if (\n      !query.timeInterval ||\n      !query.timeInterval.key ||\n      !datasource.availableTimeIntervals.find((i) => i.key === query.timeInterval.key)\n    ) {\n      query.timeInterval = datasource.getDefaultTimeInterval(query);\n    }\n\n    onChange(query);\n  }\n\n  onMetricChange = (metric: SelectableValue) => {\n    const { query, onRunQuery, onChange } = this.props;\n    query.metric = metric;\n\n    if (query.metric && query.metric.key && !_.includes(query.metric.aggregations, query.aggregation)) {\n      query.aggregation = query.metric.aggregations[0];\n    }\n\n    if (query.displayMaxMetricValue && !this.canShowMaxMetricValue()) {\n      query.displayMaxMetricValue = false;\n    }\n\n    query.allMetrics = [];\n    query.showAllMetrics = false;\n\n    onChange(query);\n    onRunQuery();\n  };\n\n  canShowMaxMetricValue() {\n    const { query } = this.props;\n    return (\n      query.entityType &&\n      query.entityType.key === 'host' &&\n      query.metric &&\n      _.find(max_metrics, (m) => m.key === query.metric.key)\n    );\n  }\n\n  onTimeIntervalChange = (timeInterval: SelectableValue) => {\n    const { query, onRunQuery, onChange } = this.props;\n    query.timeInterval = timeInterval;\n    onChange(query);\n    onRunQuery();\n  };\n\n  onAggregationChange = (aggregation: SelectableValue) => {\n    const { query, onRunQuery, onChange } = this.props;\n    query.aggregation = aggregation;\n    onChange(query);\n    onRunQuery();\n  };\n\n  onShowMaxValueChange = (event?: React.SyntheticEvent<HTMLInputElement>) => {\n    const { query, onChange, onRunQuery } = this.props;\n    if (event && event.currentTarget) {\n      query.displayMaxMetricValue = event.currentTarget.checked;\n      onChange(query);\n      onRunQuery();\n    }\n  };\n\n  onShowAllMetricsChange = (event?: React.SyntheticEvent<HTMLInputElement>) => {\n    const { query, onChange, onRunQuery } = this.props;\n    if (event && event.currentTarget) {\n      query.showAllMetrics = event.currentTarget.checked;\n      if (query.showAllMetrics) {\n        query.metric = { key: null, label: `Displaying ${this.props.availableMetrics.length} metrics` };\n        query.allMetrics = this.props.availableMetrics;\n      }\n      onChange(query);\n      onRunQuery();\n    }\n  };\n\n  canShowAggregation() {\n    const { query } = this.props;\n    return query.metricCategory.key >= ANALYZE_APPLICATION_METRICS;\n  }\n\n  canSelectAggregation() {\n    const { query } = this.props;\n    return query.metric && query.metric.aggregations && query.metric.aggregations.length > 1;\n  }\n\n  render() {\n    const { query, datasource } = this.props;\n\n    return (\n      <div className={'gf-form'}>\n        <FormSelect\n          queryKeyword\n          disabled={query.useFreeTextMetrics}\n          inputWidth={0}\n          label={'Metric'}\n          tooltip={'Select the metric you wish to plot.'}\n          value={query.metric}\n          noOptionsMessage={'No metrics found'}\n          options={this.props.availableMetrics}\n          onChange={this.onMetricChange}\n        />\n\n        {query.metricCategory.key === BUILT_IN_METRICS && (\n          <FormSwitch\n            queryKeyword\n            disabled={!this.canShowMaxMetricValue()}\n            labelWidth={9}\n            label={'Show max value'}\n            tooltip={\n              \"Displays the maximal value of current metric. Supported for 'Type=Host' with cpu.used, \" +\n              'memory.used and openFiles.used only.'\n            }\n            value={query.displayMaxMetricValue}\n            onChange={this.onShowMaxValueChange}\n          />\n        )}\n\n        {query.metricCategory.key === CUSTOM_METRICS && (\n          <FormSwitch\n            queryKeyword\n            disabled={!query.canShowAllMetrics}\n            labelWidth={9}\n            label={'Show all metrics'}\n            tooltip={\n              'You have the option to show all metrics in the graph once the amount of possible, selectable ' +\n              'metrics is between 1 and 5.'\n            }\n            value={query.showAllMetrics}\n            onChange={this.onShowAllMetricsChange}\n          />\n        )}\n\n        {this.canShowAggregation() && (\n          <FormSelect\n            queryKeyword\n            disabled={!this.canSelectAggregation()}\n            labelWidth={7}\n            inputWidth={12}\n            label={'Aggregation'}\n            tooltip={'Select a metric aggregation.'}\n            value={query.aggregation}\n            options={query.metric.aggregations}\n            onChange={this.onAggregationChange}\n          />\n        )}\n\n        {query.metricCategory.key !== INFRASTRUCTURE_ANALYZE && (\n          <FormSelect\n            queryKeyword\n            disabled={datasource.availableTimeIntervals.length <= 1}\n            labelWidth={5}\n            inputWidth={12}\n            label={'Rollup'}\n            tooltip={'Select the rollup value.'}\n            value={query.timeInterval}\n            options={datasource.availableTimeIntervals}\n            onChange={this.onTimeIntervalChange}\n          />\n        )}\n      </div>\n    );\n  }\n}\n","import React, { ChangeEvent } from 'react';\n\nimport { PLEASE_SPECIFY } from '../../../GlobalVariables';\nimport { DataSource } from '../../../datasources/DataSource';\nimport { InstanaQuery } from '../../../types/instana_query';\nimport { Button, InlineFormLabel } from '@grafana/ui';\nimport FormInput from '../../FormField/FormInput';\nimport { SelectableValue } from '@grafana/data';\n\ninterface MetricFilterState {\n  customFilters: string[];\n}\n\ninterface Props {\n  query: InstanaQuery;\n  datasource: DataSource;\n  availableMetrics: SelectableValue[];\n  onFilterChange(customFilters: string[]): void;\n  onRunQuery(): void;\n  onChange(value: InstanaQuery): void;\n}\n\nexport class MetricFilter extends React.Component<Props, MetricFilterState> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      customFilters: [],\n    };\n  }\n\n  componentDidMount() {\n    const { query } = this.props;\n    this.setState({ customFilters: query.customFilters });\n  }\n\n  onFilterChange = (eventItem: ChangeEvent<HTMLInputElement>, index: number) => {\n    const customFilters: string[] = this.state.customFilters;\n    customFilters[index] = eventItem.currentTarget.value;\n    this.setState({ customFilters: customFilters });\n\n    this.props.onFilterChange(customFilters);\n  };\n\n  addCustomFilter = () => {\n    let customFilters = this.state.customFilters;\n    customFilters.push('');\n    this.setState({ customFilters: customFilters });\n\n    const { query, onChange } = this.props;\n    query.customFilters = customFilters;\n    onChange(query);\n  };\n\n  removeCustomFilter = (index: number) => {\n    let customFilters: string[] = this.state.customFilters;\n    customFilters.splice(index, 1);\n    this.setState({ customFilters: customFilters });\n\n    this.props.onFilterChange(customFilters);\n  };\n\n  render() {\n    let filter = null;\n    let listFilter = this.state.customFilters.map((filters, index) => {\n      filter = (\n        <div className={'gf-form'}>\n          <FormInput\n            label={index + 1 + '. filter metric select'}\n            value={this.state.customFilters[index]}\n            placeholder={PLEASE_SPECIFY}\n            onChange={(event) => this.onFilterChange(event, index)}\n            tooltip={'Type to suggest metrics.'}\n          />\n          <Button variant={'secondary'} onClick={() => this.removeCustomFilter(index)}>\n            -\n          </Button>\n        </div>\n      );\n      return filter;\n    });\n\n    return (\n      <div>\n        {listFilter}\n\n        <div className={'gf-form'}>\n          <InlineFormLabel width={14} tooltip={'Add an additional metric select filter.'}>\n            Add filter metric select\n          </InlineFormLabel>\n          <Button variant={'secondary'} onClick={this.addCustomFilter}>\n            +\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n","export default [\n  { key: 'session_start', label: 'Session Starts' },\n  { key: 'view_change', label: 'View Transitions' },\n  { key: 'crash', label: 'Crashes' },\n  { key: 'http_request', label: 'HTTP Requests' },\n  { key: 'custom', label: 'Custom Events' },\n];\n","import { ALL_MOBILE_APPS, ANALYZE_MOBILE_APP_METRICS } from '../../GlobalVariables';\nimport React, { ChangeEvent } from 'react';\n\nimport { DataSource } from '../../datasources/DataSource';\nimport FormSelect from '../FormField/FormSelect';\nimport { Input } from '@grafana/ui';\nimport { InstanaQuery } from '../../types/instana_query';\nimport { SelectableValue } from '@grafana/data';\nimport _ from 'lodash';\nimport beacon_types from '../../lists/beacon_types_mobile_app';\n\ninterface MobileAppMetricsState {\n  mobileapps: SelectableValue[];\n}\n\ninterface Props {\n  query: InstanaQuery;\n  groups: SelectableValue[];\n  datasource: DataSource;\n\n  updateGroups(groups: SelectableValue[]): void;\n  onRunQuery(): void;\n  onChange(value: InstanaQuery): void;\n  updateMetrics(metrics: SelectableValue[]): void;\n  filterMetricsOnType(type: string): any;\n}\n\nlet isUnmounting = false;\n\nexport class MobileAppMetrics extends React.Component<Props, MobileAppMetricsState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      mobileapps: [],\n    };\n  }\n\n  componentDidMount() {\n    const { query, datasource, onChange } = this.props;\n    isUnmounting = false;\n    datasource.fetchMobileapp().then((mobileapps) => {\n      if (!isUnmounting) {\n        if (!_.find(mobileapps, { key: null })) {\n          mobileapps.unshift({ key: null, label: ALL_MOBILE_APPS });\n        }\n\n        this.setState({\n          mobileapps: mobileapps,\n        });\n\n        if ((!query.entity || !query.entity.key) && mobileapps) {\n          query.entity = mobileapps[0];\n        } else if (query.entity && !_.find(mobileapps, ['key', query.entity.key])) {\n          query.entity = mobileapps[0];\n        }\n\n        onChange(query);\n      }\n    });\n\n    datasource.dataSourceMobileapp.getMobileappTags().then((mobileappTags: any) => {\n      if (!isUnmounting) {\n        this.props.updateGroups(_.sortBy(mobileappTags, 'key'));\n\n        // select a meaningful default group\n        if (!query.group || !query.group.key) {\n          query.group = _.find(mobileappTags, ['key', 'beacon.page.name']);\n          onChange(query);\n        }\n      }\n    });\n\n    if (!query.entityType || !query.entityType.key) {\n      query.entityType = beacon_types[0];\n      onChange(query);\n    }\n\n    datasource.dataSourceMobileapp.getMobileappMetricsCatalog().then((mobileappMetrics: any) => {\n      if (!isUnmounting) {\n        // store all available metrics first and filter by type afterwards\n        this.props.updateMetrics(mobileappMetrics);\n        this.props.filterMetricsOnType(query.entityType.key);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    isUnmounting = true;\n  }\n\n  onMobileappChange = (mobileapp: SelectableValue) => {\n    const { query, onChange, onRunQuery } = this.props;\n    query.entity = mobileapp;\n    onChange(query);\n    onRunQuery();\n  };\n\n  onBeaconTypeChange = (type: SelectableValue) => {\n    const { query, onChange, filterMetricsOnType } = this.props;\n    query.entityType = type;\n    onChange(query);\n    filterMetricsOnType(query.entityType.key);\n  };\n\n  onGroupChange = (group: SelectableValue) => {\n    const { query, onChange, onRunQuery } = this.props;\n    query.group = group;\n\n    if (query.group && query.metricCategory.key === ANALYZE_MOBILE_APP_METRICS) {\n      query.showGroupBySecondLevel = query.group.type === 'KEY_VALUE_PAIR';\n    }\n    if (!query.showGroupBySecondLevel) {\n      query.groupbyTagSecondLevelKey = '';\n    }\n\n    onChange(query);\n    onRunQuery();\n  };\n\n  debouncedRunQuery = _.debounce(this.props.onRunQuery, 500);\n\n  onGroupByTagSecondLevelKeyChange = (eventItem: ChangeEvent<HTMLInputElement>) => {\n    const { query, onChange } = this.props;\n    query.groupbyTagSecondLevelKey = eventItem.currentTarget.value;\n    onChange(query);\n\n    // onRunQuery with 500ms delay after last debounce\n    this.debouncedRunQuery();\n  };\n\n  render() {\n    const { query, groups } = this.props;\n\n    return (\n      <div className={'gf-form'}>\n        <FormSelect\n          queryKeyword\n          inputWidth={0}\n          label={'Mobile-app'}\n          tooltip={'Select your mobile app.'}\n          noOptionsMessage={'No mobile apps found'}\n          value={query.entity}\n          options={this.state.mobileapps}\n          onChange={this.onMobileappChange}\n        />\n\n        <FormSelect\n          queryKeyword\n          labelWidth={6}\n          label={'Type'}\n          tooltip={'Select a beacon type.'}\n          value={query.entityType}\n          options={beacon_types}\n          onChange={this.onBeaconTypeChange}\n        />\n\n        <FormSelect\n          queryKeyword\n          labelWidth={6}\n          label={'Group by'}\n          tooltip={'Group by tag.'}\n          value={query.group}\n          options={groups}\n          onChange={this.onGroupChange}\n        />\n\n        <div style={!query.showGroupBySecondLevel ? { display: 'none' } : {}}>\n          <Input value={query.groupbyTagSecondLevelKey} onChange={this.onGroupByTagSecondLevelKeyChange} />\n        </div>\n      </div>\n    );\n  }\n}\n","export default [\n  {\n    key: 'SLI',\n    label: 'SLI',\n  },\n  {\n    key: 'Remaining Error Budget',\n    label: 'Remaining Error Budget',\n  },\n  {\n    key: 'Timeseries',\n    label: 'Timeseries',\n  },\n];\n","import React, { ChangeEvent } from 'react';\n\nimport { DataSource } from '../../datasources/DataSource';\nimport { InstanaQuery } from '../../types/instana_query';\nimport { SLO_INFORMATION } from '../../GlobalVariables';\nimport SloSpecifics from '../../lists/slo_specifics';\nimport FormSelect from '../FormField/FormSelect';\nimport { SelectableValue } from '@grafana/data';\nimport FormInput from '../FormField/FormInput';\nimport _ from 'lodash';\n\nconst MAX_VAL = 0.9999;\n\ninterface SloInformationState {\n  sloReports: SelectableValue[];\n  isValidSlo: boolean;\n}\n\ninterface Props {\n  query: InstanaQuery;\n\n  onRunQuery(): void;\n\n  onChange(value: InstanaQuery): void;\n\n  datasource: DataSource;\n}\n\nlet isUnmounting = false;\n\nexport class SloInformation extends React.Component<Props, SloInformationState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      sloReports: [],\n      isValidSlo: true,\n    };\n  }\n\n  componentDidMount() {\n    isUnmounting = false;\n    this.loadSloReports();\n    this.isValid(this.props.query.sloValue);\n  }\n\n  componentWillUnmount() {\n    isUnmounting = true;\n  }\n\n  debouncedRunQuery = _.debounce(this.props.onRunQuery, 500);\n\n  onSloChange = (slo: SelectableValue) => {\n    const { query, onRunQuery } = this.props;\n    query.sloReport = slo;\n    onRunQuery();\n  };\n\n  onSloValueChange = (sloValue: ChangeEvent<HTMLInputElement>) => {\n    const { query } = this.props;\n    query.sloValue = sloValue.currentTarget.value;\n\n    if (this.isValid(query.sloValue)) {\n      // onRunQuery with 500ms delay after last debounce\n      this.debouncedRunQuery();\n    }\n  };\n\n  onSloSpecificChange = (sloSpecific: SelectableValue) => {\n    const { query, onRunQuery } = this.props;\n    query.sloSpecific = sloSpecific;\n    onRunQuery();\n  };\n\n  isValid(val: string): boolean {\n    const valid = !val || (+val >= 0 && +val <= MAX_VAL);\n    this.setState({\n      isValidSlo: valid,\n    });\n    return valid;\n  }\n\n  shouldComponentUpdate(\n    nextProps: Readonly<Props>,\n    nextState: Readonly<SloInformationState>,\n    nextContext: any\n  ): boolean {\n    return nextProps.query.metricCategory.key === SLO_INFORMATION;\n  }\n\n  loadSloReports() {\n    const { query } = this.props;\n    this.props.datasource.getSloReports().then((sloReports) => {\n      if (!isUnmounting) {\n        this.setState({ sloReports: sloReports });\n\n        if (!query.sloReport && sloReports.length >= 1) {\n          query.sloReport = sloReports[0];\n        }\n      }\n    });\n  }\n\n  render() {\n    const { query } = this.props;\n\n    return (\n      <div className={'gf-form'}>\n        <FormSelect\n          queryKeyword\n          inputWidth={0}\n          label={'Configured SLI'}\n          tooltip={'SLI configuration used to compute error budget and SLI values.'}\n          noOptionsMessage={'No configured SLI found'}\n          value={query.sloReport}\n          options={this.state.sloReports}\n          onChange={this.onSloChange}\n        />\n\n        <FormInput\n          queryKeyword\n          labelWidth={7}\n          inputWidth={0}\n          label={'SLO'}\n          tooltip={'Type in your desired SLO threshold from 0 to ' + MAX_VAL}\n          value={query.sloValue}\n          invalid={!this.state.isValidSlo}\n          placeholder={'0.99'}\n          onChange={this.onSloValueChange}\n        />\n\n        <FormSelect\n          queryKeyword\n          labelWidth={7}\n          inputWidth={0}\n          label={'Value type'}\n          tooltip={\n            <div>\n              Select your specific SLO information:\n              <ul>\n                <li>&apos;SLI&apos; requires Gauge visualization</li>\n                <li>&apos;Remaining Error Budget&apos; requires Singlestat visualization</li>\n                <li>&apos;Timeseries&apos; drequires Bars draw mode on Graph visualization</li>\n              </ul>\n            </div>\n          }\n          value={query.sloSpecific}\n          options={SloSpecifics}\n          onChange={this.onSloSpecificChange}\n        />\n      </div>\n    );\n  }\n}\n","export default [\n  { key: 'pageLoad', label: 'Page Loads' },\n  { key: 'page_change', label: 'Page Transitions' },\n  { key: 'resourceLoad', label: 'Resources' },\n  { key: 'httpRequest', label: 'HTTP Requests' },\n  { key: 'error', label: 'Errors' },\n  { key: 'custom', label: 'Custom Events' },\n];\n","import { ALL_WEBSITES, ANALYZE_WEBSITE_METRICS } from '../../GlobalVariables';\nimport React, { ChangeEvent } from 'react';\n\nimport { DataSource } from '../../datasources/DataSource';\nimport FormSelect from '../FormField/FormSelect';\nimport { Input } from '@grafana/ui';\nimport { InstanaQuery } from '../../types/instana_query';\nimport { SelectableValue } from '@grafana/data';\nimport _ from 'lodash';\nimport beacon_types from '../../lists/beacon_types_website';\n\ninterface WebsiteMetricsState {\n  websites: SelectableValue[];\n}\n\ninterface Props {\n  query: InstanaQuery;\n  groups: SelectableValue[];\n  datasource: DataSource;\n\n  updateGroups(groups: SelectableValue[]): void;\n  onRunQuery(): void;\n  onChange(value: InstanaQuery): void;\n  updateMetrics(metrics: SelectableValue[]): void;\n  filterMetricsOnType(type: string): any;\n}\n\nlet isUnmounting = false;\n\nexport class WebsiteMetrics extends React.Component<Props, WebsiteMetricsState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      websites: [],\n    };\n  }\n\n  componentDidMount() {\n    const { query, datasource, onChange } = this.props;\n    isUnmounting = false;\n    datasource.fetchWebsites().then((websites) => {\n      if (!isUnmounting) {\n        if (!_.find(websites, { key: null })) {\n          websites.unshift({ key: null, label: ALL_WEBSITES });\n        }\n\n        this.setState({\n          websites: websites,\n        });\n\n        if ((!query.entity || !query.entity.key) && websites) {\n          query.entity = websites[0];\n        } else if (query.entity && !_.find(websites, ['key', query.entity.key])) {\n          query.entity = websites[0];\n        }\n\n        onChange(query);\n      }\n    });\n\n    datasource.dataSourceWebsite.getWebsiteTags().then((websiteTags: any) => {\n      if (!isUnmounting) {\n        this.props.updateGroups(_.sortBy(websiteTags, 'key'));\n\n        // select a meaningful default group\n        if (!query.group || !query.group.key) {\n          query.group = _.find(websiteTags, ['key', 'beacon.page.name']);\n          onChange(query);\n        }\n      }\n    });\n\n    if (!query.entityType || !query.entityType.key) {\n      query.entityType = beacon_types[0];\n      onChange(query);\n    }\n\n    datasource.dataSourceWebsite.getWebsiteMetricsCatalog().then((websiteMetrics: any) => {\n      if (!isUnmounting) {\n        // store all available metrics first and filter by type afterwards\n        this.props.updateMetrics(websiteMetrics);\n        this.props.filterMetricsOnType(query.entityType.key);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    isUnmounting = true;\n  }\n\n  onWebsiteChange = (website: SelectableValue) => {\n    const { query, onChange, onRunQuery } = this.props;\n    query.entity = website;\n    onChange(query);\n    onRunQuery();\n  };\n\n  onBeaconTypeChange = (type: SelectableValue) => {\n    const { query, onChange, filterMetricsOnType } = this.props;\n    query.entityType = type;\n    onChange(query);\n    filterMetricsOnType(query.entityType.key);\n  };\n\n  onGroupChange = (group: SelectableValue) => {\n    const { query, onChange, onRunQuery } = this.props;\n    query.group = group;\n\n    if (query.group && query.metricCategory.key === ANALYZE_WEBSITE_METRICS) {\n      query.showGroupBySecondLevel = query.group.type === 'KEY_VALUE_PAIR';\n    }\n    if (!query.showGroupBySecondLevel) {\n      query.groupbyTagSecondLevelKey = '';\n    }\n\n    onChange(query);\n    onRunQuery();\n  };\n\n  debouncedRunQuery = _.debounce(this.props.onRunQuery, 500);\n\n  onGroupByTagSecondLevelKeyChange = (eventItem: ChangeEvent<HTMLInputElement>) => {\n    const { query, onChange } = this.props;\n    query.groupbyTagSecondLevelKey = eventItem.currentTarget.value;\n    onChange(query);\n\n    // onRunQuery with 500ms delay after last debounce\n    this.debouncedRunQuery();\n  };\n\n  render() {\n    const { query, groups } = this.props;\n\n    return (\n      <div className={'gf-form'}>\n        <FormSelect\n          queryKeyword\n          inputWidth={0}\n          label={'Website'}\n          tooltip={'Select your website.'}\n          noOptionsMessage={'No websites found'}\n          value={query.entity}\n          options={this.state.websites}\n          onChange={this.onWebsiteChange}\n        />\n\n        <FormSelect\n          queryKeyword\n          labelWidth={6}\n          label={'Type'}\n          tooltip={'Select a beacon type.'}\n          value={query.entityType}\n          options={beacon_types}\n          onChange={this.onBeaconTypeChange}\n        />\n\n        <FormSelect\n          queryKeyword\n          labelWidth={6}\n          label={'Group by'}\n          tooltip={'Group by tag.'}\n          value={query.group}\n          options={groups}\n          onChange={this.onGroupChange}\n        />\n\n        <div style={!query.showGroupBySecondLevel ? { display: 'none' } : {}}>\n          <Input value={query.groupbyTagSecondLevelKey} onChange={this.onGroupByTagSecondLevelKeyChange} />\n        </div>\n      </div>\n    );\n  }\n}\n","import '../instana-grafana.css';\n\nimport {\n  ANALYZE_APPLICATION_METRICS,\n  ANALYZE_MOBILE_APP_METRICS,\n  ANALYZE_WEBSITE_METRICS,\n  APPLICATION_SERVICE_ENDPOINT_METRICS,\n  BUILT_IN_METRICS,\n  CUSTOM_METRICS,\n  INFRASTRUCTURE_ANALYZE,\n  SLO_INFORMATION,\n} from '../GlobalVariables';\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport React, { PureComponent } from 'react';\n\nimport AdvancedSettings from './AdvancedSettings/AdvancedSettings';\nimport AggregationFunctions from '../lists/aggregation_function';\nimport { ApplicationCallsMetrics } from './Analyze/ApplicationCallsMetrics';\nimport { ApplicationServiceEndpointMetrics } from './ApplicationServiceEndpointMetrics/ApplicationServiceEndpointMetrics';\nimport { Badge } from '@grafana/ui';\nimport { DataSource } from '../datasources/DataSource';\nimport { Explore } from './Infrastructure/Explore';\nimport { Filters } from './Analyze/Filter';\nimport FormSelect from './FormField/FormSelect';\nimport { Infrastructure } from './Infrastructure/Infrastructure';\nimport { InstanaOptions } from '../types/instana_options';\nimport { InstanaQuery } from '../types/instana_query';\nimport Metric from './Metric/Metric';\nimport { MetricFilter } from './Infrastructure/Custom/MetricFilter';\nimport { MobileAppMetrics } from './Analyze/MobileAppMetrics';\nimport { SloInformation } from './SLOInformation/SloInformation';\nimport { WebsiteMetrics } from './Analyze/WebsiteMetrics';\nimport _ from 'lodash';\nimport metricCategories from '../lists/metric_categories';\nimport migrate from '../migration';\nimport { readTime } from '../util/time_util';\n\ntype Props = QueryEditorProps<DataSource, InstanaQuery, InstanaOptions>;\n\ninterface QueryState {\n  groups: SelectableValue[];\n  queryTypes: SelectableValue[];\n  allMetrics: SelectableValue[];\n  availableMetrics: SelectableValue[];\n  selectedWindowSize: number;\n}\n\nexport class QueryEditor extends PureComponent<Props, QueryState> {\n  query: InstanaQuery;\n  snapshots: any;\n  allowInfraExplore: boolean;\n\n  constructor(props: Props) {\n    super(props);\n    const defaultQuery: Partial<InstanaQuery> = {\n      metricCategory: metricCategories[0],\n      timeShiftIsValid: true,\n      customFilters: [],\n    };\n\n    this.query = Object.assign(defaultQuery, props.query);\n\n    migrate(this.query);\n\n    this.state = {\n      groups: [],\n      allMetrics: [],\n      queryTypes: [],\n      availableMetrics: [],\n      selectedWindowSize: props.range ? readTime(props.range).windowSize : 21600000,\n    };\n\n    this.filterMetricsOnType = this.filterMetricsOnType.bind(this);\n    this.loadEntityTypes = this.loadEntityTypes.bind(this);\n    this.allowInfraExplore = props.datasource.options.allowInfraExplore;\n\n    props.onChange(this.query);\n  }\n\n  componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<QueryState>, snapshot?: any) {\n    const { onChange, range, datasource } = this.props;\n    if (range && this.state.selectedWindowSize !== readTime(range).windowSize) {\n      this.setState({\n        ...this.state,\n        selectedWindowSize: readTime(range).windowSize,\n      });\n      datasource.setPossibleTimeIntervals(this.query);\n      if (!datasource.availableTimeIntervals.find((i) => i.key === this.query.timeInterval.key)) {\n        this.query.timeInterval = datasource.getDefaultTimeInterval(this.query);\n        onChange(this.query);\n        // no need to execute onRunQuery() here because the change of time frame triggers\n        // datasource.query() anyways and datasource will take care of correcting the timeInterval\n      }\n    }\n  }\n\n  onCategoryChange = (newCategory: SelectableValue) => {\n    if (this.query.metricCategory === newCategory) {\n      // nothing needs to be done\n    } else {\n      this.selectionReset();\n      this.query.metricCategory = newCategory;\n      this.query.timeInterval = this.props.datasource.getDefaultTimeInterval(this.query);\n\n      this.changeAndRun();\n    }\n  };\n\n  changeAndRun = () => {\n    this.props.onChange(this.query);\n    this.props.onRunQuery();\n  };\n\n  setMetricPlaceholder(nrOfTotalResults: number) {\n    if (this.query.metricCategory.key === CUSTOM_METRICS) {\n      this.query.metric = {\n        key: null,\n        label: 'Please select (' + nrOfTotalResults + '/' + this.state.allMetrics.length + ')',\n      };\n    } else {\n      this.query.metric = {\n        key: null,\n        label: 'Please select (' + nrOfTotalResults + ')',\n      };\n    }\n\n    this.props.onChange(this.query);\n  }\n\n  updateMetrics = (metrics: SelectableValue[]) => {\n    this.setState(\n      {\n        availableMetrics: _.sortBy(metrics, 'key'),\n        allMetrics: _.sortBy(metrics, 'key'),\n      },\n      () => {\n        if ((this.query.metric && this.query.metric.key) || this.query.showAllMetrics) {\n          const metric = _.find(metrics, (m) => m.key === this.query.metric.key);\n          metric ? (this.query.metric = metric) : (this.query.metric = { key: null });\n        }\n        if (this.query.metricCategory.key === CUSTOM_METRICS) {\n          this.onMetricsFilter(this.query.customFilters); // this contains setMetricPlaceholder\n        } else if (!this.query.metric || !this.query.metric.key) {\n          this.setMetricPlaceholder(metrics.length);\n        }\n        this.changeAndRun();\n      }\n    );\n  };\n\n  loadEntityTypes(filterResult = true) {\n    const { query, datasource, onRunQuery } = this.props;\n\n    if (query.entityQuery) {\n      datasource.fetchTypesForTarget(query).then((response: any) => {\n        this.snapshots = response.data;\n        this.filterForEntityType(true, filterResult);\n        onRunQuery();\n      });\n    } else {\n      this.setState({ queryTypes: [] });\n    }\n  }\n\n  filterForEntityType = (findMatchingEntityTypes = true, filterResults = true) => {\n    const { query, datasource, onChange } = this.props;\n    datasource.getEntityTypes().then((entityTypes: any) => {\n      let queryTypes = entityTypes;\n      if (filterResults && !query.useFreeTextMetrics) {\n        queryTypes = this.filterEntityTypes(entityTypes, findMatchingEntityTypes);\n      }\n\n      this.setState({ queryTypes: queryTypes });\n\n      if (!query.entityType || !query.entityType.key || !_.find(queryTypes, (m) => m.key === query.entityType.key)) {\n        query.entityType = { key: null, label: 'Please select (' + queryTypes.length + ')' };\n      }\n\n      onChange(query);\n    });\n  };\n\n  filterEntityTypes = (entityTypes: SelectableValue[], findMatchingEntityTypes: boolean) => {\n    if (findMatchingEntityTypes) {\n      return _.sortBy(\n        _.filter(entityTypes, (entityType) => this.findMatchingEntityTypes(entityType)),\n        'label'\n      );\n    }\n\n    return _.sortBy(entityTypes, 'label');\n  };\n\n  findMatchingEntityTypes = (entityType: SelectableValue) => {\n    const { query } = this.props;\n    // workaround as long the api does not support returning plugins with custom metrics only\n    if (\n      query.metricCategory.key === BUILT_IN_METRICS ||\n      entityType.key === 'statsd' ||\n      entityType.key === 'prometheus' ||\n      entityType.key === 'jvmRuntimePlatform' ||\n      entityType.key === 'dropwizardApplicationContainer'\n    ) {\n      return this.snapshots.find((type: any) => type === entityType.key) && entityType.label != null;\n    }\n\n    return false;\n  };\n\n  updateQueryTypes = (types: SelectableValue[]) => {\n    this.setState({\n      queryTypes: types,\n    });\n  };\n\n  updateGroups = (groups: SelectableValue[]) => {\n    this.setState({\n      groups: groups,\n    });\n  };\n\n  onMetricsFilter = (customFilters: string[]) => {\n    let newAvailableMetrics: SelectableValue[] = [];\n    if (!customFilters || customFilters.length === 0) {\n      newAvailableMetrics = this.state.allMetrics;\n    } else {\n      newAvailableMetrics = this.applyFilterToMetricList(customFilters);\n    }\n    this.query.canShowAllMetrics = this.isAbleToShowAllMetrics(newAvailableMetrics);\n    if (!this.query.canShowAllMetrics) {\n      this.query.showAllMetrics = false;\n    }\n    this.query.customFilters = customFilters;\n    if (!this.query.metric || !this.query.metric.key) {\n      this.setMetricPlaceholder(newAvailableMetrics.length);\n    }\n\n    this.setState((state) => ({ ...state, availableMetrics: newAvailableMetrics }));\n\n    this.props.onChange(this.query);\n    this.checkMetricAndRefresh();\n  };\n\n  applyFilterToMetricList(filters: string[]) {\n    let filteredMetrics: any = this.state.allMetrics;\n    _.forEach(filters, (filter) => {\n      if (filter !== '') {\n        filteredMetrics = _.sortBy(\n          _.filter(filteredMetrics, (metric) => metric.key.toLowerCase().includes(filter.toLowerCase())),\n          'key'\n        );\n      }\n    });\n\n    return filteredMetrics;\n  }\n\n  filterMetricsOnType(type: string) {\n    let filteredMetrics: SelectableValue[] = this.state.allMetrics.filter((metric) => {\n      return metric.beaconTypes.includes(type);\n    });\n\n    this.setState({\n      availableMetrics: filteredMetrics,\n    });\n\n    if (!this.query.metric || !this.query.metric.key || !this.query.metric.beaconTypes.includes(type)) {\n      this.setMetricPlaceholder(filteredMetrics.length);\n    }\n\n    this.changeAndRun();\n  }\n\n  isAbleToShowAllMetrics(metrics: SelectableValue[]) {\n    return this.query.metricCategory.key === CUSTOM_METRICS && metrics.length > 0 && metrics.length <= 5;\n  }\n\n  checkMetricAndRefresh() {\n    if (\n      this.query.metric &&\n      this.query.metric.key &&\n      !_.includes(\n        _.map(this.state.availableMetrics, (m) => m.key),\n        this.query.metric.key\n      )\n    ) {\n      this.resetMetricSelection();\n    }\n\n    this.changeAndRun();\n  }\n\n  selectionReset() {\n    const { query } = this.props;\n    if (query.metricCategory.key > CUSTOM_METRICS) {\n      query.entityQuery = '';\n    }\n\n    this.setState({\n      availableMetrics: [],\n      allMetrics: [],\n      groups: [],\n    });\n\n    this.resetEntityTypeSelection();\n    this.resetEntitySelection();\n    this.resetMetricSelection();\n  }\n\n  resetEntityTypeSelection() {\n    const { query } = this.props;\n    query.entityType = {\n      key: null,\n      label: '-',\n    };\n    query.customFilters = [];\n  }\n\n  resetEntitySelection() {\n    const { query } = this.props;\n    query.entity = {};\n    query.group = {};\n    query.showGroupBySecondLevel = false;\n    query.groupbyTagSecondLevelKey = '';\n    query.aggregateGraphs = false;\n    query.aggregationFunction = AggregationFunctions[0];\n    query.hideOriginalGraphs = false;\n    query.filters = [];\n    query.showWarningCantShowAllResults = false;\n    query.showAllMetrics = false;\n    query.canShowAllMetrics = false;\n    query.displayMaxMetricValue = false;\n    query.applicationCallToEntity = '';\n    query.callToEntity = '';\n    query.tagFilterExpression = '';\n    this.resetServices();\n    this.resetEndpoints();\n    this.resetSLO();\n  }\n\n  resetMetricSelection() {\n    const { query } = this.props;\n    query.metric = {};\n    query.timeShift = '';\n    query.timeShiftIsValid = true;\n    query.showWarningCantShowAllResults = false;\n    query.showAllMetrics = false;\n    query.labelFormat = '';\n    query.freeTextMetrics = '';\n    query.useFreeTextMetrics = false;\n  }\n\n  resetServices() {\n    this.props.query.service = {};\n  }\n\n  resetEndpoints() {\n    this.props.query.endpoint = {};\n  }\n\n  resetSLO() {\n    const { query } = this.props;\n    query.sloValue = '';\n    query.sloReport = {};\n  }\n\n  render() {\n    const { query, onCategoryChange } = this;\n    const categories = this.allowInfraExplore\n      ? metricCategories\n      : metricCategories.filter((category) => category.key !== INFRASTRUCTURE_ANALYZE);\n\n    return (\n      <div className={'gf-form-group'}>\n        <div className={'gf-form'}>\n          <FormSelect\n            queryKeyword\n            inputWidth={0}\n            label={'Category'}\n            tooltip={'Select a metric category.'}\n            value={query.metricCategory}\n            options={categories}\n            onChange={onCategoryChange}\n          />\n        </div>\n\n        {query.metricCategory.key === BUILT_IN_METRICS && (\n          <Infrastructure\n            query={query}\n            queryTypes={this.state.queryTypes}\n            datasource={this.props.datasource}\n            onRunQuery={this.props.onRunQuery}\n            onChange={this.props.onChange}\n            updateMetrics={this.updateMetrics}\n            loadEntityTypes={this.loadEntityTypes}\n            updateQueryTypes={this.updateQueryTypes}\n          />\n        )}\n\n        {query.metricCategory.key === CUSTOM_METRICS && (\n          <Infrastructure\n            query={query}\n            queryTypes={this.state.queryTypes}\n            datasource={this.props.datasource}\n            onRunQuery={this.props.onRunQuery}\n            onChange={this.props.onChange}\n            updateMetrics={this.updateMetrics}\n            loadEntityTypes={this.loadEntityTypes}\n            updateQueryTypes={this.updateQueryTypes}\n          />\n        )}\n\n        {query.metricCategory.key === INFRASTRUCTURE_ANALYZE && (\n          <Explore\n            query={query}\n            onRunQuery={this.props.onRunQuery}\n            onChange={this.props.onChange}\n            updateMetrics={this.updateMetrics}\n            groups={this.state.groups}\n            updateGroups={this.updateGroups}\n            datasource={this.props.datasource}\n          />\n        )}\n\n        {query.metricCategory.key === ANALYZE_APPLICATION_METRICS && (\n          <ApplicationCallsMetrics\n            query={query}\n            onRunQuery={this.props.onRunQuery}\n            onChange={this.props.onChange}\n            updateMetrics={this.updateMetrics}\n            groups={this.state.groups}\n            updateGroups={this.updateGroups}\n            datasource={this.props.datasource}\n          />\n        )}\n\n        {query.metricCategory.key === ANALYZE_WEBSITE_METRICS && (\n          <WebsiteMetrics\n            query={query}\n            onRunQuery={this.props.onRunQuery}\n            onChange={this.props.onChange}\n            updateMetrics={this.updateMetrics}\n            groups={this.state.groups}\n            updateGroups={this.updateGroups}\n            filterMetricsOnType={this.filterMetricsOnType}\n            datasource={this.props.datasource}\n          />\n        )}\n\n        {query.metricCategory.key === ANALYZE_MOBILE_APP_METRICS && (\n          <MobileAppMetrics\n            query={query}\n            onRunQuery={this.props.onRunQuery}\n            onChange={this.props.onChange}\n            updateMetrics={this.updateMetrics}\n            groups={this.state.groups}\n            updateGroups={this.updateGroups}\n            filterMetricsOnType={this.filterMetricsOnType}\n            datasource={this.props.datasource}\n          />\n        )}\n\n        {query.metricCategory.key === APPLICATION_SERVICE_ENDPOINT_METRICS && (\n          <ApplicationServiceEndpointMetrics\n            query={query}\n            onRunQuery={this.props.onRunQuery}\n            onChange={this.props.onChange}\n            updateMetrics={this.updateMetrics}\n            datasource={this.props.datasource}\n          />\n        )}\n\n        {query.metricCategory.key === SLO_INFORMATION && (\n          <SloInformation\n            query={query}\n            onRunQuery={this.props.onRunQuery}\n            onChange={this.props.onChange}\n            datasource={this.props.datasource}\n          />\n        )}\n\n        {query.metricCategory.key !== SLO_INFORMATION && (\n          <Metric\n            query={query}\n            onChange={this.props.onChange}\n            onRunQuery={this.props.onRunQuery}\n            updateMetrics={this.updateMetrics}\n            availableMetrics={this.state.availableMetrics}\n            datasource={this.props.datasource}\n          />\n        )}\n\n        {query.metricCategory.key === CUSTOM_METRICS && (\n          <MetricFilter\n            query={query}\n            onChange={this.props.onChange}\n            onRunQuery={this.props.onRunQuery}\n            onFilterChange={this.onMetricsFilter}\n            availableMetrics={this.state.availableMetrics}\n            datasource={this.props.datasource}\n          />\n        )}\n\n        {(query.metricCategory.key === ANALYZE_APPLICATION_METRICS ||\n          query.metricCategory.key === ANALYZE_WEBSITE_METRICS ||\n          query.metricCategory.key === ANALYZE_MOBILE_APP_METRICS ||\n          query.metricCategory.key === INFRASTRUCTURE_ANALYZE) && (\n          <Filters\n            query={query}\n            onChange={this.props.onChange}\n            onRunQuery={this.props.onRunQuery}\n            datasource={this.props.datasource}\n            groups={this.state.groups}\n          />\n        )}\n\n        <AdvancedSettings\n          query={query}\n          onRunQuery={this.props.onRunQuery}\n          onChange={this.props.onChange}\n          loadEntityTypes={this.loadEntityTypes}\n        />\n\n        <Badge text={'4.0.1'} color={'blue'} />\n      </div>\n    );\n  }\n}\n","import { InstanaOptions, SecureJsonData } from './types/instana_options';\nimport { DataSourcePlugin } from '@grafana/data';\nimport { DataSource } from './datasources/DataSource';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\nimport { InstanaQuery } from './types/instana_query';\n\nexport const plugin = new DataSourcePlugin<DataSource, InstanaQuery, InstanaOptions, SecureJsonData>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n"],"sourceRoot":""}