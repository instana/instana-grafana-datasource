/// <reference path="../node_modules/grafana-sdk-mocks/app/headers/common.d.ts" />
import { QueryCtrl } from 'app/plugins/sdk';
import TimeFilter from './types/time_filter';
import Selectable from './types/selectable';
export declare class InstanaQueryCtrl extends QueryCtrl {
    private templateSrv;
    private backendSrv;
    private $q;
    static templateUrl: string;
    version: number;
    uniqueOperators: Array<Selectable>;
    uniqueBeaconTypes: Array<Selectable>;
    sloSpecifics: Array<Selectable>;
    callToEntities: Array<Selectable>;
    aggregationFunctions: {
        label: string;
    }[];
    uniqueEntityTypes: Array<Selectable>;
    allCustomMetrics: Array<Selectable>;
    availableMetrics: Array<Selectable>;
    uniqueEntities: Array<Selectable>;
    uniqueServices: Array<Selectable>;
    uniqueEndpoints: Array<Selectable>;
    uniqueTags: Array<Selectable>;
    configuredReports: Array<Selectable>;
    allWebsiteMetrics: Array<Selectable>;
    allTypes: Array<Selectable>;
    snapshots: Array<string>;
    entitySelectionText: string;
    metricSelectionText: string;
    serviceEndpointSelectionText: string;
    previousMetricCategory: string;
    websiteApplicationLabel: string;
    serviceEndpointTitle: string;
    timeFilter: TimeFilter;
    customFilters: any[];
    EMPTY_DROPDOWN_TEXT: string;
    NO_APPLICATION_FILTER: string;
    NO_SERVICE_FILTER: string;
    NO_ENDPOINT_FILTER: string;
    OPERATOR_STRING: string;
    OPERATOR_NUMBER: string;
    OPERATOR_BOOLEAN: string;
    OPERATOR_KEY_VALUE: string;
    BUILT_IN_METRICS: string;
    CUSTOM_METRICS: string;
    ANALYZE_APPLICATION_METRICS: string;
    ANALYZE_WEBSITE_METRICS: string;
    APPLICATION_SERVICE_ENDPOINT_METRICS: string;
    SLO_INFORMATION: string;
    defaults: {};
    /** @ngInject **/
    constructor($scope: any, $injector: any, templateSrv: any, backendSrv: any, $q: any);
    loadServices(): void;
    loadEndpoints(): void;
    isInfrastructure(): boolean;
    isBuiltInInfrastructure(): boolean;
    isCustomInfrastructure(): boolean;
    isAnalyzeWebsite(): boolean;
    isAnalyzeApplication(): boolean;
    isApplicationServiceEndpointMetric(): boolean;
    isSLORequest(): boolean;
    onWebsiteChanges(refresh: boolean, isAnalyze: boolean): any;
    onApplicationChanges(refresh: boolean, isAnalyze: boolean): any;
    onServiceChanges(refresh: boolean): any;
    onEndpointChanges(refresh: boolean): any;
    loadConfiguredSLOs(): void;
    onFilterChange(refresh: boolean, findMatchingEntityTypes?: boolean): any;
    onMetricCategorySelect(): void;
    onBeaconTypeSelect(refresh: boolean): void;
    filterForEntityType(refresh: boolean, findMatchingEntityTypes: boolean): void;
    filterEntityTypes(findMatchingEntityTypes: boolean): any;
    findMatchingEntityTypes(entityType: Selectable): boolean;
    onEntityTypeSelect(refresh: boolean): any;
    onMetricsFilter(refresh: boolean): void;
    isAbleToShowAllMetrics(): boolean;
    addFilter(): void;
    removeFilter(index: number): void;
    onTagFilterChange(index: number): void;
    checkMetricAndRefresh(refresh: boolean): void;
    selectionReset(): void;
    resetEntityTypeSelection(): void;
    resetEntitySelection(): void;
    resetMetricSelection(): void;
    resetServices(): void;
    resetEndpoints(): void;
    resetSLO(): void;
    adjustEntitySelectionPlaceholder(): void;
    adjustMetricSelectionPlaceholder(): void;
    adjustServiceEndpointSelectionPlaceholder(): void;
    buildSelectionPlaceholderText(selectableValues: any): string;
    onNamefilterChanges(): void;
    onGroupChange(): void;
    onSelect(): void;
    onSloValueChange(): void;
    onMetricSelect(): void;
    onAllMetricsSelect(): void;
    onTimeShiftChange(): void;
    onEntitySelect(): void;
    onApplicationSelect(): void;
    onServiceSelect(): void;
    toggleFreeTextMetrics(): void;
    toggleAdvancedSettings(): void;
    toggleGraphAggregation(): void;
    canShowMaxMetricValue(): any;
    addCustomFilter(): void;
    removeCustomFilter(index: number, refresh?: boolean): void;
    canShowAggregation(): boolean;
    isPluginThatSupportsAggregation(): boolean;
    getPluginId(): any;
    isAnalyzeCategory(): boolean;
    getAvailableTimeIntervals(): any;
    loadVersion(): void;
    isSloEnabled(): any;
    supportsApplicationPerspective(): boolean;
}
